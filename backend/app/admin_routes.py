# üìÇ backend/app/admin_routes.py ‚Äî –∞–¥–º–∏–Ω-–º–æ–¥—É–ª—å EFHC
# -----------------------------------------------------------------------------
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
#   ‚Ä¢ –ï–¥–∏–Ω—ã–π –∞–¥–º–∏–Ω-–º–æ–¥—É–ª—å (–æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Ä–µ–≥—Ä–µ—Å—Å–∞), –∫–æ—Ç–æ—Ä—ã–π:
#       - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–æ Telegram ID –∏/–∏–ª–∏ NFT whitelist).
#       - –£–ø—Ä–∞–≤–ª—è–µ—Ç whitelist'–æ–º NFT (–ø—Ä–æ—Å–º–æ—Ç—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ).
#       - –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä—É—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ/—Å–ø–∏—Å–∞–Ω–∏–µ bonus/kWh,
#         —É—Å—Ç–∞–Ω–æ–≤–∫–∞ VIP-—Ñ–ª–∞–≥–∞) ‚Äî EFHC —Å—Ç—Ä–æ–≥–æ —á–µ—Ä–µ–∑ –ë–∞–Ω–∫.
#       - –£–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏—è–º–∏ (CRUD) –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å—ã/–Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∑–∞–¥–∞–Ω–∏—è —Å
#         –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º —Å–ø–∏—Å–∞–Ω–∏–µ–º EFHC —Å–æ —Å—á—ë—Ç–∞ –ë–∞–Ω–∫–∞.
#       - –£–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ—Ç–µ—Ä–µ—è–º–∏ (CRUD).
#       - –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ª–æ–≥–∏ TonAPI-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.
#       - –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç —ç–º–∏—Å—Å–∏—é/—Å–∂–∏–≥–∞–Ω–∏–µ EFHC —á–µ—Ä–µ–∑ –ë–∞–Ω–∫ (mint/burn).
#       - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ë–∞–Ω–∫–∞ EFHC –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –µ–≥–æ –ø–æ–ø–æ–ª–Ω—è—Ç—å/—É–º–µ–Ω—å—à–∞—Ç—å.
#
# –ü—Ä–∏–Ω—Ü–∏–ø ¬´–ë–∞–Ω–∫ EFHC¬ª (telegram_id = 362746228):
#   ‚Ä¢ –õ—é–±—ã–µ –¥–≤–∏–∂–µ–Ω–∏–µ EFHC –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ –ë–∞–Ω–∫:
#       - –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Üí —Å–ø–∏—Å–∞–Ω–∏–µ EFHC —Å –ë–∞–Ω–∫–∞.
#       - –°–ø–∏—Å–∞–Ω–∏–µ EFHC —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ EFHC –≤ –ë–∞–Ω–∫.
#   ‚Ä¢ –ú–∏–Ω—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç EFHC –Ω–∞ –±–∞–ª–∞–Ω—Å –ë–∞–Ω–∫–∞. –ë—ë—Ä–Ω —Å–∂–∏–≥–∞–µ—Ç EFHC —Å –±–∞–ª–∞–Ω—Å–∞ –ë–∞–Ω–∫–∞.
#   ‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö ¬´EFHC –∏–∑ –≤–æ–∑–¥—É—Ö–∞¬ª –∏–ª–∏ ¬´–≤ –Ω–∏–∫—É–¥–∞¬ª.
#   ‚Ä¢ –î–ª—è bonus/kWh ‚Äî —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, –ù–ï EFHC, –æ–Ω–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é.
#
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤:
#   ‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫ `X-Telegram-Id` –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω (—á–∏—Å–ª–æ).
#   ‚Ä¢ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –ø–æ settings.ADMIN_TELEGRAM_ID.
#   ‚Ä¢ NFT-–∞–¥–º–∏–Ω ‚Äî –µ—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ `X-Wallet-Address` –∫–æ—à–µ–ª—ë–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç
#     NFT –∏–∑ whitelist (—Ç–∞–±–ª–∏—Ü–∞ efhc_admin.admin_nft_whitelist; –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ TonAPI).
#   ‚Ä¢ –ë–∞–Ω–∫ (ID 362746228) —Ç–∞–∫–∂–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º.
#
# –°–≤—è–∑–∏ —Å –ø—Ä–æ–µ–∫—Ç–æ–º:
#   ‚Ä¢ database.py ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ –ë–î.
#   ‚Ä¢ config.py ‚Äî –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ ID –∞–¥–º–∏–Ω–æ–≤, TON-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
#   ‚Ä¢ models.py ‚Äî ORM-–º–æ–¥–µ–ª–∏ User, Balance, Task, Lottery, TonEventLog, AdminNFTWhitelist, UserVIP.
#   ‚Ä¢ efhc_transactions.py ‚Äî –ø—Ä–∏–º–∏—Ç–∏–≤—ã –¥–≤–∏–∂–µ–Ω–∏—è EFHC —á–µ—Ä–µ–∑ –ë–∞–Ω–∫, mint/burn, –ª–æ–≥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
#   ‚Ä¢ –ù–∏—á–µ–≥–æ –∏–∑ —Ä–∞–Ω–µ–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –ù–ï —É–¥–∞–ª–µ–Ω–æ. –ú–æ–¥—É–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω—ã:
#       - –î–æ–±–∞–≤–ª–µ–Ω—ã /api/admin/mint, /api/admin/burn, /api/admin/tasks/award, /api/admin/bank/balance.
#       - –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω—ã /api/admin/users/credit –∏ /api/admin/users/debit: EFHC —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ —á–µ—Ä–µ–∑ –ë–∞–Ω–∫.
#       - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ TonAPI —Å–æ—Ö—Ä–∞–Ω—ë–Ω.
# -----------------------------------------------------------------------------

from __future__ import annotations

from datetime import datetime
from decimal import Decimal, ROUND_DOWN
from typing import List, Optional, Dict, Any

import httpx
from fastapi import (
    APIRouter, Depends, Header, HTTPException, status, Path, Query
)
from pydantic import BaseModel, Field, condecimal
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, func, text

from .database import get_session
from .config import get_settings
from .models import (
    User,
    Balance,
    UserVIP,
    Task,
    Lottery,
    TonEventLog,
    AdminNFTWhitelist,
)
from .efhc_transactions import (
    BANK_TELEGRAM_ID,            # 362746228 ‚Äî ID –ë–∞–Ω–∫–∞ EFHC
    ensure_logs_table,           # —Å–æ–∑–¥–∞–Ω–∏–µ efhc_core.mint_burn_log –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    mint_efhc,                   # –º–∏–Ω—Ç EFHC ‚Üí –ë–∞–Ω–∫
    burn_efhc,                   # –±—ë—Ä–Ω EFHC ‚Üê –ë–∞–Ω–∫
    credit_user_from_bank,       # –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ —Å–ø–∏—Å–∞–Ω–∏–µ–º —Å–æ —Å—á—ë—Ç–∞ –ë–∞–Ω–∫–∞
    debit_user_to_bank,          # —Å–ø–∏—Å–∞–Ω–∏–µ EFHC —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ–º –Ω–∞ —Å—á—ë—Ç –ë–∞–Ω–∫–∞
)

# -----------------------------------------------------------------------------
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
# -----------------------------------------------------------------------------
settings = get_settings()
router = APIRouter()

# -----------------------------------------------------------------------------
# –£—Ç–∏–ª–∏—Ç—ã –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è Decimal (3 –∑–Ω–∞–∫–∞)
# -----------------------------------------------------------------------------
DEC3 = Decimal("0.001")

def d3(x: Decimal) -> Decimal:
    """
    –û–∫—Ä—É–≥–ª—è–µ—Ç Decimal –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –≤–Ω–∏–∑ (ROUND_DOWN).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Ä–∞–±–æ—Ç–∞—Ö —Å bonus/kWh –∏ EFHC (–≤ –∏—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏).
    """
    return x.quantize(DEC3, rounding=ROUND_DOWN)

# -----------------------------------------------------------------------------
# NFT-–ø—Ä–æ–≤–µ—Ä–∫–∞ TonAPI: –Ω—É–∂–µ–Ω API key –≤ config.settings.NFT_PROVIDER_API_KEY
# -----------------------------------------------------------------------------
async def _fetch_account_nfts(owner: str) -> List[str]:
    """
    –ó–∞–ø—Ä–æ—Å –∫ TonAPI: —Å–ø–∏—Å–æ–∫ NFT –ø–æ –∞–¥—Ä–µ—Å—É `owner`.
    GET /v2/accounts/{owner}/nfts
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∞–¥—Ä–µ—Å–æ–≤ NFT (—Å—Ç—Ä–æ–∫–∏).
    """
    base = (settings.NFT_PROVIDER_BASE_URL or "https://tonapi.io").rstrip("/")
    url = f"{base}/v2/accounts/{owner}/nfts"
    headers = {}
    if settings.NFT_PROVIDER_API_KEY:
        # –î–ª—è tonapi.io –¥–æ–ø—É—Å—Ç–∏–º–æ Authorization: Bearer <token>
        headers["Authorization"] = f"Bearer {settings.NFT_PROVIDER_API_KEY}"

    try:
        async with httpx.AsyncClient(timeout=15.0) as client:
            r = await client.get(url, headers=headers)
            r.raise_for_status()
            data = r.json()
    except httpx.HTTPError as e:
        print(f"[EFHC][ADMIN][NFT] TonAPI request failed: {e}")
        return []

    items = data.get("items") or data.get("nfts") or []
    nft_addrs: List[str] = []
    for it in items:
        if not it:
            continue
        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ TonAPI –ø–æ–ª–µ –º–æ–∂–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É
        addr = it.get("address") or (it.get("nft") or {}).get("address")
        if addr:
            nft_addrs.append(addr)
    return nft_addrs


async def _is_admin_by_nft(db: AsyncSession, owner: Optional[str]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤–ª–∞–¥–µ–µ—Ç –ª–∏ –∞–¥—Ä–µ—Å `owner` —Ö–æ—Ç—å –æ–¥–Ω–∏–º NFT –∏–∑ whitelist (efhc_admin.admin_nft_whitelist).
    –ü—Ä–∏–º.: whitelist —Ö—Ä–∞–Ω–∏—Ç –∞–¥—Ä–µ—Å–∞ NFT, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é.
    """
    if not owner:
        return False

    q = await db.execute(select(AdminNFTWhitelist.nft_address))
    whitelist = {row[0].strip() for row in q.all() if row[0]}
    if not whitelist:
        return False

    user_nfts = {addr.strip() for addr in (await _fetch_account_nfts(owner))}
    return len(whitelist.intersection(user_nfts)) > 0


async def require_admin(
    db: AsyncSession,
    x_telegram_id: Optional[str],
    x_wallet_address: Optional[str],
) -> Dict[str, Any]:
    """
    –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤:
      ‚Ä¢ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –ø–æ settings.ADMIN_TELEGRAM_ID.
      ‚Ä¢ –ë–∞–Ω–∫ (BANK_TELEGRAM_ID = 362746228).
      ‚Ä¢ NFT-–∞–¥–º–∏–Ω: –µ—Å–ª–∏ `x_wallet_address` –≤–ª–∞–¥–µ–µ—Ç NFT –∏–∑ whitelist.

    –í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–∞–≤ ‚Äî HTTP 403.
    """
    if not x_telegram_id or not x_telegram_id.isdigit():
        raise HTTPException(status_code=400, detail="X-Telegram-Id header required")

    tg = int(x_telegram_id)

    # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –ø–æ –∫–æ–Ω—Ñ–∏–≥—É
    if settings.ADMIN_TELEGRAM_ID and tg == int(settings.ADMIN_TELEGRAM_ID):
        return {"is_admin": True, "by": "super"}

    # –ë–∞–Ω–∫ (—Ç–æ–∂–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è)
    if tg == BANK_TELEGRAM_ID:
        return {"is_admin": True, "by": "bank"}

    # NFT-–∞–¥–º–∏–Ω
    if await _is_admin_by_nft(db, x_wallet_address):
        return {"is_admin": True, "by": "nft"}

    raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")

# -----------------------------------------------------------------------------
# Pydantic-—Å—Ö–µ–º—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
# -----------------------------------------------------------------------------
class WhoAmIResponse(BaseModel):
    is_admin: bool
    by: Optional[str] = Field(None, description="–ò—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤: 'super'/'bank'/'nft'")
    admin_telegram_id: Optional[int] = None
    vip_nft_collection: Optional[str] = None
    whitelist_count: int = 0

class WhitelistAddRequest(BaseModel):
    nft_address: str = Field(..., description="TON-–∞–¥—Ä–µ—Å NFT")
    comment: Optional[str] = None

class CreditRequest(BaseModel):
    telegram_id: int
    efhc: Optional[Decimal] = Decimal("0.000")
    bonus: Optional[Decimal] = Decimal("0.000")
    kwh: Optional[Decimal] = Decimal("0.000")

class DebitRequest(BaseModel):
    telegram_id: int
    efhc: Optional[Decimal] = Decimal("0.000")
    bonus: Optional[Decimal] = Decimal("0.000")
    kwh: Optional[Decimal] = Decimal("0.000")

class VipSetRequest(BaseModel):
    telegram_id: int
    enabled: bool

class TaskCreateRequest(BaseModel):
    title: str
    url: Optional[str] = None
    reward_bonus_efhc: Decimal = Decimal("1.000")
    active: bool = True

class TaskPatchRequest(BaseModel):
    title: Optional[str] = None
    url: Optional[str] = None
    reward_bonus_efhc: Optional[Decimal] = None
    active: Optional[bool] = None

class LotteryCreateRequest(BaseModel):
    code: str
    title: str
    prize_type: str
    target_participants: int = 100
    active: bool = True

class LotteryPatchRequest(BaseModel):
    title: Optional[str] = None
    prize_type: Optional[str] = None
    target_participants: Optional[int] = None
    active: Optional[bool] = None

# --- Mint/Burn/Tasks award ---
class MintRequest(BaseModel):
    amount: condecimal(gt=0, max_digits=30, decimal_places=3) = Field(..., description="–°—É–º–º–∞ EFHC –¥–ª—è –º–∏–Ω—Ç–∞ (–≤ –ë–∞–Ω–∫)")
    comment: Optional[str] = Field("", description="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –º–∏–Ω—Ç—É")

class BurnRequest(BaseModel):
    amount: condecimal(gt=0, max_digits=30, decimal_places=3) = Field(..., description="–°—É–º–º–∞ EFHC –¥–ª—è –±—ë—Ä–Ω–∞ (–∏–∑ –ë–∞–Ω–∫–∞)")
    comment: Optional[str] = Field("", description="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –±—ë—Ä–Ω—É")

class AwardTaskRequest(BaseModel):
    user_id: int = Field(..., description="Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    amount: condecimal(gt=0, max_digits=30, decimal_places=3) = Field(..., description="EFHC –∑–∞ –∑–∞–¥–∞–Ω–∏—è")
    reason: Optional[str] = Field("task_bonus", description="–û–ø–∏—Å–∞–Ω–∏–µ/–ø—Ä–∏—á–∏–Ω–∞")

# -----------------------------------------------------------------------------
# –¢–∞–±–ª–∏—Ü—ã –ª–æ–≥–æ–≤ –±–æ–Ω—É—Å–æ–≤/–∑–∞–¥–∞–Ω–∏–π (idempotent)
# -----------------------------------------------------------------------------
TASKS_BONUS_CREATE_SQL = """
CREATE TABLE IF NOT EXISTS efhc_core.tasks_bonus_log (
    id BIGSERIAL PRIMARY KEY,
    ts TIMESTAMPTZ DEFAULT now(),
    admin_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    amount NUMERIC(30, 3) NOT NULL,
    reason TEXT,
    CHECK (amount >= 0)
);
"""

async def ensure_tasks_bonus_table(db: AsyncSession) -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É efhc_core.tasks_bonus_log –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    """
    await db.execute(text(TASKS_BONUS_CREATE_SQL))
    await db.commit()

# -----------------------------------------------------------------------------
# –≠–Ω–¥–ø–æ–∏–Ω—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
# -----------------------------------------------------------------------------
@router.get("/admin/whoami", response_model=WhoAmIResponse)
async def admin_whoami(
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, alias="X-Wallet-Address"),
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∞—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
      - is_admin: True/False,
      - by: 'super'|'bank'|'nft' (–∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤),
      - admin_telegram_id: ID —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏,
      - vip_nft_collection: –∫–æ–ª–ª–µ–∫—Ü–∏—è VIP NFT (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞),
      - whitelist_count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NFT –≤ whitelist.
    """
    is_admin, by = False, None
    try:
        perm = await require_admin(db, x_telegram_id, x_wallet_address)
        is_admin, by = perm["is_admin"], perm["by"]
    except HTTPException:
        pass

    q = await db.execute(select(func.count()).select_from(AdminNFTWhitelist))
    wl_count = int(q.scalar() or 0)

    return WhoAmIResponse(
        is_admin=is_admin,
        by=by,
        admin_telegram_id=int(settings.ADMIN_TELEGRAM_ID) if settings.ADMIN_TELEGRAM_ID else None,
        vip_nft_collection=settings.VIP_NFT_COLLECTION,
        whitelist_count=wl_count,
    )

# -----------------------------------------------------------------------------
# NFT Whitelist: —Å–ø–∏—Å–æ–∫/–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ
# -----------------------------------------------------------------------------
@router.get("/admin/nft/whitelist")
async def admin_nft_whitelist_list(
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, alias="X-Wallet-Address"),
):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ NFT-—Ç–æ–∫–µ–Ω–æ–≤ –≤ whitelist."""
    await require_admin(db, x_telegram_id, x_wallet_address)
    q = await db.execute(select(AdminNFTWhitelist).order_by(AdminNFTWhitelist.id.asc()))
    return [
        {"id": r.id, "nft_address": r.nft_address, "comment": r.comment, "created_at": r.created_at.isoformat()}
        for r in q.scalars().all()
    ]

@router.post("/admin/nft/whitelist")
async def admin_nft_whitelist_add(
    payload: WhitelistAddRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, alias="X-Wallet-Address"),
):
    """–î–æ–±–∞–≤–ª—è–µ—Ç NFT –≤ whitelist (–µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç)."""
    await require_admin(db, x_telegram_id, x_wallet_address)
    db.add(AdminNFTWhitelist(nft_address=payload.nft_address.strip(), comment=payload.comment))
    try:
        await db.commit()
    except Exception as e:
        await db.rollback()
        raise HTTPException(status_code=400, detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å: {e}")
    return {"ok": True}

@router.delete("/admin/nft/whitelist/{item_id}")
async def admin_nft_whitelist_delete(
    item_id: int,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, alias="X-Wallet-Address"),
):
    """–£–¥–∞–ª—è–µ—Ç NFT –∏–∑ whitelist –ø–æ ID."""
    await require_admin(db, x_telegram_id, x_wallet_address)
    q = await db.execute(select(AdminNFTWhitelist).where(AdminNFTWhitelist.id == item_id))
    row = q.scalar_one_or_none()
    if not row:
        raise HTTPException(status_code=404, detail="–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    await db.delete(row)
    await db.commit()
    return {"ok": True}

# -----------------------------------------------------------------------------
# –†—É—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:
#  ‚Ä¢ EFHC ‚Äî –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ –ë–∞–Ω–∫ (credit_user_from_bank/debit_user_to_bank).
#  ‚Ä¢ bonus, kWh ‚Äî –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ balances.
# -----------------------------------------------------------------------------
@router.post("/admin/users/credit")
async def admin_users_credit(
    payload: CreditRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, alias="X-Wallet-Address"),
):
    """
    –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
      ‚Ä¢ EFHC ‚Äî —á–µ—Ä–µ–∑ –ë–∞–Ω–∫ (—Å–ø–∏—Å—ã–≤–∞–µ–º —É –ë–∞–Ω–∫–∞, –Ω–∞—á–∏—Å–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é).
      ‚Ä¢ bonus/kWh ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é.
    """
    await require_admin(db, x_telegram_id, x_wallet_address)
    tg = int(payload.telegram_id)

    # ensure user rows
    await db.execute(text(f"""
        INSERT INTO {settings.DB_SCHEMA_CORE}.users (telegram_id)
        VALUES (:tg) ON CONFLICT (telegram_id) DO NOTHING
    """), {"tg": tg})
    await db.execute(text(f"""
        INSERT INTO {settings.DB_SCHEMA_CORE}.balances (telegram_id)
        VALUES (:tg) ON CONFLICT (telegram_id) DO NOTHING
    """), {"tg": tg})

    # EFHC —á–µ—Ä–µ–∑ –ë–∞–Ω–∫
    efhc_amt = d3(Decimal(payload.efhc or 0))
    if efhc_amt > 0:
        await credit_user_from_bank(db, user_id=tg, amount=efhc_amt)

    # bonus / kWh ‚Äî –Ω–∞–ø—Ä—è–º—É—é
    if (payload.bonus or 0) != 0 or (payload.kwh or 0) != 0:
        q = await db.execute(select(Balance).where(Balance.telegram_id == tg))
        bal: Optional[Balance] = q.scalar_one_or_none()
        if not bal:
            raise HTTPException(status_code=500, detail="–ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        new_b = d3(Decimal(bal.bonus or 0) + Decimal(payload.bonus or 0))
        new_k = d3(Decimal(bal.kwh or 0) + Decimal(payload.kwh or 0))
        await db.execute(update(Balance).where(Balance.telegram_id == tg).values(
            bonus=str(new_b), kwh=str(new_k)
        ))

    await db.commit()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    q2 = await db.execute(select(Balance).where(Balance.telegram_id == tg))
    bal2: Optional[Balance] = q2.scalar_one_or_none()
    return {
        "ok": True,
        "telegram_id": tg,
        "efhc": str(d3(Decimal(bal2.efhc or 0))),
        "bonus": str(d3(Decimal(bal2.bonus or 0))),
        "kwh": str(d3(Decimal(bal2.kwh or 0))),
    }

@router.post("/admin/users/debit")
async def admin_users_debit(
    payload: DebitRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, alias="X-Wallet-Address"),
):
    """
    –°–ø–∏—Å–∞–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
      ‚Ä¢ EFHC ‚Äî —á–µ—Ä–µ–∑ –ë–∞–Ω–∫ (—Å–ø–∏—Å—ã–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞—á–∏—Å–ª—è–µ–º –≤ –ë–∞–Ω–∫).
      ‚Ä¢ bonus/kWh ‚Äî –Ω–∞–ø—Ä—è–º—É—é.
    """
    await require_admin(db, x_telegram_id, x_wallet_address)
    tg = int(payload.telegram_id)

    # –î–ª—è EFHC ‚Äî —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ë–∞–Ω–∫
    efhc_amt = d3(Decimal(payload.efhc or 0))
    if efhc_amt > 0:
        await debit_user_to_bank(db, user_id=tg, amount=efhc_amt)

    # bonus/kWh ‚Äî –Ω–∞–ø—Ä—è–º—É—é
    if (payload.bonus or 0) != 0 or (payload.kwh or 0) != 0:
        q = await db.execute(select(Balance).where(Balance.telegram_id == tg))
        bal: Optional[Balance] = q.scalar_one_or_none()
        if not bal:
            raise HTTPException(status_code=404, detail="–ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        req_b = Decimal(payload.bonus or 0)
        req_k = Decimal(payload.kwh or 0)
        cur_b = Decimal(bal.bonus or 0)
        cur_k = Decimal(bal.kwh or 0)
        if cur_b < req_b or cur_k < req_k:
            raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ bonus/kWh")

        new_b = d3(cur_b - req_b)
        new_k = d3(cur_k - req_k)
        await db.execute(update(Balance).where(Balance.telegram_id == tg).values(
            bonus=str(new_b), kwh=str(new_k)
        ))

    await db.commit()

    q2 = await db.execute(select(Balance).where(Balance.telegram_id == tg))
    bal2: Optional[Balance] = q2.scalar_one_or_none()
    return {
        "ok": True,
        "telegram_id": tg,
        "efhc": str(d3(Decimal(bal2.efhc or 0))),
        "bonus": str(d3(Decimal(bal2.bonus or 0))),
        "kwh": str(d3(Decimal(bal2.kwh or 0))),
    }

# -----------------------------------------------------------------------------
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞/—Å–Ω—è—Ç–∏–µ VIP-—Ñ–ª–∞–≥–∞ –≤—Ä—É—á–Ω—É—é (–≤–ª–∏—è–µ—Ç –Ω–∞ +7% –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
# -----------------------------------------------------------------------------
@router.post("/admin/users/vip")
async def admin_users_vip_set(
    payload: VipSetRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, alias="X-Wallet-Address"),
):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞/—Å–Ω—è—Ç–∏–µ VIP-—Ñ–ª–∞–≥–∞:
      ‚Ä¢ –ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ EFHC –Ω–∞–ø—Ä—è–º—É—é,
      ‚Ä¢ –í–∫–ª—é—á–∞–µ—Ç—Å—è/–≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è VIP (—É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π 0.598 vs 0.64 –∫–í—Ç/—Å—É—Ç–∫–∏).
    """
    await require_admin(db, x_telegram_id, x_wallet_address)
    tg = int(payload.telegram_id)
    q = await db.execute(select(UserVIP).where(UserVIP.telegram_id == tg))
    row = q.scalar_one_or_none()

    if payload.enabled:
        if not row:
            db.add(UserVIP(telegram_id=tg, since=datetime.utcnow()))
            await db.commit()
        return {"ok": True, "vip": True}
    else:
        if row:
            await db.delete(row)
            await db.commit()
        return {"ok": True, "vip": False}

# -----------------------------------------------------------------------------
# Tasks ‚Äî CRUD
# -----------------------------------------------------------------------------
@router.get("/admin/tasks")
async def admin_tasks_list(
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, alias="X-Wallet-Address"),
):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á."""
    await require_admin(db, x_telegram_id, x_wallet_address)
    q = await db.execute(select(Task).order_by(Task.id.asc()))
    return [
        {
            "id": t.id,
            "title": t.title,
            "url": t.url,
            "reward_bonus_efhc": str(t.reward_bonus_efhc),
            "active": t.active,
            "created_at": t.created_at.isoformat()
        }
        for t in q.scalars().all()
    ]

@router.post("/admin/tasks")
async def admin_tasks_create(
    payload: TaskCreateRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, alias="X-Wallet-Address"),
):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ."""
    await require_admin(db, x_telegram_id, x_wallet_address)
    t = Task(
        title=payload.title.strip(),
        url=payload.url,
        reward_bonus_efhc=d3(payload.reward_bonus_efhc),
        active=payload.active
    )
    db.add(t)
    await db.commit()
    await db.refresh(t)
    return {"ok": True, "id": t.id}

@router.patch("/admin/tasks/{task_id}")
async def admin_tasks_patch(
    task_id: int,
    payload: TaskPatchRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, alias="X-Wallet-Address"),
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ ID."""
    await require_admin(db, x_telegram_id, x_wallet_address)
    q = await db.execute(select(Task).where(Task.id == task_id))
    t = q.scalar_one_or_none()
    if not t:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    if payload.title is not None:
        t.title = payload.title.strip()
    if payload.url is not None:
        t.url = payload.url
    if payload.reward_bonus_efhc is not None:
        t.reward_bonus_efhc = d3(payload.reward_bonus_efhc)
    if payload.active is not None:
        t.active = payload.active

    await db.commit()
    return {"ok": True}

# -----------------------------------------------------------------------------
# Lotteries ‚Äî CRUD
# -----------------------------------------------------------------------------
@router.get("/admin/lotteries")
async def admin_lotteries_list(
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, alias="X-Wallet-Address"),
):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–æ—Ç–µ—Ä–µ–π."""
    await require_admin(db, x_telegram_id, x_wallet_address)
    q = await db.execute(select(Lottery).order_by(Lottery.created_at.asc()))
    return [
        {
            "id": l.code,
            "title": l.title,
            "prize_type": l.prize_type,
            "target_participants": l.target_participants,
            "active": l.active,
            "tickets_sold": l.tickets_sold,
            "created_at": l.created_at.isoformat()
        }
        for l in q.scalars().all()
    ]

@router.post("/admin/lotteries")
async def admin_lottery_create(
    payload: LotteryCreateRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, alias="X-Wallet-Address"),
):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ª–æ—Ç–µ—Ä–µ—é."""
    await require_admin(db, x_telegram_id, x_wallet_address)
    q = await db.execute(select(Lottery).where(Lottery.code == payload.code))
    if q.scalar_one_or_none():
        raise HTTPException(status_code=400, detail="–ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
    l = Lottery(
        code=payload.code.strip(),
        title=payload.title.strip(),
        prize_type=payload.prize_type.strip(),
        target_participants=payload.target_participants,
        active=payload.active
    )
    db.add(l)
    await db.commit()
    return {"ok": True}

@router.patch("/admin/lotteries/{code}")
async def admin_lottery_patch(
    code: str,
    payload: LotteryPatchRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, alias="X-Wallet-Address"),
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ–∏ –ø–æ –∫–æ–¥—É."""
    await require_admin(db, x_telegram_id, x_wallet_address)
    q = await db.execute(select(Lottery).where(Lottery.code == code))
    l = q.scalar_one_or_none()
    if not l:
        raise HTTPException(status_code=404, detail="–õ–æ—Ç–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    if payload.title is not None:
        l.title = payload.title.strip()
    if payload.prize_type is not None:
        l.prize_type = payload.prize_type.strip()
    if payload.target_participants is not None:
        l.target_participants = payload.target_participants
    if payload.active is not None:
        l.active = payload.active

    await db.commit()
    return {"ok": True}

# -----------------------------------------------------------------------------
# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ TonAPI
# -----------------------------------------------------------------------------
@router.get("/admin/ton/logs")
async def admin_ton_logs(
    limit: int = Query(50, ge=1, le=500),
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, alias="X-Wallet-Address"),
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –ª–æ–≥–æ–≤ TonAPI-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (efhc_core.ton_events_log).
    """
    await require_admin(db, x_telegram_id, x_wallet_address)
    q = await db.execute(select(TonEventLog).order_by(TonEventLog.processed_at.desc()).limit(limit))
    return [
        {
            "event_id": r.event_id,
            "ts": r.ts.isoformat() if r.ts else None,
            "action_type": r.action_type,
            "asset": r.asset,
            "amount": str(r.amount),
            "from": r.from_addr,
            "to": r.to_addr,
            "memo": r.memo,
            "telegram_id": r.telegram_id,
            "vip_requested": bool(r.vip_requested),
            "processed": bool(r.processed),
            "processed_at": r.processed_at.isoformat() if r.processed_at else None
        }
        for r in q.scalars().all()
    ]

# -----------------------------------------------------------------------------
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ê–¥–º–∏–Ω—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ë–∞–Ω–∫–∞ ‚Äî mint/burn/tasks award/balance
# -----------------------------------------------------------------------------
@router.post("/admin/mint", summary="–ú–∏–Ω—Ç EFHC –Ω–∞ —Å—á—ë—Ç –ë–∞–Ω–∫–∞")
async def api_admin_mint(
    payload: MintRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, alias="X-Wallet-Address"),
):
    """
    –ú–∏–Ω—Ç EFHC: –¥–æ–±–∞–≤–ª—è–µ—Ç EFHC –Ω–∞ –±–∞–ª–∞–Ω—Å –ë–∞–Ω–∫–∞ (telegram_id=362746228).
    –í—Å—ë –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –≤ efhc_core.mint_burn_log.
    """
    await require_admin(db, x_telegram_id, x_wallet_address)
    await ensure_logs_table(db)
    try:
        await mint_efhc(db, admin_id=int(x_telegram_id), amount=Decimal(payload.amount), comment=payload.comment or "")
        q = await db.execute(
            text("SELECT efhc FROM efhc_core.balances WHERE telegram_id = :bank"),
            {"bank": BANK_TELEGRAM_ID},
        )
        row = q.first()
        bank_balance = str(row[0] if row and row[0] is not None else "0.000")
        await db.commit()
        return {"ok": True, "bank_balance_efhc": bank_balance}
    except Exception as e:
        await db.rollback()
        raise HTTPException(status_code=400, detail=f"Mint error: {e}")

@router.post("/admin/burn", summary="–ë—ë—Ä–Ω EFHC —Å–æ —Å—á—ë—Ç–∞ –ë–∞–Ω–∫–∞")
async def api_admin_burn(
    payload: BurnRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, alias="X-Wallet-Address"),
):
    """
    –ë—ë—Ä–Ω EFHC: —Å–∂–∏–≥–∞–µ—Ç EFHC —Å –±–∞–ª–∞–Ω—Å–∞ –ë–∞–Ω–∫–∞.
    –í—Å—ë –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –≤ efhc_core.mint_burn_log.
    """
    await require_admin(db, x_telegram_id, x_wallet_address)
    await ensure_logs_table(db)
    try:
        await burn_efhc(db, admin_id=int(x_telegram_id), amount=Decimal(payload.amount), comment=payload.comment or "")
        q = await db.execute(
            text("SELECT efhc FROM efhc_core.balances WHERE telegram_id = :bank"),
            {"bank": BANK_TELEGRAM_ID},
        )
        row = q.first()
        bank_balance = str(row[0] if row and row[0] is not None else "0.000")
        await db.commit()
        return {"ok": True, "bank_balance_efhc": bank_balance}
    except Exception as e:
        await db.rollback()
        raise HTTPException(status_code=400, detail=f"Burn error: {e}")

@router.post("/admin/tasks/award", summary="–ù–∞—á–∏—Å–ª–∏—Ç—å EFHC –∑–∞ –∑–∞–¥–∞–Ω–∏—è (–∏–∑ –ë–∞–Ω–∫–∞)")
async def api_admin_tasks_award(
    payload: AwardTaskRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, alias="X-Wallet-Address"),
):
    """
    –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞ –∑–∞–¥–∞–Ω–∏—è/–±–æ–Ω—É—Å—ã:
      ‚Ä¢ EFHC —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å –ë–∞–Ω–∫–∞ ‚Üí –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (credit_user_from_bank).
      ‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –≤ efhc_core.tasks_bonus_log.
    """
    await require_admin(db, x_telegram_id, x_wallet_address)
    await ensure_tasks_bonus_table(db)
    try:
        amt = d3(Decimal(payload.amount))
        await credit_user_from_bank(db, user_id=int(payload.user_id), amount=amt)
        # –õ–æ–≥ –±–æ–Ω—É—Å–æ–≤/–∑–∞–¥–∞–Ω–∏–π
        await db.execute(
            text("""INSERT INTO efhc_core.tasks_bonus_log (admin_id, user_id, amount, reason)
                    VALUES (:admin_id, :user_id, :amt, :reason)"""),
            {
                "admin_id": int(x_telegram_id),
                "user_id": int(payload.user_id),
                "amt": str(amt),
                "reason": payload.reason or "task_bonus",
            },
        )
        # –ë–∞–ª–∞–Ω—Å –ë–∞–Ω–∫–∞ –¥–ª—è –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏
        q = await db.execute(
            text("SELECT efhc FROM efhc_core.balances WHERE telegram_id = :bank"),
            {"bank": BANK_TELEGRAM_ID},
        )
        row = q.first()
        bank_balance = str(row[0] if row and row[0] is not None else "0.000")
        await db.commit()
        return {
            "ok": True,
            "user_id": int(payload.user_id),
            "amount": str(amt),
            "reason": payload.reason or "task_bonus",
            "bank_balance_efhc": bank_balance,
        }
    except Exception as e:
        await db.rollback()
        raise HTTPException(status_code=400, detail=f"Tasks award error: {e}")

@router.get("/admin/bank/balance", summary="–ë–∞–ª–∞–Ω—Å –ë–∞–Ω–∫–∞ EFHC")
async def api_admin_bank_balance(
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, alias="X-Wallet-Address"),
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å EFHC –ë–∞–Ω–∫–∞ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —É—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç), ID=362746228.
    """
    await require_admin(db, x_telegram_id, x_wallet_address)
    q = await db.execute(
        text("SELECT efhc FROM efhc_core.balances WHERE telegram_id = :bank"),
        {"bank": BANK_TELEGRAM_ID},
    )
    row = q.first()
    bank_balance = str(row[0] if row and row[0] is not None else "0.000")
    return {"ok": True, "bank_balance_efhc": bank_balance}

# -----------------------------------------------------------------------------
# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:
#   ‚Ä¢ –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–æ—É—Ç–µ—Ä –≤ main.py:
#       from .admin_routes import router as admin_router
#       app.include_router(admin_router)
#
#   ‚Ä¢ –í—Å–µ EFHC-–æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö (Panels, Exchange, Shop, Withdrawals,
#     Referrals awards) –î–û–õ–ñ–ù–´ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å efhc_transactions.credit_user_from_bank /
#     debit_user_to_bank –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–∞ ¬´–≤—Å—ë —á–µ—Ä–µ–∑ –ë–∞–Ω–∫¬ª.
#
#   ‚Ä¢ –í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å:
#       - –ü–æ–∫—É–ø–∫–∞ –ø–∞–Ω–µ–ª–∏: user -> –ë–∞–Ω–∫ (100 EFHC).
#       - –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è kWh->EFHC: –ë–∞–Ω–∫ -> user (1:1).
#       - –ü–µ—Ä–µ–≤–æ–¥—ã –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è user->user –±–µ–∑ –ë–∞–Ω–∫–∞, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã,
#         –Ω–æ –µ—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ ¬´—Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ë–∞–Ω–∫¬ª, –º–æ–∂–Ω–æ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –ë–∞–Ω–∫:
#             debit_user_to_bank(A), credit_user_from_bank(B).
#       - –í—ã–≤–æ–¥ EFHC: –ø—Ä–∏ approve —Å–ø–∏—Å—ã–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –∑–∞—á–∏—Å–ª—è–µ–º –≤ –ë–∞–Ω–∫,
#         –¥–∞–ª–µ–µ TON –≤—ã–ø–ª–∞—Ç–∞ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞, –∞ —Ä–∞—Å—Ö–æ–¥ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤–Ω–µ EFHC —É—á—ë—Ç–∞.
#       - Shop (–ø–æ–∫—É–ø–∫–∞ –∑–∞ TON/USDT): –ë–∞–Ω–∫ -> user (–ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–≥–æ –≤–Ω–µ—à–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞).
# -----------------------------------------------------------------------------
