# üìÇ backend/app/admin_routes.py ‚Äî API –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ EFHC, —Ä–æ–∑—ã–≥—Ä—ã—à–∏, –∑–∞–¥–∞–Ω–∏—è, –º–∞–≥–∞–∑–∏–Ω—ã)

from fastapi import APIRouter, Depends, HTTPException, Query
from fastapi.responses import JSONResponse
from .config import get_settings

# –ó–¥–µ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è cron-–∑–∞–¥–∞—á
from .nft_checker import run_daily_nft_check
from .scheduler import run_daily_energy_accrual

router = APIRouter()
settings = get_settings()

# -----------------------------------------------------------------------------
# –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ (–¥–ª—è cron)
# -----------------------------------------------------------------------------
def verify_secret(secret: str = Query(..., description="Secret key for cron tasks")):
    if secret != os.getenv("ADMIN_CRON_SECRET", "changeme"):
        raise HTTPException(status_code=403, detail="Invalid secret key")
    return True

# -----------------------------------------------------------------------------
# Cron API —Ä—É—á–∫–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞ NFT
# -----------------------------------------------------------------------------
@router.post("/run_nft_check")
async def run_nft_check(secret: bool = Depends(verify_secret)):
    """
    –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ VIP NFT –≤—Ä—É—á–Ω—É—é (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è cron-job.org –∏–ª–∏ GitHub Actions).
    """
    result = await run_daily_nft_check()
    return JSONResponse({"status": "ok", "task": "nft_check", "result": result})

# -----------------------------------------------------------------------------
# Cron API —Ä—É—á–∫–∞: –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏
# -----------------------------------------------------------------------------
@router.post("/run_energy_accrual")
async def run_energy_accrual(secret: bool = Depends(verify_secret)):
    """
    –ó–∞–ø—É—Å–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∫–í—Ç –≤—Ä—É—á–Ω—É—é (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è cron-job.org –∏–ª–∏ GitHub Actions).
    """
    result = await run_daily_energy_accrual()
    return JSONResponse({"status": "ok", "task": "energy_accrual", "result": result})

