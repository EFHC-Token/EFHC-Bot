# üìÇ backend/app/bot.py ‚Äî Telegram-–±–æ—Ç EFHC (–º–µ–Ω—é, –∫–Ω–æ–ø–∫–∏, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API)
# -----------------------------------------------------------------------------
# –≠—Ç–æ—Ç –º–æ–¥—É–ª—å:
# 1) –ü–æ–¥–Ω–∏–º–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä aiogram Bot/Dispatcher/Router.
# 2) –†–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏).
# 3) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª—ã: –ë–∞–ª–∞–Ω—Å, –ü–∞–Ω–µ–ª–∏ (–ø–æ–∫—É–ø–∫–∞ —Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∞–Ω–∏–µ–º),
#    –û–±–º–µ–Ω–Ω–∏–∫ (–∫–í—Ç ‚Üí EFHC), –ó–∞–¥–∞–Ω–∏—è (—Å–ø–∏—Å–æ–∫ + –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ), –†–µ—Ñ–µ—Ä–∞–ª—ã, –†–æ–∑—ã–≥—Ä—ã—à–∏.
# 4) –ü—Ä–æ–≤–µ—Ä—è–µ—Ç NFT-–¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–∫–Ω–æ–ø–∫–∞ –≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ).
# 5) –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ Webhook. Webhook –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç main.py –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ:
#       - URL: BASE_PUBLIC_URL + TELEGRAM_WEBHOOK_PATH
#       - Secret: TELEGRAM_WEBHOOK_SECRET
#
# –í–ê–ñ–ù–û:
# - –í—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –±–µ—Ä—ë–º –∏–∑ config.py (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è).
# - –í—ã–∑–æ–≤—ã –∫ –Ω–∞—à–µ–º—É API (FastAPI) –¥–µ–ª–∞–µ–º —á–µ—Ä–µ–∑ httpx –Ω–∞ URLs –≤–∏–¥–∞ {BACKEND_BASE_URL}/api/*.
# - –í –ø—Ä–æ–¥–µ BACKEND_BASE_URL –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ Render/VPS –¥–æ–º–µ–Ω FastAPI.
# - –ï—Å–ª–∏ FastAPI –∏ –±–æ—Ç –∂–∏–≤—É—Ç –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ (–∫–∞–∫ —É –Ω–∞—Å), –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 127.0.0.1:8000 –¥–ª—è –ª–æ–∫–∞–ª–∫–∏.
# - –í Vercel —Ñ—Ä–æ–Ω—Ç, –∞ –±—ç–∫–µ–Ω–¥ ‚Äî Render/–¥—Ä—É–≥–æ–π VPS. Webhook –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π URL Render.
# -----------------------------------------------------------------------------

from __future__ import annotations

import asyncio
from decimal import Decimal
from typing import Optional

import httpx
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)
from aiogram.filters import CommandStart, Command

from .config import get_settings

# -----------------------------------------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã aiogram
# -----------------------------------------------------------------------------
settings = get_settings()

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä (aiogram v3)
bot = Bot(token=settings.TELEGRAM_BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()
router = Router()
dp.include_router(router)

# -----------------------------------------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥—Ä–µ—Å–æ–≤ API
# -----------------------------------------------------------------------------
# –ë–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å backend API:
# - –í –ø—Ä–æ–¥–µ: –ø—É–±–ª–∏—á–Ω—ã–π HTTPS-–¥–æ–º–µ–Ω Render/VPS, –Ω–∞–ø—Ä–∏–º–µ—Ä https://efhc-api.onrender.com
# - –õ–æ–∫–∞–ª—å–Ω–æ: http://127.0.0.1:8000
# –ò—Å—Ç–æ—á–Ω–∏–∫: settings.BACKEND_BASE_URL, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ–±—É–µ–º settings.BASE_PUBLIC_URL,
# –∏–Ω–∞—á–µ ‚Äî –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å.
BACKEND_BASE_URL = (
    getattr(settings, "BACKEND_BASE_URL", None)
    or getattr(settings, "BASE_PUBLIC_URL", None)
    or "http://127.0.0.1:8000"
)

# –ü—Ä–µ—Ñ–∏–∫—Å API ("/api" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Å–º. config.py)
API_PREFIX = settings.API_V1_STR if hasattr(settings, "API_V1_STR") else "/api"

# –ü–æ–ª–Ω—ã–µ –ø—É—Ç–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ FastAPI):
API_USER_REGISTER        = f"{BACKEND_BASE_URL}{API_PREFIX}/user/register"
API_USER_BALANCE         = f"{BACKEND_BASE_URL}{API_PREFIX}/user/balance"
API_USER_BUY_PANEL       = f"{BACKEND_BASE_URL}{API_PREFIX}/user/panels/buy"
API_USER_EXCHANGE        = f"{BACKEND_BASE_URL}{API_PREFIX}/user/exchange"
API_USER_TASKS           = f"{BACKEND_BASE_URL}{API_PREFIX}/user/tasks"
API_USER_TASK_COMPLETE   = f"{BACKEND_BASE_URL}{API_PREFIX}/user/tasks/complete"  # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
API_USER_REFERRALS       = f"{BACKEND_BASE_URL}{API_PREFIX}/user/referrals"
API_USER_LOTTERIES       = f"{BACKEND_BASE_URL}{API_PREFIX}/user/lotteries"
API_USER_LOTTERY_BUY     = f"{BACKEND_BASE_URL}{API_PREFIX}/user/lottery/buy"

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º. –ø—Ä–∞–≤ (–ø–æ NFT whitelist) ‚Äî —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ admin_routes.py
API_ADMIN_WHOAMI         = f"{BACKEND_BASE_URL}{API_PREFIX}/admin/whoami"

# -----------------------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ HTTP-—Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------------------------------------------------------------
async def _api_get(url: str, x_tid: int, params: Optional[dict] = None):
    """
    GET –∫ –Ω–∞—à–µ–º—É API —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Telegram-Id.
    –≠—Ç–æ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –±—ç–∫–µ–Ω–¥–µ.
    """
    async with httpx.AsyncClient(timeout=20.0) as client:
        r = await client.get(url, headers={"X-Telegram-Id": str(x_tid)}, params=params)
        if r.status_code >= 400:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—à–∏–±–∫—É –≤ –ø–æ–Ω—è—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                detail = r.json().get("detail")
            except Exception:
                detail = r.text
            raise RuntimeError(detail or f"HTTP {r.status_code}")
        return r.json()

async def _api_post(url: str, x_tid: int, payload: Optional[dict] = None):
    """
    POST –∫ –Ω–∞—à–µ–º—É API —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Telegram-Id.
    """
    async with httpx.AsyncClient(timeout=20.0) as client:
        r = await client.post(url, headers={"X-Telegram-Id": str(x_tid)}, json=payload or {})
        if r.status_code >= 400:
            try:
                detail = r.json().get("detail")
            except Exception:
                detail = r.text
            raise RuntimeError(detail or f"HTTP {r.status_code}")
        return r.json()

# -----------------------------------------------------------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -----------------------------------------------------------------------------
def main_menu(is_admin: bool = False) -> ReplyKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω (–ø–æ NFT whitelist), –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    """
    rows = [
        [KeyboardButton(text="‚ö° –≠–Ω–µ—Ä–≥–∏—è"), KeyboardButton(text="üîÅ –û–±–º–µ–Ω–Ω–∏–∫")],
        [KeyboardButton(text="üî© –ü–∞–Ω–µ–ª–∏"), KeyboardButton(text="üéü –†–æ–∑—ã–≥—Ä—ã—à–∏")],
        [KeyboardButton(text="üìã –ó–∞–¥–∞–Ω–∏—è"), KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")],
        [KeyboardButton(text="üíº –ú–∞–≥–∞–∑–∏–Ω")],
    ]
    if is_admin:
        rows.append([KeyboardButton(text="üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])

    return ReplyKeyboardMarkup(
        keyboard=rows,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª‚Ä¶"
    )

def exchange_menu() -> InlineKeyboardMarkup:
    """
    –ü–æ–¥–º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ ¬´–û–±–º–µ–Ω–Ω–∏–∫¬ª.
    """
    kb = [
        [InlineKeyboardButton(text="–û–±–º–µ–Ω—è—Ç—å –∫–í—Ç ‚Üí EFHC (1:1)", callback_data="ex:convert")],
        [InlineKeyboardButton(text="üé≤ –†–æ–∑—ã–≥—Ä—ã—à–∏", callback_data="nav:lotteries")],
        [InlineKeyboardButton(text="üìã –ó–∞–¥–∞–Ω–∏—è", callback_data="nav:tasks")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:home")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

def panels_menu(show_buy: bool = True) -> InlineKeyboardMarkup:
    """
    –ü–æ–¥–º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ ¬´–ü–∞–Ω–µ–ª–∏¬ª.
    """
    rows = [
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –ø–∞–Ω–µ–ª—å (100 EFHC)", callback_data="panels:buy")] if show_buy else [],
        [InlineKeyboardButton(text="–û–±–º–µ–Ω—è—Ç—å –±–æ–Ω—É—Å—ã –Ω–∞ –ø–∞–Ω–µ–ª—å", callback_data="panels:buy_bonus")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:home")],
    ]
    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    rows = [r for r in rows if r]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def lotteries_menu() -> InlineKeyboardMarkup:
    """
    –ü–æ–¥–º–µ–Ω—é ¬´–†–æ–∑—ã–≥—Ä—ã—à–∏¬ª.
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="lottery:list")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:home")]
    ])

def tasks_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="tasks:list")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:home")]
    ])

# -----------------------------------------------------------------------------
# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
# -----------------------------------------------------------------------------
@router.message(CommandStart())
async def cmd_start(message: Message):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (idempotent), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω (–ø–æ NFT whitelist), –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É ¬´üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å¬ª.
    """
    x_tid = message.from_user.id
    username = (message.from_user.username or "").strip()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (idempotent)
    try:
        await _api_post(API_USER_REGISTER, x_tid=x_tid, payload={"username": username})
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–æ NFT white-list)
    is_admin = False
    try:
        who = await _api_get(API_ADMIN_WHOAMI, x_tid=x_tid)
        is_admin = bool(who.get("is_admin", False))
    except Exception:
        # –û—à–∏–±–∫—É –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫—Ä—ã—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω–∫–∏
        pass

    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>EFHC</b>!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–∞–Ω–µ–ª—è–º–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —ç–Ω–µ—Ä–≥–∏–∏\n"
        "‚Ä¢ –û–±–º–µ–Ω–∏–≤–∞—Ç—å –∫–í—Ç ‚Üí EFHC (1:1)\n"
        "‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã –∏ –∑–≤–∞—Ç—å –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ."
    )
    await message.answer(text, reply_markup=main_menu(is_admin=is_admin))

# -----------------------------------------------------------------------------
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
# -----------------------------------------------------------------------------
@router.message(F.text == "‚ö° –≠–Ω–µ—Ä–≥–∏—è")
async def on_energy(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å (EFHC, –±–æ–Ω—É—Å–Ω—ã–µ EFHC, –∫–í—Ç).
    """
    x_tid = message.from_user.id
    # –ë–∞–ª–∞–Ω—Å –∏–∑ API
    try:
        b = await _api_get(API_USER_BALANCE, x_tid)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    text = (
        f"‚ö° <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>\n"
        f"EFHC: <b>{b['efhc']}</b>\n"
        f"–ë–æ–Ω—É—Å–Ω—ã–µ EFHC: <b>{b['bonus']}</b>\n"
        f"–ö–∏–ª–æ–≤–∞—Ç—Ç-—á–∞—Å—ã: <b>{b['kwh']}</b>\n\n"
        "‚ö†Ô∏è –ö—É—Ä—Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: 1 –∫–í—Ç = 1 EFHC."
    )
    await message.answer(text)

@router.message(F.text == "üîÅ –û–±–º–µ–Ω–Ω–∏–∫")
async def on_exchange(message: Message):
    """
    –†–∞–∑–¥–µ–ª ¬´–û–±–º–µ–Ω–Ω–∏–∫¬ª: –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –æ–±–º–µ–Ω—É –∫–í—Ç ‚Üí EFHC.
    """
    x_tid = message.from_user.id
    try:
        b = await _api_get(API_USER_BALANCE, x_tid)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    text = (
        "üîÅ <b>–û–±–º–µ–Ω–Ω–∏–∫</b>\n"
        f"–ö–í—Ç –¥–æ—Å—Ç—É–ø–Ω–æ: <b>{b['kwh']}</b>\n"
        f"EFHC: <b>{b['efhc']}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await message.answer(text, reply_markup=exchange_menu())

@router.message(F.text == "üî© –ü–∞–Ω–µ–ª–∏")
async def on_panels(message: Message):
    """
    –†–∞–∑–¥–µ–ª ¬´–ü–∞–Ω–µ–ª–∏¬ª: –ø–æ–∫—É–ø–∫–∞ –ø–∞–Ω–µ–ª–∏ —Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∞–Ω–∏–µ–º –±–æ–Ω—É—Å–Ω—ã—Ö –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö EFHC.
    """
    x_tid = message.from_user.id
    try:
        b = await _api_get(API_USER_BALANCE, x_tid)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    text = (
        "üî© <b>–ü–∞–Ω–µ–ª–∏</b>\n"
        f"–û—Å–Ω–æ–≤–Ω–æ–π EFHC: <b>{b['efhc']}</b>\n"
        f"–ë–æ–Ω—É—Å–Ω—ã–µ EFHC: <b>{b['bonus']}</b>\n\n"
        "–¶–µ–Ω–∞ –ø–∞–Ω–µ–ª–∏ = <b>100 EFHC</b>.\n"
        "–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Å–Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è <b>–±–æ–Ω—É—Å–Ω—ã–µ</b> EFHC, –∑–∞—Ç–µ–º ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å."
    )
    await message.answer(text, reply_markup=panels_menu(show_buy=True))

@router.message(F.text == "üéü –†–æ–∑—ã–≥—Ä—ã—à–∏")
async def on_lotteries(message: Message):
    """
    –†–∞–∑–¥–µ–ª ¬´–†–æ–∑—ã–≥—Ä—ã—à–∏¬ª: —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤.
    """
    await _send_lotteries_list(message.chat.id, message.from_user.id)

@router.message(F.text == "üìã –ó–∞–¥–∞–Ω–∏—è")
async def on_tasks(message: Message):
    """
    –†–∞–∑–¥–µ–ª ¬´–ó–∞–¥–∞–Ω–∏—è¬ª: —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π, —Å—Ç–∞—Ç—É—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Å—Å—ã–ª–∫–∏.
    """
    await _send_tasks_list(message.chat.id, message.from_user.id)

@router.message(F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")
async def on_referrals(message: Message):
    """
    –†–∞–∑–¥–µ–ª ¬´–†–µ—Ñ–µ—Ä–∞–ª—ã¬ª: —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.
    """
    x_tid = message.from_user.id
    try:
        refs = await _api_get(API_USER_REFERRALS, x_tid)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    if not refs:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.")
        return

    active = sum(1 for r in refs if r.get("active"))
    text = (
        f"üë• <b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</b>\n"
        f"–í—Å–µ–≥–æ: <b>{len(refs)}</b>\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{active}</b>\n\n"
        "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤—ã–¥–∞—ë—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ WebApp (–∫–Ω–æ–ø–∫–∞ ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª)."
    )
    await message.answer(text)

@router.message(F.text == "üíº –ú–∞–≥–∞–∑–∏–Ω")
async def on_shop(message: Message):
    """
    –†–∞–∑–¥–µ–ª ¬´–ú–∞–≥–∞–∑–∏–Ω¬ª: –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–æ WebApp (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥).
    """
    wa = getattr(settings, "TELEGRAM_WEBAPP_URL", None)
    if wa:
        await message.answer(
            f"üíº –ú–∞–≥–∞–∑–∏–Ω –æ—Ç–∫—Ä—ã—Ç –≤ WebApp:\n{wa}\n\n"
            "–û–ø–ª–∞—á–∏–≤–∞–π—Ç–µ TON/USDT/EFHC. –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ EFHC –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –ø–µ—Ä–µ–≤–æ–¥–æ–º –æ—Ç –∞–¥–º–∏–Ω–∞."
        )
    else:
        await message.answer(
            "üíº –ú–∞–≥–∞–∑–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –≤ WebApp. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_WEBAPP_URL –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏, "
            "—á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
        )

@router.message(F.text == "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def on_admin(message: Message):
    """
    –ö–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: –¥–æ—Å—Ç—É–ø –ø–æ NFT whitelist (admin_routes /admin/whoami).
    """
    x_tid = message.from_user.id
    try:
        who = await _api_get(API_ADMIN_WHOAMI, x_tid)
        if not who.get("is_admin"):
            await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–¥–º–∏–Ω NFT –∏–∑ whitelist.")
            return
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
        return

    # –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è WebApp-–∞–¥–º–∏–Ω–∫–∞ —Ñ—Ä–æ–Ω—Ç–∞ (–æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ WebApp, –Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç /admin)
    wa = getattr(settings, "TELEGRAM_WEBAPP_URL", None)
    if wa:
        await message.answer(f"üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n{wa}/admin")
    else:
        await message.answer("üõ† –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_WEBAPP_URL, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (WebApp).")

# -----------------------------------------------------------------------------
# CallbackQuery: –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è
# -----------------------------------------------------------------------------
@router.callback_query(F.data == "nav:home")
async def cb_nav_home(cq: CallbackQuery):
    """
    –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∏).
    """
    # –û–±–Ω–æ–≤–∏–º —Ñ–ª–∞–≥ is_admin, —á—Ç–æ–±—ã –≥–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—ã–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞
    is_admin = False
    try:
        who = await _api_get(API_ADMIN_WHOAMI, x_tid=cq.from_user.id)
        is_admin = bool(who.get("is_admin"))
    except Exception:
        pass
    await cq.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ.")
    await cq.message.answer("‚¨áÔ∏è", reply_markup=main_menu(is_admin=is_admin))
    await cq.answer()

@router.callback_query(F.data == "nav:lotteries")
async def cb_nav_lotteries(cq: CallbackQuery):
    """
    –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ ¬´–†–æ–∑—ã–≥—Ä—ã—à–∏¬ª.
    """
    await _send_lotteries_list(cq.message.chat.id, cq.from_user.id, edit=True, cq=cq)

@router.callback_query(F.data == "nav:tasks")
async def cb_nav_tasks(cq: CallbackQuery):
    """
    –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ ¬´–ó–∞–¥–∞–Ω–∏—è¬ª.
    """
    await _send_tasks_list(cq.message.chat.id, cq.from_user.id, edit=True, cq=cq)

# --- –û–ë–ú–ï–ù–ù–ò–ö ---
@router.callback_query(F.data == "ex:convert")
async def cb_exchange_convert(cq: CallbackQuery):
    """
    –ü—Ä–æ—Å—Ç–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –æ–±–º–µ–Ω—è—Ç—å –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π kWh –≤ EFHC (1:1).
    –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ —Å—É–º–º—ã (FSM).
    """
    x_tid = cq.from_user.id
    # —É–∑–Ω–∞–µ–º –±–∞–ª–∞–Ω—Å
    try:
        b = await _api_get(API_USER_BALANCE, x_tid)
        kwh = Decimal(b["kwh"])
        if kwh <= Decimal("0.000"):
            await cq.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–í—Ç –¥–ª—è –æ–±–º–µ–Ω–∞.", show_alert=True)
            return
        # –º–µ–Ω—è–µ–º –≤—Å—ë
        await _api_post(API_USER_EXCHANGE, x_tid, {"amount_kwh": str(kwh)})
    except Exception as e:
        await cq.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
        return

    await cq.message.edit_text("‚úÖ –û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω. –ö–í—Ç ‚Üí EFHC (1:1).")
    await cq.message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –û–±–º–µ–Ω–Ω–∏–∫:", reply_markup=exchange_menu())
    await cq.answer()

# --- –ü–ê–ù–ï–õ–ò ---
@router.callback_query(F.data == "panels:buy")
async def cb_panels_buy(cq: CallbackQuery):
    """
    –ü–æ–∫—É–ø–∫–∞ –ø–∞–Ω–µ–ª–∏ —Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∞–Ω–∏–µ–º:
    - —Å–Ω–∞—á–∞–ª–∞ –±–æ–Ω—É—Å–Ω—ã–µ EFHC,
    - –∑–∞—Ç–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å.
    –í –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Å–ø–∏—à–µ—Ç—Å—è –æ—Ç–∫—É–¥–∞.
    """
    x_tid = cq.from_user.id
    # –ü–æ–ª—É—á–∏–º –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–∫–∞–∑–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Å–ø–∏—à–µ—Ç—Å—è
    try:
        b = await _api_get(API_USER_BALANCE, x_tid)
        bonus = Decimal(b["bonus"])
        efhc = Decimal(b["efhc"])
        price = Decimal("100.000")
        if bonus + efhc < price:
            await cq.answer(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ 100 EFHC. –£ –≤–∞—Å {bonus + efhc:.3f} (–±–æ–Ω—É—Å {bonus:.3f} + –æ—Å–Ω–æ–≤–Ω–æ–π {efhc:.3f}).",
                show_alert=True
            )
            return
    except Exception as e:
        await cq.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (inline-–∫–Ω–æ–ø–∫–∞–º–∏)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data="panels:confirm_buy")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="nav:home")]
    ])
    text = (
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –ø–∞–Ω–µ–ª–∏ –∑–∞ <b>100 EFHC</b>.\n"
        f"–ë—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ: <b>{min(bonus, price):.3f}</b> –±–æ–Ω—É—Å–Ω—ã—Ö + <b>{max(Decimal('0.000'), price - bonus):.3f}</b> –æ—Å–Ω–æ–≤–Ω—ã—Ö."
    )
    await cq.message.edit_text(text, reply_markup=kb)
    await cq.answer()

@router.callback_query(F.data == "panels:confirm_buy")
async def cb_panels_confirm_buy(cq: CallbackQuery):
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –ø–∞–Ω–µ–ª–∏ (API –≤—ã–∑–æ–≤).
    """
    x_tid = cq.from_user.id
    try:
        res = await _api_post(API_USER_BUY_PANEL, x_tid)
        bonus_used = res.get("bonus_used", "0.000")
        main_used = res.get("main_used", "0.000")
        await cq.message.edit_text(
            f"‚úÖ –ü–∞–Ω–µ–ª—å –∫—É–ø–ª–µ–Ω–∞.\n–°–ø–∏—Å–∞–Ω–æ: <b>{bonus_used}</b> –±–æ–Ω—É—Å–Ω—ã—Ö EFHC –∏ <b>{main_used}</b> –æ—Å–Ω–æ–≤–Ω—ã—Ö EFHC."
        )
        await cq.message.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –ø–∞–Ω–µ–ª—è–º:", reply_markup=panels_menu())
    except Exception as e:
        await cq.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
    finally:
        await cq.answer()

@router.callback_query(F.data == "panels:buy_bonus")
async def cb_panels_buy_by_bonus(cq: CallbackQuery):
    """
    –ö–Ω–æ–ø–∫–∞ ¬´–û–±–º–µ–Ω—è—Ç—å –±–æ–Ω—É—Å—ã –Ω–∞ –ø–∞–Ω–µ–ª—å¬ª ‚Äî —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ç–∞ –∂–µ –ø–æ–∫—É–ø–∫–∞ (100 EFHC),
    –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ–º, —á—Ç–æ —Å–Ω–∞—á–∞–ª–∞ —É–π–¥—É—Ç –±–æ–Ω—É—Å—ã. –ï—Å–ª–∏ –±–æ–Ω—É—Å–æ–≤ < 100, –¥–æ–±–µ—Ä—ë–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ.
    """
    await cb_panels_buy(cq)

# --- –†–û–ó–´–ì–†–´–®–ò ---
@router.callback_query(F.data == "lottery:list")
async def cb_lottery_list(cq: CallbackQuery):
    await _send_lotteries_list(cq.message.chat.id, cq.from_user.id, edit=True, cq=cq)

async def _send_lotteries_list(chat_id: int, x_tid: int, edit: bool = False, cq: Optional[CallbackQuery] = None):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∏—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π.
    –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π ¬´–ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä¬ª –Ω–∞ —Å–∏–º–≤–æ–ª–∞—Ö.
    """
    try:
        lots = await _api_get(API_USER_LOTTERIES, x_tid)
    except Exception as e:
        if edit and cq:
            await cq.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=lotteries_menu())
            await cq.answer()
        else:
            await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    if not lots:
        text = "üéü –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π —Å–µ–π—á–∞—Å –Ω–µ—Ç."
    else:
        lines = ["üéü <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏</b>"]
        for l in lots:
            target = l.get("target", 0)
            sold = l.get("tickets_sold", 0)
            # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π ¬´–ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä¬ª —Å–∏–º–≤–æ–ª–∞–º–∏
            bar_len = 20
            filled = max(0, min(bar_len, int((sold / max(1, target)) * bar_len)))
            bar = "‚ñ†" * filled + "‚ñ°" * (bar_len - filled)
            lines.append(f"‚Ä¢ {l['title']} ‚Äî {sold}/{target}\n[{bar}]")
        lines.append("\n–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã: –ø–æ 1 EFHC, –º–∞–∫—Å–∏–º—É–º 10 —à—Ç –∑–∞ —Ä–∞–∑.")
        text = "\n".join(lines)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å 1 –±–∏–ª–µ—Ç", callback_data="lottery:buy:1"),
         InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å 5 –±–∏–ª–µ—Ç–æ–≤", callback_data="lottery:buy:5"),
         InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å 10 –±–∏–ª–µ—Ç–æ–≤", callback_data="lottery:buy:10")],
        [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="lottery:list")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:home")]
    ])

    if edit and cq:
        await cq.message.edit_text(text, reply_markup=kb)
        await cq.answer()
    else:
        await bot.send_message(chat_id, text, reply_markup=kb)

@router.callback_query(F.data.startswith("lottery:buy:"))
async def cb_lottery_buy(cq: CallbackQuery):
    """
    –ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤: –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –ª–æ—Ç–µ—Ä–µ—é –∏ –ø–æ–∫—É–ø–∞–µ–º N –±–∏–ª–µ—Ç–æ–≤.
    (–î–ª—è UI –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏.)
    """
    x_tid = cq.from_user.id
    count = int(cq.data.split(":")[-1])

    try:
        lots = await _api_get(API_USER_LOTTERIES, x_tid)
        if not lots:
            await cq.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π.", show_alert=True)
            return
        lottery_id = lots[0]["id"]
        await _api_post(API_USER_LOTTERY_BUY, x_tid, {"lottery_id": lottery_id, "count": count})
        await cq.answer("‚úÖ –ë–∏–ª–µ—Ç—ã –∫—É–ø–ª–µ–Ω—ã!", show_alert=True)
        await _send_lotteries_list(cq.message.chat.id, x_tid, edit=True, cq=cq)
    except Exception as e:
        await cq.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)

# --- –ó–ê–î–ê–ù–ò–Ø ---
@router.callback_query(F.data == "tasks:list")
async def cb_tasks_list(cq: CallbackQuery):
    await _send_tasks_list(cq.message.chat.id, cq.from_user.id, edit=True, cq=cq)

async def _send_tasks_list(chat_id: int, x_tid: int, edit: bool = False, cq: Optional[CallbackQuery] = None):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∏—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π.
    """
    try:
        tasks = await _api_get(API_USER_TASKS, x_tid)
        b = await _api_get(API_USER_BALANCE, x_tid)
    except Exception as e:
        if edit and cq:
            await cq.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=tasks_menu())
            await cq.answer()
        else:
            await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    lines = [
        "üìã <b>–ó–∞–¥–∞–Ω–∏—è</b>",
        f"–í–∞—à–∏ –±–æ–Ω—É—Å–Ω—ã–µ EFHC: <b>{b['bonus']}</b>\n"
        "–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –æ–±–º–µ–Ω–∏–≤–∞–π—Ç–µ 100 –±–æ–Ω—É—Å–Ω—ã—Ö EFHC –Ω–∞ –ø–∞–Ω–µ–ª—å."
    ]
    if not tasks:
        lines.append("–ü–æ–∫–∞ –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç.")
    else:
        for t in tasks:
            status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if t["completed"] else "üü° –î–æ—Å—Ç—É–ø–Ω–æ"
            url = t.get("url") or "‚Äî"
            lines.append(f"‚Ä¢ {t['title']} (+{t['reward']} –±–æ–Ω—É—Å–Ω—ã—Ö). {status}\n{url}")

    text = "\n".join(lines)
    kb_rows = []
    # –ö–Ω–æ–ø–∫–∏ ¬´–í—ã–ø–æ–ª–Ω–∏—Ç—å¬ª —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Ñ—Ä–æ–Ω—Ç–∞; –∑–¥–µ—Å—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞.
    kb_rows.append([InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="tasks:list")])
    kb_rows.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:home")])
    kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)

    if edit and cq:
        await cq.message.edit_text(text, reply_markup=kb)
        await cq.answer()
    else:
        await bot.send_message(chat_id, text, reply_markup=kb)

# -----------------------------------------------------------------------------
# –ö–æ–º–∞–Ω–¥—ã /help –∏ /balance (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)
# -----------------------------------------------------------------------------
@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/balance ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )

@router.message(Command("balance"))
async def cmd_balance(message: Message):
    x_tid = message.from_user.id
    try:
        b = await _api_get(API_USER_BALANCE, x_tid)
        await message.answer(
            f"EFHC: <b>{b['efhc']}</b>\n"
            f"–ë–æ–Ω—É—Å–Ω—ã–µ EFHC: <b>{b['bonus']}</b>\n"
            f"–ö–í—Ç: <b>{b['kwh']}</b>"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# -----------------------------------------------------------------------------
# –§—É–Ω–∫—Ü–∏–∏-—Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è webhook/polling (–Ω–∞ —Å–ª—É—á–∞–π –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏)
# -----------------------------------------------------------------------------
async def setup_webhook():
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook —É –±–æ—Ç–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –±–æ—Ç–∞
    –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç FastAPI. –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è webhook —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç main.py –Ω–∞ —Å—Ç–∞—Ä—Ç–µ.
    –ó–¥–µ—Å—å –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏.
    """
    base = getattr(settings, "BASE_PUBLIC_URL", None)
    explicit_path = getattr(settings, "TELEGRAM_WEBHOOK_PATH", "/tg/webhook")
    secret = getattr(settings, "TELEGRAM_WEBHOOK_SECRET", None)

    if not base:
        print("[EFHC][BOT] BASE_PUBLIC_URL –Ω–µ –∑–∞–¥–∞–Ω. Webhook –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ polling).")
        return

    webhook_url = f"{base.rstrip('/')}{explicit_path}"
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π webhook
    await bot.delete_webhook(drop_pending_updates=True)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π
    ok = await bot.set_webhook(url=webhook_url, secret_token=secret, drop_pending_updates=True)
    print(f"[EFHC][BOT] Set webhook to: {webhook_url} (ok={ok})")

async def start_bot():
    """
    –ó–∞–ø—É—Å–∫ polling-—Ä–µ–∂–∏–º–∞ (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞). –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook.
    –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å polling, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω–æ:
        python -m backend.app.bot
    """
    print("[EFHC][BOT] Starting polling... (for local development)")
    # –£–¥–æ—Å—Ç–æ–≤–µ—Ä–∏–º—Å—è, —á—Ç–æ webhook —Å–Ω—è—Ç
    await bot.delete_webhook(drop_pending_updates=True)
    # –°—Ç–∞—Ä—Ç—É–µ–º polling
    await dp.start_polling(bot)

def get_dispatcher() -> Dispatcher:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Dispatcher, —á—Ç–æ–±—ã main.py –º–æ–≥ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –≤ FastAPI webhook handler.
    –í —Ç–µ–∫—É—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ main.py —Å–æ–∑–¥–∞—ë—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π Dispatcher, –Ω–æ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
    –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —Å—Ö–µ–º–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.
    """
    return dp

# -----------------------------------------------------------------------------
# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é:
#   python -m backend.app.bot
# –í–ù–ò–ú–ê–ù–ò–ï: –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ main.py (webhook).
# -----------------------------------------------------------------------------
if __name__ == "__main__":
    # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º ‚Äî polling
    asyncio.run(start_bot())
