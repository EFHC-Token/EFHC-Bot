# üìÇ backend/app/bot.py ‚Äî Telegram-–±–æ—Ç EFHC (–º–µ–Ω—é, –∫–Ω–æ–ø–∫–∏, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API)
# -----------------------------------------------------------------------------
# –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
# 1) –ü–æ–¥–Ω–∏–º–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä aiogram Bot/Dispatcher.
# 2) –†–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
# 3) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª—ã: –ë–∞–ª–∞–Ω—Å, –ü–∞–Ω–µ–ª–∏ (–ø–æ–∫—É–ø–∫–∞ —Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∞–Ω–∏–µ–º),
#    –û–±–º–µ–Ω–Ω–∏–∫ (–∫–í—Ç ‚Üí EFHC), –ó–∞–¥–∞–Ω–∏—è (—Å–ø–∏—Å–æ–∫ + –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ), –†–µ—Ñ–µ—Ä–∞–ª—ã, –†–æ–∑—ã–≥—Ä—ã—à–∏.
# 4) –ü—Ä–æ–≤–µ—Ä—è–µ—Ç NFT-–¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–∫–Ω–æ–ø–∫–∞ –≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ).
# 5) –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ Webhook ‚Äî url –∑–∞–¥–∞—ë—Ç—Å—è –≤ .env (BASE_PUBLIC_URL + TELEGRAM_WEBHOOK_PATH).
#
# –í–ê–ñ–ù–û:
# - –í—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –±–µ—Ä—ë–º –∏–∑ config.py (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è).
# - –í—ã–∑–æ–≤—ã –∫ –Ω–∞—à–µ–º—É API (FastAPI) –¥–µ–ª–∞–µ–º —á–µ—Ä–µ–∑ httpx –Ω–∞ URLs –≤–∏–¥–∞ {BACKEND_BASE_URL}/api/*.
# - –í –ø—Ä–æ–¥–µ BACKEND_BASE_URL –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ Render/–¥–æ–º–µ–Ω FastAPI.
# - –í Vercel —Ñ—Ä–æ–Ω—Ç (React), –∞ –±—ç–∫–µ–Ω–¥ ‚Äî Render/–¥—Ä—É–≥–æ–π VPS. Webhook –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π URL Render.
# - –ü–æ–¥—Å–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: VIP/NFT +7% ‚Äî —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ API/–∏–Ω—Ç–µ—Ä–Ω–∞–ª-—Å–µ—Ä–≤–∏—Å–æ–≤ (scheduler/ton_integration).
# -----------------------------------------------------------------------------

import asyncio
from decimal import Decimal
from typing import Optional

from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, BotCommand, Update
)
from aiogram.filters import CommandStart, Command
import httpx

from .config import get_settings

# -----------------------------------------------------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
# -----------------------------------------------------------------------------
settings = get_settings()

# -----------------------------------------------------------------------------
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã aiogram (–±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä)
# -----------------------------------------------------------------------------
# Bot ‚Äî —Å—É—â–Ω–æ—Å—Ç—å Telegram-–±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º.
# parse_mode="HTML" ‚Äî –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å <b></b>, <i></i>.
bot = Bot(token=settings.TELEGRAM_BOT_TOKEN, parse_mode="HTML")

# Dispatcher ‚Äî –µ–¥–∏–Ω–∞—è —à–∏–Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∞–ø–¥–µ–π—Ç–æ–≤/–∫–æ–º–∞–Ω–¥/–∫–Ω–æ–ø–æ–∫ –∫ —Ö—ç–Ω–¥–ª–µ—Ä–∞–º.
dp = Dispatcher()

# Router ‚Äî –º–æ–¥—É–ª—å–Ω–∞—è —á–∞—Å—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∞—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤)
router = Router()
dp.include_router(router)

# -----------------------------------------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ backend API
# -----------------------------------------------------------------------------
# –ë–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å –±—ç–∫–µ–Ω–¥–∞:
#  - –ù–∞ –ø—Ä–æ–¥–µ: HTTPS-–¥–æ–º–µ–Ω Render/—Å–µ—Ä–≤–µ—Ä –±—ç–∫–µ–Ω–¥–∞ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ .env BACKEND_BASE_URL).
#  - –õ–æ–∫–∞–ª—å–Ω–æ: http://127.0.0.1:8000
BACKEND_BASE_URL = getattr(settings, "BACKEND_BASE_URL", "http://127.0.0.1:8000")

# –ü—Ä–µ—Ñ–∏–∫—Å API (–æ–±—ã—á–Ω–æ "/api"), —Ç–∞–∫–∂–µ –∑–∞–¥–∞—ë—Ç—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
API_PREFIX = settings.API_V1_STR if hasattr(settings, "API_V1_STR") else "/api"

# –ü–æ–ª–Ω—ã–µ –ø—É—Ç–∏ –∫ –≠–ù–î–ü–û–ò–ù–¢–ê–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
API_USER_REGISTER        = f"{BACKEND_BASE_URL}{API_PREFIX}/user/register"
API_USER_BALANCE         = f"{BACKEND_BASE_URL}{API_PREFIX}/user/balance"
API_USER_BUY_PANEL       = f"{BACKEND_BASE_URL}{API_PREFIX}/user/panels/buy"
API_USER_EXCHANGE        = f"{BACKEND_BASE_URL}{API_PREFIX}/user/exchange"
API_USER_TASKS           = f"{BACKEND_BASE_URL}{API_PREFIX}/user/tasks"
API_USER_TASK_COMPLETE   = f"{BACKEND_BASE_URL}{API_PREFIX}/user/tasks/complete"
API_USER_REFERRALS       = f"{BACKEND_BASE_URL}{API_PREFIX}/user/referrals"
API_USER_LOTTERIES       = f"{BACKEND_BASE_URL}{API_PREFIX}/user/lotteries"
API_USER_LOTTERY_BUY     = f"{BACKEND_BASE_URL}{API_PREFIX}/user/lottery/buy"
API_USER_WITHDRAW        = f"{BACKEND_BASE_URL}{API_PREFIX}/user/withdraw"  # (–ø–ª–∞–Ω) –≤—ã–≤–æ–¥ EFHC ‚Äî –º–µ—Ö–∞–Ω–∏–∑–º —Å–æ–≥–ª–∞—Å—É–µ—Ç—Å—è

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º. –ø—Ä–∞–≤ (–ø–æ whitelist NFT) ‚Äî —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ admin_routes.py
API_ADMIN_WHOAMI         = f"{BACKEND_BASE_URL}{API_PREFIX}/admin/whoami"

# -----------------------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ HTTP —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî GET/POST —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º X-Telegram-Id
# -----------------------------------------------------------------------------
async def _api_get(url: str, x_tid: int, params: Optional[dict] = None) -> dict:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –∫ –Ω–∞—à–µ–º—É backend API —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º X-Telegram-Id.

    :param url: –ü–æ–ª–Ω—ã–π URL backend API.
    :param x_tid: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –±—ç–∫–µ–Ω–¥–µ).
    :param params: –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
    :raises RuntimeError: –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è HTTP >= 400 ‚Äî —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    :return: JSON-–æ—Ç–≤–µ—Ç –æ—Ç API (—Å–ª–æ–≤–∞—Ä—å).
    """
    async with httpx.AsyncClient(timeout=20.0) as client:
        r = await client.get(url, headers={"X-Telegram-Id": str(x_tid)}, params=params)
        if r.status_code >= 400:
            try:
                detail = r.json().get("detail")
            except Exception:
                detail = r.text
            raise RuntimeError(detail or f"HTTP {r.status_code}")
        return r.json()

async def _api_post(url: str, x_tid: int, payload: Optional[dict] = None) -> dict:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –∫ –Ω–∞—à–µ–º—É backend API —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º X-Telegram-Id.

    :param url: –ü–æ–ª–Ω—ã–π URL backend API.
    :param x_tid: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param payload: JSON-–¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ (dict).
    :raises RuntimeError: –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ >= 400.
    :return: JSON-–æ—Ç–≤–µ—Ç API (—Å–ª–æ–≤–∞—Ä—å).
    """
    async with httpx.AsyncClient(timeout=20.0) as client:
        r = await client.post(url, headers={"X-Telegram-Id": str(x_tid)}, json=payload or {})
        if r.status_code >= 400:
            try:
                detail = r.json().get("detail")
            except Exception:
                detail = r.text
            raise RuntimeError(detail or f"HTTP {r.status_code}")
        return r.json()

# -----------------------------------------------------------------------------
# –•–µ–ª–ø–µ—Ä—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
# -----------------------------------------------------------------------------
def main_menu(is_admin: bool = False) -> ReplyKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (ReplyKeyboardMarkup).
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω (–ø–æ NFT), –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (WebApp).
    –í –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ: –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∫–µ –ª–∏–±–æ –ø–æ NFT –∏–∑ whitelist (—á–µ—Ä–µ–∑ /api/admin/whoami),
    –ª–∏–±–æ –ø–æ TELEGRAM_ID (—Å—É–ø–µ—Ä–∞–¥–º–∏–Ω).
    """
    rows = [
        [KeyboardButton(text="‚ö° –≠–Ω–µ—Ä–≥–∏—è"), KeyboardButton(text="üîÅ –û–±–º–µ–Ω–Ω–∏–∫")],
        [KeyboardButton(text="üî© –ü–∞–Ω–µ–ª–∏"), KeyboardButton(text="üéü –†–æ–∑—ã–≥—Ä—ã—à–∏")],
        [KeyboardButton(text="üìã –ó–∞–¥–∞–Ω–∏—è"), KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")],
        [KeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥"), KeyboardButton(text="üíº –ú–∞–≥–∞–∑–∏–Ω")],
    ]
    if is_admin:
        rows.append([KeyboardButton(text="üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])

    return ReplyKeyboardMarkup(
        keyboard=rows,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª‚Ä¶"
    )

def exchange_menu() -> InlineKeyboardMarkup:
    """
    –ü–æ–¥–º–µ–Ω—é ¬´–û–±–º–µ–Ω–Ω–∏–∫¬ª.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±–º–µ–Ω—è—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π kWh ‚Üí EFHC (–ø–æ –∫—É—Ä—Å—É 1:1).
    –¢–∞–∫–∂–µ –¥–∞—ë–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –Ω–∞ –†–æ–∑—ã–≥—Ä—ã—à–∏, –ó–∞–¥–∞–Ω–∏—è –∏ –ù–∞–∑–∞–¥.
    """
    kb = [
        [InlineKeyboardButton(text="–û–±–º–µ–Ω—è—Ç—å –∫–í—Ç ‚Üí EFHC (1:1)", callback_data="ex:convert")],
        [InlineKeyboardButton(text="üé≤ –†–æ–∑—ã–≥—Ä—ã—à–∏", callback_data="nav:lotteries")],
        [InlineKeyboardButton(text="üìã –ó–∞–¥–∞–Ω–∏—è", callback_data="nav:tasks")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:home")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

def panels_menu(show_buy: bool = True) -> InlineKeyboardMarkup:
    """
    –ü–æ–¥–º–µ–Ω—é ¬´–ü–∞–Ω–µ–ª–∏¬ª. –ü–æ–∫—É–ø–∫–∞ –∑–∞ 100 EFHC.
    –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: —Å–Ω–∞—á–∞–ª–∞ –±–æ–Ω—É—Å–Ω—ã–µ EFHC, –ø–æ—Ç–æ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å.
    """
    rows = [
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –ø–∞–Ω–µ–ª—å (100 EFHC)", callback_data="panels:buy")] if show_buy else [],
        [InlineKeyboardButton(text="–û–±–º–µ–Ω—è—Ç—å –±–æ–Ω—É—Å—ã –Ω–∞ –ø–∞–Ω–µ–ª—å", callback_data="panels:buy_bonus")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:home")],
    ]
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
    rows = [r for r in rows if r]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def lotteries_menu() -> InlineKeyboardMarkup:
    """
    –ü–æ–¥–º–µ–Ω—é ¬´–†–æ–∑—ã–≥—Ä—ã—à–∏¬ª.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É ¬´–û–±–Ω–æ–≤–∏—Ç—å¬ª –∏ –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é).
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="lottery:list")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:home")]
    ])

def tasks_menu() -> InlineKeyboardMarkup:
    """
    –ü–æ–¥–º–µ–Ω—é ¬´–ó–∞–¥–∞–Ω–∏—è¬ª.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç ¬´–û–±–Ω–æ–≤–∏—Ç—å¬ª –∏ ¬´–ù–∞–∑–∞–¥¬ª.
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="tasks:list")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:home")]
    ])

# -----------------------------------------------------------------------------
# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –≤ –∞–¥–º–∏–Ω–∫—É
# -----------------------------------------------------------------------------
@router.message(CommandStart())
async def cmd_start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start:
    - –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π –≤—ã–∑–æ–≤ /user/register).
    - –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω –ª–∏ (–ø–æ NFT whitelist –∏–ª–∏ SUPER-ADMIN –ø–æ TELEGRAM ID).
    - –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–≤–∫–ª—é—á–∞—è ¬´üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å¬ª, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å).
    """
    x_tid = message.from_user.id
    username = (message.from_user.username or "").strip()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
    try:
        await _api_post(API_USER_REGISTER, x_tid=x_tid, payload={"username": username})
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–æ NFT whitelist/SUPER-ADMIN)
    is_admin = False
    try:
        who = await _api_get(API_ADMIN_WHOAMI, x_tid=x_tid)
        is_admin = bool(who.get("is_admin", False))
    except Exception:
        # –ú–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º ‚Äî –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏—Ç—Å—è, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—ã—á–Ω—ã–π
        pass

    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>EFHC</b>!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–∞–Ω–µ–ª—è–º–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —ç–Ω–µ—Ä–≥–∏–∏\n"
        "‚Ä¢ –û–±–º–µ–Ω–∏–≤–∞—Ç—å –∫–í—Ç ‚Üí EFHC (1:1)\n"
        "‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã –∏ –∑–≤–∞—Ç—å –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ."
    )
    await message.answer(text, reply_markup=main_menu(is_admin=is_admin))

# -----------------------------------------------------------------------------
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
# -----------------------------------------------------------------------------
@router.message(F.text == "‚ö° –≠–Ω–µ—Ä–≥–∏—è")
async def on_energy(message: Message):
    """
    –†–∞–∑–¥–µ–ª ¬´–≠–Ω–µ—Ä–≥–∏—è¬ª ‚Äî –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:
      - –û—Å–Ω–æ–≤–Ω–æ–π EFHC,
      - –ë–æ–Ω—É—Å–Ω—ã–µ EFHC,
      - –ö–∏–ª–æ–≤–∞—Ç—Ç-—á–∞—Å—ã (kWh).
    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑ /user/balance.
    """
    x_tid = message.from_user.id
    # –ë–∞–ª–∞–Ω—Å –∏–∑ API
    try:
        b = await _api_get(API_USER_BALANCE, x_tid)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    text = (
        f"‚ö° <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>\n"
        f"EFHC: <b>{b['efhc']}</b>\n"
        f"–ë–æ–Ω—É—Å–Ω—ã–µ EFHC: <b>{b['bonus']}</b>\n"
        f"–ö–∏–ª–æ–≤–∞—Ç—Ç-—á–∞—Å—ã: <b>{b['kwh']}</b>\n\n"
        "‚ÑπÔ∏è –ö—É—Ä—Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: 1 –∫–í—Ç = 1 EFHC.\n"
        "üîπ VIP –¥–∞—ë—Ç +7% –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ NFT VIP –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ VIP)."
    )
    await message.answer(text)

@router.message(F.text == "üîÅ –û–±–º–µ–Ω–Ω–∏–∫")
async def on_exchange(message: Message):
    """
    –†–∞–∑–¥–µ–ª ¬´–û–±–º–µ–Ω–Ω–∏–∫¬ª ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±–º–µ–Ω—è—Ç—å kWh ‚Üí EFHC (1:1).
    –í—ã–∑—ã–≤–∞–µ–º /user/balance –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    """
    x_tid = message.from_user.id
    try:
        b = await _api_get(API_USER_BALANCE, x_tid)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    text = (
        "üîÅ <b>–û–±–º–µ–Ω–Ω–∏–∫</b>\n"
        f"–ö–í—Ç –¥–æ—Å—Ç—É–ø–Ω–æ: <b>{b['kwh']}</b>\n"
        f"EFHC: <b>{b['efhc']}</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–í—Ç ‚Üí EFHC (1:1)."
    )
    await message.answer(text, reply_markup=exchange_menu())

@router.message(F.text == "üî© –ü–∞–Ω–µ–ª–∏")
async def on_panels(message: Message):
    """
    –†–∞–∑–¥–µ–ª ¬´–ü–∞–Ω–µ–ª–∏¬ª ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–æ–∫—É–ø–∫–µ –ø–∞–Ω–µ–ª–µ–π.
    –¶–µ–Ω–∞ –ø–∞–Ω–µ–ª–∏ = 100 EFHC.
    –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Å–Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –±–æ–Ω—É—Å–Ω—ã–µ EFHC, –∑–∞—Ç–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ).
    """
    x_tid = message.from_user.id
    try:
        b = await _api_get(API_USER_BALANCE, x_tid)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    text = (
        "üî© <b>–ü–∞–Ω–µ–ª–∏</b>\n"
        f"–û—Å–Ω–æ–≤–Ω–æ–π EFHC: <b>{b['efhc']}</b>\n"
        f"–ë–æ–Ω—É—Å–Ω—ã–µ EFHC: <b>{b['bonus']}</b>\n\n"
        "–¶–µ–Ω–∞ –ø–∞–Ω–µ–ª–∏ = <b>100 EFHC</b>.\n"
        "üí° –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Å–Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è <b>–±–æ–Ω—É—Å–Ω—ã–µ</b> EFHC, –∑–∞—Ç–µ–º ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å.\n"
        "‚õî –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –º–∞–∫—Å–∏–º—É–º <b>1000</b> –ø–∞–Ω–µ–ª–µ–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    )
    await message.answer(text, reply_markup=panels_menu(show_buy=True))

@router.message(F.text == "üéü –†–æ–∑—ã–≥—Ä—ã—à–∏")
async def on_lotteries(message: Message):
    """
    –†–∞–∑–¥–µ–ª ¬´–†–æ–∑—ã–≥—Ä—ã—à–∏¬ª ‚Äî –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å /user/lotteries).
    """
    await _send_lotteries_list(message.chat.id, message.from_user.id)

@router.message(F.text == "üìã –ó–∞–¥–∞–Ω–∏—è")
async def on_tasks(message: Message):
    """
    –†–∞–∑–¥–µ–ª ¬´–ó–∞–¥–∞–Ω–∏—è¬ª ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ /user/tasks).
    –í—ã–ø–ª–∞—Ç—ã –∑–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –≤ –±–æ–Ω—É—Å–Ω—ã–µ EFHC.
    """
    await _send_tasks_list(message.chat.id, message.from_user.id)

@router.message(F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")
async def on_referrals(message: Message):
    """
    –†–∞–∑–¥–µ–ª ¬´–†–µ—Ñ–µ—Ä–∞–ª—ã¬ª ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –°–ø–∏—Å–æ–∫ —Å —Ñ–ª–∞–≥–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ—Ñ—Å—Å—ã–ª–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ WebApp (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥).
    """
    x_tid = message.from_user.id
    try:
        refs = await _api_get(API_USER_REFERRALS, x_tid)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    if not refs:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.")
        return

    active = sum(1 for r in refs if r.get("active"))
    text = (
        f"üë• <b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</b>\n"
        f"–í—Å–µ–≥–æ: <b>{len(refs)}</b>\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{active}</b>\n\n"
        "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤—ã–¥–∞—ë—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ WebApp (–∫–Ω–æ–ø–∫–∞ ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª)."
    )
    await message.answer(text)

@router.message(F.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥")
async def on_ranking(message: Message):
    """
    –†–∞–∑–¥–µ–ª ¬´–†–µ–π—Ç–∏–Ω–≥¬ª ‚Äî (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–∑–∂–µ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ).
    –ü–æ –∑–∞–¥—É–º–∫–µ: –≤—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ –ø–æ —Å—É–º–º–∞—Ä–Ω–æ–π –≤—ã—Ä–∞–±–æ—Ç–∫–µ kWh –∏–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–∞–Ω–µ–ª–µ–π.
    –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –æ –Ω–∞–ª–∏—á–∏–∏ WebApp —Ä–∞–∑–¥–µ–ª–∞ Ranks.
    """
    wa = settings.TELEGRAM_WEBAPP_URL if hasattr(settings, "TELEGRAM_WEBAPP_URL") else None
    if wa:
        await message.answer(
            f"üèÜ –†–∞–∑–¥–µ–ª ¬´–†–µ–π—Ç–∏–Ω–≥¬ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ WebApp:\n{wa}/ranks\n\n"
            "–°–º–æ—Ç—Ä–∏—Ç–µ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –≤—ã—Ä–∞–±–æ—Ç–∫–µ —ç–Ω–µ—Ä–≥–∏–∏."
        )
    else:
        await message.answer("üèÜ –†–∞–∑–¥–µ–ª ¬´–†–µ–π—Ç–∏–Ω–≥¬ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ WebApp. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_WEBAPP_URL –≤ .env")

@router.message(F.text == "üíº –ú–∞–≥–∞–∑–∏–Ω")
async def on_shop(message: Message):
    """
    –†–∞–∑–¥–µ–ª ¬´–ú–∞–≥–∞–∑–∏–Ω¬ª ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ (React+Tailwind).
    –ó–¥–µ—Å—å –¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ WebApp –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:
    - –ü–æ–∫—É–ø–∫–∞ EFHC / VIP / –ø–∞–Ω–µ–ª–µ–π –∑–∞ TON/USDT/EFHC.
    - –ù–∞—á–∏—Å–ª–µ–Ω–∏—è EFHC –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ —Ñ–∞–∫—Ç—É –≤—Ö–æ–¥—è—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ ton_integration.
    """
    wa = getattr(settings, "TELEGRAM_WEBAPP_URL", None)
    if wa:
        await message.answer(
            f"üíº –ú–∞–≥–∞–∑–∏–Ω –æ—Ç–∫—Ä—ã—Ç –≤ WebApp:\n{wa}\n\n"
            "–û–ø–ª–∞—á–∏–≤–∞–π—Ç–µ TON/USDT/EFHC. –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ EFHC –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –ø–µ—Ä–µ–≤–æ–¥–æ–º –æ—Ç –∞–¥–º–∏–Ω–∞ (TonAPI watcher)."
        )
    else:
        await message.answer(
            "üíº –ú–∞–≥–∞–∑–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –≤ WebApp. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_WEBAPP_URL –≤ .env, "
            "—á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
        )

@router.message(F.text == "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def on_admin(message: Message):
    """
    –†–∞–∑–¥–µ–ª ¬´–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å¬ª ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–æ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ /api/admin/whoami:
      - –°—É–ø–µ—Ä–∞–¥–º–∏–Ω (settings.ADMIN_TELEGRAM_ID),
      - –ê–¥–º–∏–Ω –ø–æ NFT whitelist (—Ç–∞–±–ª–∏—Ü–∞ admin_nft_whitelist + TonAPI –ø—Ä–æ–≤–µ—Ä–∫–∞).
    –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ WebApp –∞–¥–º–∏–Ω–∫—É.
    """
    x_tid = message.from_user.id
    try:
        who = await _api_get(API_ADMIN_WHOAMI, x_tid=x_tid)
        if not who.get("is_admin"):
            await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–¥–º–∏–Ω NFT –∏–∑ whitelist –∏–ª–∏ SUPER-ADMIN ID.")
            return
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
        return

    wa = getattr(settings, "TELEGRAM_WEBAPP_URL", None)
    if wa:
        await message.answer(f"üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n{wa}/admin\n\n"
                             "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è–º–∏ EFHC (–±–∞–Ω–∫)\n"
                             "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ whitelist NFT\n"
                             "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ TON —Å–æ–±—ã—Ç–∏–π\n"
                             "‚Ä¢ –ó–∞–¥–∞–Ω–∏—è/–õ–æ—Ç–µ—Ä–µ–∏/–ê–∫—Ü–∏–∏\n")
    else:
        await message.answer("üõ† –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_WEBAPP_URL –≤ .env, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (WebApp).")

# -----------------------------------------------------------------------------
# CallbackQuery: –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è (–û–±–º–µ–Ω–Ω–∏–∫, –ü–∞–Ω–µ–ª–∏, –†–æ–∑—ã–≥—Ä—ã—à–∏, –ó–∞–¥–∞–Ω–∏—è)
# -----------------------------------------------------------------------------
@router.callback_query(F.data == "nav:home")
async def cb_nav_home(cq: CallbackQuery):
    """
    Callback ¬´–ù–∞–∑–∞–¥¬ª ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    –£—Ç–æ—á–Ω—è–µ–º —Ñ–ª–∞–≥ is_admin —á–µ—Ä–µ–∑ admin_whoami.
    """
    is_admin = False
    try:
        who = await _api_get(API_ADMIN_WHOAMI, x_tid=cq.from_user.id)
        is_admin = bool(who.get("is_admin"))
    except Exception:
        pass
    await cq.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ.")
    await cq.message.answer("‚¨áÔ∏è", reply_markup=main_menu(is_admin=is_admin))
    await cq.answer()

@router.callback_query(F.data == "nav:lotteries")
async def cb_nav_lotteries(cq: CallbackQuery):
    """
    Callback –¥–∏—Å–ø–∞—Ç—á–∏–Ω–≥ –≤ ¬´–†–æ–∑—ã–≥—Ä—ã—à–∏¬ª (—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞).
    """
    await _send_lotteries_list(cq.message.chat.id, cq.from_user.id, edit=True, cq=cq)

@router.callback_query(F.data == "nav:tasks")
async def cb_nav_tasks(cq: CallbackQuery):
    """
    Callback –¥–∏—Å–ø–∞—Ç—á–∏–Ω–≥ –≤ ¬´–ó–∞–¥–∞–Ω–∏—è¬ª (—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞).
    """
    await _send_tasks_list(cq.message.chat.id, cq.from_user.id, edit=True, cq=cq)

# --- –û–ë–ú–ï–ù–ù–ò–ö -----------------------------------------------------------------
@router.callback_query(F.data == "ex:convert")
async def cb_exchange_convert(cq: CallbackQuery):
    """
    –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ ¬´–û–±–º–µ–Ω—è—Ç—å –∫–í—Ç ‚Üí EFHC (1:1)¬ª.
    –°—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ—Å—Ç–æ–π: –º–µ–Ω—è–µ–º –≤—Å—ë –¥–æ—Å—Ç—É–ø–Ω–æ–µ kWh –≤ EFHC.
    –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –Ω–∞ –≤–≤–æ–¥ —Å—É–º–º—ã (FSM/—Å—Ç–µ–π—Ç –º–∞—à–∏–Ω—ã).
    """
    x_tid = cq.from_user.id
    try:
        b = await _api_get(API_USER_BALANCE, x_tid)
        kwh = Decimal(b["kwh"])
        if kwh <= Decimal("0.000"):
            await cq.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–í—Ç –¥–ª—è –æ–±–º–µ–Ω–∞.", show_alert=True)
            return
        # –ú–µ–Ω—è–µ–º –≤—Å—ë –¥–æ—Å—Ç—É–ø–Ω–æ–µ (—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ user_routes)
        await _api_post(API_USER_EXCHANGE, x_tid, {"amount_kwh": str(kwh)})
    except Exception as e:
        await cq.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
        return

    await cq.message.edit_text("‚úÖ –û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω. –ö–í—Ç ‚Üí EFHC (1:1).")
    await cq.message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –û–±–º–µ–Ω–Ω–∏–∫:", reply_markup=exchange_menu())
    await cq.answer()

# --- –ü–ê–ù–ï–õ–ò -------------------------------------------------------------------
@router.callback_query(F.data == "panels:buy")
async def cb_panels_buy(cq: CallbackQuery):
    """
    –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–æ–∫—É–ø–∫–µ –ø–∞–Ω–µ–ª–∏: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å —Ä–∞—Å—á—ë—Ç–æ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è
    –±–æ–Ω—É—Å–Ω—ã—Ö –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö EFHC –Ω–∞ —Ü–µ–Ω—É 100.
    """
    x_tid = cq.from_user.id
    try:
        b = await _api_get(API_USER_BALANCE, x_tid)
        bonus = Decimal(b["bonus"])
        efhc = Decimal(b["efhc"])
        price = Decimal("100.000")
        if bonus + efhc < price:
            await cq.answer(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ 100 EFHC. –£ –≤–∞—Å {bonus + efhc:.3f} (–±–æ–Ω—É—Å {bonus:.3f} + –æ—Å–Ω–æ–≤–Ω–æ–π {efhc:.3f}).",
                show_alert=True
            )
            return
    except Exception as e:
        await cq.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data="panels:confirm_buy")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="nav:home")]
    ])
    text = (
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –ø–∞–Ω–µ–ª–∏ –∑–∞ <b>100 EFHC</b>.\n"
        f"–ë—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ: <b>{min(bonus, price):.3f}</b> –±–æ–Ω—É—Å–Ω—ã—Ö + <b>{max(Decimal('0.000'), price - bonus):.3f}</b> –æ—Å–Ω–æ–≤–Ω—ã—Ö.\n"
        "üîπ VIP —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–∞ +7%, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å NFT –∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π VIP."
    )
    await cq.message.edit_text(text, reply_markup=kb)
    await cq.answer()

@router.callback_query(F.data == "panels:confirm_buy")
async def cb_panels_confirm_buy(cq: CallbackQuery):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –ø–∞–Ω–µ–ª–∏ (—Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∞–Ω–∏–µ–º).
    –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ /user/panels/buy ‚Äî –±—ç–∫–µ–Ω–¥ –ø–æ—Å—á–∏—Ç–∞–µ—Ç bonus_used/main_used/–ª–∏–º–∏—Ç—ã.
    """
    x_tid = cq.from_user.id
    try:
        res = await _api_post(API_USER_BUY_PANEL, x_tid)
        bonus_used = res.get("bonus_used", "0.000")
        main_used = res.get("main_used", "0.000")
        await cq.message.edit_text(
            f"‚úÖ –ü–∞–Ω–µ–ª—å –∫—É–ø–ª–µ–Ω–∞.\n–°–ø–∏—Å–∞–Ω–æ: <b>{bonus_used}</b> –±–æ–Ω—É—Å–Ω—ã—Ö EFHC –∏ <b>{main_used}</b> –æ—Å–Ω–æ–≤–Ω—ã—Ö EFHC."
        )
        await cq.message.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –ø–∞–Ω–µ–ª—è–º:", reply_markup=panels_menu())
    except Exception as e:
        await cq.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
    finally:
        await cq.answer()

@router.callback_query(F.data == "panels:buy_bonus")
async def cb_panels_buy_by_bonus(cq: CallbackQuery):
    """
    –ö–Ω–æ–ø–∫–∞ ¬´–û–±–º–µ–Ω—è—Ç—å –±–æ–Ω—É—Å—ã –Ω–∞ –ø–∞–Ω–µ–ª—å¬ª ‚Äî —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ç–∞ –∂–µ –ø–æ–∫—É–ø–∫–∞ (100 EFHC),
    –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–µ–º, —á—Ç–æ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å —É–π–¥—É—Ç –±–æ–Ω—É—Å–Ω—ã–µ.
    –ï—Å–ª–∏ –±–æ–Ω—É—Å–æ–≤ < 100, –æ—Å—Ç–∞—Ç–æ–∫ –≤–æ–∑—å–º—ë—Ç—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞.
    """
    await cb_panels_buy(cq)

# --- –†–û–ó–´–ì–†–´–®–ò ----------------------------------------------------------------
@router.callback_query(F.data == "lottery:list")
async def cb_lottery_list(cq: CallbackQuery):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–æ—Ç–µ—Ä–µ–π –ø–æ –Ω–∞–∂–∞—Ç–∏—é ¬´–û–±–Ω–æ–≤–∏—Ç—å¬ª –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–†–æ–∑—ã–≥—Ä—ã—à–∏¬ª.
    """
    await _send_lotteries_list(cq.message.chat.id, cq.from_user.id, edit=True, cq=cq)

async def _send_lotteries_list(chat_id: int, x_tid: int, edit: bool = False, cq: Optional[CallbackQuery] = None):
    """
    –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–æ—Ç–µ—Ä–µ–π:
    - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π —á–µ—Ä–µ–∑ /user/lotteries.
    - –°—Ç—Ä–æ–∏—Ç –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–ª–æ–∫ –ø–æ –∑–∞–ø–æ–ª–Ω—è–µ–º–æ—Å—Ç–∏.
    - –î–∞—ë—Ç –∫–Ω–æ–ø–∫–∏ –∫—É–ø–∏—Ç—å 1/5/10 –±–∏–ª–µ—Ç–æ–≤.
    """
    try:
        lots = await _api_get(API_USER_LOTTERIES, x_tid)
    except Exception as e:
        if edit and cq:
            await cq.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=lotteries_menu())
            await cq.answer()
        else:
            await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    if not lots:
        text = "üéü –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π —Å–µ–π—á–∞—Å –Ω–µ—Ç."
    else:
        lines = ["üéü <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏</b>"]
        for l in lots:
            target = l.get("target", 0) or l.get("target_participants", 0)
            sold = l.get("tickets_sold", 0)
            # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π ¬´–ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä¬ª —Å–∏–º–≤–æ–ª–∞–º–∏
            bar_len = 20
            filled = max(0, min(bar_len, int((sold / max(1, target)) * bar_len)))
            bar = "‚ñ†" * filled + "‚ñ°" * (bar_len - filled)
            lines.append(f"‚Ä¢ {l['title']} ‚Äî {sold}/{target}\n[{bar}]")
        lines.append("\n–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã: –ø–æ 1 EFHC, –º–∞–∫—Å–∏–º—É–º 10 —à—Ç –∑–∞ —Ä–∞–∑.")
        text = "\n".join(lines)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å 1 –±–∏–ª–µ—Ç", callback_data="lottery:buy:1"),
         InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å 5 –±–∏–ª–µ—Ç–æ–≤", callback_data="lottery:buy:5"),
         InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å 10 –±–∏–ª–µ—Ç–æ–≤", callback_data="lottery:buy:10")],
        [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="lottery:list")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:home")]
    ])

    if edit and cq:
        await cq.message.edit_text(text, reply_markup=kb)
        await cq.answer()
    else:
        await bot.send_message(chat_id, text, reply_markup=kb)

@router.callback_query(F.data.startswith("lottery:buy:"))
async def cb_lottery_buy(cq: CallbackQuery):
    """
    –ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ /user/lottery/buy.
    –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é –ª–æ—Ç–µ—Ä–µ—é –≤ —Å–ø–∏—Å–∫–µ (–∫–∞–∫ –≤ UI).
    –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ª–æ—Ç–µ—Ä–µ—é.
    """
    x_tid = cq.from_user.id
    count = int(cq.data.split(":")[-1])

    try:
        lots = await _api_get(API_USER_LOTTERIES, x_tid)
        if not lots:
            await cq.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π.", show_alert=True)
            return
        lottery_id = lots[0]["id"]
        await _api_post(API_USER_LOTTERY_BUY, x_tid, {"lottery_id": lottery_id, "count": count})
        await cq.answer("‚úÖ –ë–∏–ª–µ—Ç—ã –∫—É–ø–ª–µ–Ω—ã!", show_alert=True)
        await _send_lotteries_list(cq.message.chat.id, x_tid, edit=True, cq=cq)
    except Exception as e:
        await cq.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)

# --- –ó–ê–î–ê–ù–ò–Ø ------------------------------------------------------------------
@router.callback_query(F.data == "tasks:list")
async def cb_tasks_list(cq: CallbackQuery):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π –ø–æ –Ω–∞–∂–∞—Ç–∏—é ¬´–û–±–Ω–æ–≤–∏—Ç—å¬ª –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ó–∞–¥–∞–Ω–∏—è¬ª.
    """
    await _send_tasks_list(cq.message.chat.id, cq.from_user.id, edit=True, cq=cq)

async def _send_tasks_list(chat_id: int, x_tid: int, edit: bool = False, cq: Optional[CallbackQuery] = None):
    """
    –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π:
    - –ó–∞–≥—Ä—É–∂–∞–µ—Ç —á–µ—Ä–µ–∑ /user/tasks (–≤–∫–ª—é—á–∞—è —Ñ–ª–∞–≥ completed).
    - –¢–∞–∫–∂–µ –≥—Ä—É–∑–∏–º –±–∞–ª–∞–Ω—Å (/user/balance), —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –±–æ–Ω—É—Å–Ω—ã–µ EFHC.
    """
    try:
        tasks = await _api_get(API_USER_TASKS, x_tid)
        b = await _api_get(API_USER_BALANCE, x_tid)
    except Exception as e:
        if edit and cq:
            await cq.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=tasks_menu())
            await cq.answer()
        else:
            await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    lines = [
        "üìã <b>–ó–∞–¥–∞–Ω–∏—è</b>",
        f"–í–∞—à–∏ –±–æ–Ω—É—Å–Ω—ã–µ EFHC: <b>{b['bonus']}</b>\n"
        "–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –æ–±–º–µ–Ω–∏–≤–∞–π—Ç–µ 100 –±–æ–Ω—É—Å–Ω—ã—Ö EFHC –Ω–∞ –ø–∞–Ω–µ–ª—å."
    ]
    if not tasks:
        lines.append("–ü–æ–∫–∞ –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç.")
    else:
        for t in tasks:
            status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if t["completed"] else "üü° –î–æ—Å—Ç—É–ø–Ω–æ"
            url = t.get("url") or "‚Äî"
            lines.append(f"‚Ä¢ {t['title']} (+{t['reward']} –±–æ–Ω—É—Å–Ω—ã—Ö). {status}\n{url}")

    text = "\n".join(lines)
    kb_rows = []
    kb_rows.append([InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="tasks:list")])
    kb_rows.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:home")])
    kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)

    if edit and cq:
        await cq.message.edit_text(text, reply_markup=kb)
        await cq.answer()
    else:
        await bot.send_message(chat_id, text, reply_markup=kb)

# -----------------------------------------------------------------------------
# –ö–æ–º–∞–Ω–¥—ã /help –∏ /balance
# -----------------------------------------------------------------------------
@router.message(Command("help"))
async def cmd_help(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.
    """
    await message.answer(
        "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/balance ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )

@router.message(Command("balance"))
async def cmd_balance(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å (–∫–∞–∫ —Ä–∞–∑–¥–µ–ª ¬´–≠–Ω–µ—Ä–≥–∏—è¬ª).
    """
    x_tid = message.from_user.id
    try:
        b = await _api_get(API_USER_BALANCE, x_tid)
        await message.answer(
            f"EFHC: <b>{b['efhc']}</b>\n"
            f"–ë–æ–Ω—É—Å–Ω—ã–µ EFHC: <b>{b['bonus']}</b>\n"
            f"–ö–í—Ç: <b>{b['kwh']}</b>"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# -----------------------------------------------------------------------------
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: /withdraw ‚Äî –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–∑–æ–≤–∞ –≤—ã–≤–æ–¥–∞ EFHC (–µ—Å–ª–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)
# -----------------------------------------------------------------------------
@router.message(Command("withdraw"))
async def cmd_withdraw(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /withdraw ‚Äî –≤—ã–≤–æ–¥ EFHC –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –∫–æ—à–µ–ª—ë–∫.
    ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Ä–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–≤–æ–¥–∞ EFHC ‚Äî –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∑–æ–Ω–∞.
       –û–±—ã—á–Ω–æ —ç—Ç–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Å –∞–¥–º–∏–Ω–æ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ AML.
       –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ API,
       –∞ –∞–¥–º–∏–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ä—É—á–Ω—É—é –ø–µ—Ä–µ–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ–π—á–∞—Å –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è ‚Äî –≤—ã–∑—ã–≤–∞–µ–º stub (–∑–∞–≥–ª—É—à–∫—É).
    """
    x_tid = message.from_user.id
    try:
        # –í –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ: –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∞–¥—Ä–µ—Å –∏ —Å—É–º–º—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (FSM), –∑–¥–µ—Å—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
        res = await _api_post(API_USER_WITHDRAW, x_tid, payload={"amount": "10", "to_wallet": "EQ...your wallet..."})
        await message.answer(f"üîÅ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞: {res}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# -----------------------------------------------------------------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (–∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–Ω—ã –≤ –º–µ–Ω—é Telegram "–∫–æ–º–∞–Ω–¥—ã")
# -----------------------------------------------------------------------------
async def _set_bot_commands():
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥–µ–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ Telegram UI.
    """
    commands = [
        BotCommand(command="start", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="balance", description="–ë–∞–ª–∞–Ω—Å (EFHC/kWh)"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="withdraw", description="–í—ã–≤–æ–¥ EFHC (–∑–∞—è–≤–∫–∞)")
    ]
    await bot.set_my_commands(commands)

# -----------------------------------------------------------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è webhook/polling –∑–∞–ø—É—Å–∫–∞
# -----------------------------------------------------------------------------
async def setup_webhook():
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –¥–ª—è –±–æ—Ç–∞.

    –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
    - BASE_PUBLIC_URL ‚Äî –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞ backend (Render/VPS)
    - TELEGRAM_WEBHOOK_PATH ‚Äî –ø—É—Ç—å, –∫—É–¥–∞ Telegram –±—É–¥–µ—Ç —Å–ª–∞—Ç—å –∞–ø–¥–µ–π—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "/tg/webhook")
    - TELEGRAM_WEBHOOK_SECRET ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç. Telegram –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä 'secret_token'.
      –ú—ã –ø–µ—Ä–µ–¥–∞—ë–º –µ–≥–æ –≤ set_webhook, –∞ —Å–µ—Ä–≤–µ—Ä (main.py) –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ "X-Telegram-Webhook-Secret".

    –ü–æ–≤–µ–¥–µ–Ω–∏–µ:
    - –ï—Å–ª–∏ BASE_PUBLIC_URL –Ω–µ –∑–∞–¥–∞–Ω, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–∞–µ–º webhook (–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ª–æ–∫–∞–ª–∞).
    """
    base = getattr(settings, "BASE_PUBLIC_URL", None)
    path = getattr(settings, "TELEGRAM_WEBHOOK_PATH", "/tg/webhook")
    secret = getattr(settings, "TELEGRAM_WEBHOOK_SECRET", None)

    if not base:
        print("[EFHC][BOT][WEBHOOK] BASE_PUBLIC_URL –Ω–µ –∑–∞–¥–∞–Ω. Webhook –ø—Ä–æ–ø—É—â–µ–Ω (–ª–æ–∫–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞?)")
        return

    webhook_url = f"{base.rstrip('/')}{path}"

    # Telegram Bot API v6+ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç secret_token –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        ok = await bot.set_webhook(url=webhook_url, drop_pending_updates=True, secret_token=secret)
        print(f"[EFHC][BOT] Set webhook to: {webhook_url} (ok={ok}, secret={'yes' if secret else 'no'})")
    except Exception as e:
        print(f"[EFHC][BOT] Failed to set webhook: {e}")

async def start_bot():
    """
    –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞).
    - –í—ã–∑—ã–≤–∞–µ—Ç _set_bot_commands()
    - –°—Ç–∞—Ä—Ç—É–µ—Ç dp.start_polling(bot)
    - –ü–µ—Ä–µ—Ö–≤–∞—Ç –æ—à–∏–±–æ–∫ polling'–∞
    """
    print("[EFHC][BOT] Starting polling...")
    await _set_bot_commands()
    try:
        await dp.start_polling(bot, allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        print(f"[EFHC][BOT] polling error: {e}", flush=True)

# -----------------------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ update –∏–∑ FastAPI (–µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é)
# -----------------------------------------------------------------------------
async def handle_update(update: dict):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∫–∏–¥—ã–≤–∞–Ω–∏—è update –≤ Dispatcher.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å—Ç–∞—Ä–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ (—á–µ—Ä–µ–∑ —è–≤–Ω—ã–π –≤—ã–∑–æ–≤),
    –í —Ç–µ–∫—É—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –æ—Å–Ω–æ–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º —è–≤–ª—è–µ—Ç—Å—è feed_raw_update –≤ main.py/webhook.
    """
    try:
        await dp.feed_raw_update(bot, update)
    except Exception as e:
        print(f"[EFHC][BOT] handle_update error: {e}")
    return {"ok": True}

# -----------------------------------------------------------------------------
# –£—Ç–∏–ª–∏—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Dispatcher –¥–ª—è main.py
# -----------------------------------------------------------------------------
def get_dispatcher() -> Dispatcher:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π Dispatcher, —á—Ç–æ–±—ã main.py –º–æ–≥ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –≤ FastAPI webhook handler.
    """
    return dp
