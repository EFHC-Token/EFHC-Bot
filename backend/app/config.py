# üìÇ backend/app/config.py
# -----------------------------------------------------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è EFHC Bot (–ü–û–õ–ù–ê–Ø –≤–µ—Ä—Å–∏—è, –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ, —Ç–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–æ)
# -----------------------------------------------------------------------------
# –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
#   ‚Ä¢ –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env / Vercel / Render / Neon).
#   ‚Ä¢ –•—Ä–∞–Ω–∏—Ç –≤—Å–µ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–∏–≥—Ä–∞, —Ä–µ—Ñ–µ—Ä–∞–ª—ã, –ª–æ—Ç–µ—Ä–µ—è, –º–∞–≥–∞–∑–∏–Ω).
#   ‚Ä¢ –•—Ä–∞–Ω–∏—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ –∫–ª—é—á–∏ (Telegram, TON, Neon, TonAPI, Webhook).
#   ‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –º–æ–¥—É–ª—è–º–∏ (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è).
#
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö:
#   bot.py, main.py, database.py, user_routes.py, admin_routes.py,
#   ton_integration.py, scheduler.py, services/* –∏ —Ç.–¥.
#
# –í–ê–ñ–ù–û:
#   ‚Ä¢ –ù–ò–ß–ï–ì–û –Ω–µ —Ö–∞—Ä–¥–∫–æ–¥–∏–º ¬´—Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ¬ª –≤ –∫–æ–¥–µ ‚Äî –≤—Å—ë —á–µ—Ä–µ–∑ ENV.
#   ‚Ä¢ –ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ä—ã–µ/–Ω–æ–≤—ã–µ.
# -----------------------------------------------------------------------------

from pydantic import BaseSettings, AnyHttpUrl, validator
from typing import List, Optional, Dict, Literal
from functools import lru_cache
from pathlib import Path


class Settings(BaseSettings):
    # -----------------------------------------------------------------
    # –ë–ê–ó–û–í–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
    # -----------------------------------------------------------------
    PROJECT_NAME: str = "EFHC Bot"
    ENV: Literal["local", "dev", "prod"] = "dev"
    API_V1_STR: str = "/api"

    # CORS ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (Vercel –∏ —Ç.–ø.).
    # –ú–æ–∂–Ω–æ —Å—Ç—Ä–æ–∫–æ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ "*" (–ª—é–±–æ–π).
    BACKEND_CORS_ORIGINS: List[AnyHttpUrl] = []

    @validator("BACKEND_CORS_ORIGINS", pre=True)
    def assemble_cors(cls, v):
        # –†–∞–∑—Ä–µ—à–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º, –ª–∏–±–æ "*" -> []
        if isinstance(v, str) and v and v != "*":
            return [i.strip() for i in v.split(",")]
        return [] if v in (None, "", "*") else v

    # -----------------------------------------------------------------
    # –ë–ê–ó–ê –î–ê–ù–ù–´–• (PostgreSQL / Neon)
    # -----------------------------------------------------------------
    # –û—Å–Ω–æ–≤–Ω–æ–π URL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DATABASE_URL)
    # –ü—Ä–∏–º–µ—Ä (—Ç—ã –ø—Ä–∏—Å–ª–∞–ª): postgres://...neon.tech/neondb?sslmode=require
    DATABASE_URL: Optional[str] = None

    # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ–ª–±—ç–∫ (–Ω–∞ —Å–ª—É—á–∞–π –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ –±–µ–∑ –≤–Ω–µ—à–Ω–µ–≥–æ Neon)
    DATABASE_URL_LOCAL: str = "postgresql+asyncpg://postgres:postgres@localhost:5432/efhc_core"

    # –°—Ö–µ–º—ã (–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π/—Ç–∞–±–ª–∏—Ü, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å –ø—Ä–µ–∂–Ω–∏–º –∫–æ–¥–æ–º)
    DB_SCHEMA_CORE: str = "efhc_core"
    DB_SCHEMA_REFERRAL: str = "efhc_referrals"
    DB_SCHEMA_ADMIN: str = "efhc_admin"
    DB_SCHEMA_LOTTERY: str = "efhc_lottery"
    DB_SCHEMA_TASKS: str = "efhc_tasks"

    # –ü—É–ª—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    DB_POOL_SIZE: int = 10
    DB_MAX_OVERFLOW: int = 10

    # --- Vercel ‚Üí Neon –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: EFHC_DB_* (–ù–ï –£–î–ê–õ–Ø–ï–ú, –£–ß–ò–¢–´–í–ê–ï–ú) ---
    EFHC_DB_NEXT_PUBLIC_STACK_PROJECT_ID: Optional[str] = None
    EFHC_DB_PGUSER: Optional[str] = None
    EFHC_DB_POSTGRES_URL_NO_SSL: Optional[str] = None
    EFHC_DB_POSTGRES_HOST: Optional[str] = None
    EFHC_DB_NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY: Optional[str] = None
    EFHC_DB_NEON_PROJECT_ID: Optional[str] = None

    # -----------------------------------------------------------------
    # TELEGRAM / BOT
    # -----------------------------------------------------------------
    # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–¢–û–ß–ù–û –∑–∞–¥–∞–Ω–Ω—ã–π —Ç–æ–±–æ–π)
    TELEGRAM_BOT_TOKEN: str = "8374691236:AAFgTHjtDZOqrkhBApyLiuUwGF5qSWu8C1I"

    # –ò–º—è –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    TELEGRAM_BOT_USERNAME: Optional[str] = "EnergySolarGameBot"

    # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∫–æ–º–∞–Ω–¥ ("/start", "/help", –∏ —Ç.–¥.)
    TELEGRAM_COMMAND_PREFIX: str = "/"

    # ID –∞–¥–º–∏–Ω–∞ (–≤–∞—à Telegram id)
    ADMIN_TELEGRAM_ID: int = 362746228

    # –í–µ–±—Ö—É–∫: –ø—É—Ç—å –∏ —Å–µ–∫—Ä–µ—Ç (–¢–û–ß–ù–û –∑–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–±–æ–π)
    TELEGRAM_WEBHOOK_PATH: str = "/tg/webhook"
    TELEGRAM_WEBHOOK_SECRET: str = "EFHC_webhook_9pX3"

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø—É–±–ª–∏—á–Ω—ã–π URL –±—ç–∫–µ–Ω–¥–∞ (–¥–ª—è webhook)
    BASE_PUBLIC_URL: Optional[str] = None  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://efhc-api.onrender.com

    # –í—ã–∑–æ–≤—ã API –∏–∑ –±–æ—Ç–∞ (–µ—Å–ª–∏ bot –¥–µ–ª–∞–µ—Ç httpx-–∑–∞–ø—Ä–æ—Å—ã –∫ —Ç–æ–º—É –∂–µ backend)
    BACKEND_BASE_URL: Optional[str] = None  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://efhc-api.onrender.com

    # WebApp UI (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥, Vercel)
    TELEGRAM_WEBAPP_URL: Optional[str] = "https://efhc-bot.vercel.app"

    # –ò–Ω—Ç–µ—Ä–≤–∞–ª polling (–µ—Å–ª–∏ —Ä–µ—à–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å polling –ª–æ–∫–∞–ª—å–Ω–æ)
    TELEGRAM_POLLING_INTERVAL: float = 1.0

    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º (–Ω–µ —É–¥–∞–ª—è–µ–º):
    BOT_TOKEN: str = "SET_ME_IN_ENV"
    WEBHOOK_ENABLED: bool = True
    WEBHOOK_SECRET: Optional[str] = None
    WEBHOOK_BASE_URL: Optional[str] = None

    # -----------------------------------------------------------------
    # –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ / ADMIN
    # -----------------------------------------------------------------
    # –¢—Ä–µ–±–æ–≤–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ –∞–¥–º–∏–Ω NFT (–≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)
    ADMIN_ENFORCE_NFT: bool = True

    # –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—é/–ø—Ä–µ–¥–º–µ—Ç (–¥–ª—è UI/–ø–æ–¥—Å–∫–∞–∑–æ–∫) ‚Äî –ù–ï –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´, –ù–û –û–°–¢–ê–í–õ–Ø–ï–ú
    ADMIN_NFT_COLLECTION_URL: str = "https://getgems.io/efhc-nft"
    ADMIN_NFT_ITEM_URL: str = (
        "https://getgems.io/collection/EQASPXkEI0NsZQzqkPjk6O_i752LfwSWRFT9WzDc2SJ2zgi0/"
        "EQDvvZCMEs5WIOrdO4r-F9NmsyEU5HyVN0uo1yfAqLG3qyLj"
    )

    # -----------------------------------------------------------------
    # –ö–û–®–ï–õ–¨–ö–ò / –°–ï–¢–ò / NFT
    # -----------------------------------------------------------------
    # –ö–æ—à–µ–ª—ë–∫ TON –ø—Ä–æ–µ–∫—Ç–∞ (Tonkeeper) ‚Äî –¢–û–ß–ù–û —Ç–≤–æ–π (–∏–∑ –≤–≤–æ–¥–Ω—ã—Ö)
    TON_WALLET_ADDRESS: str = "UQAyCoxmxzb2D6cmlf4M8zWYFYkaQuHbN_dgH-IfraFP8QKW"

    # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–µ—Ç–µ–π (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –≤–¥—Ä—É–≥ –ª–æ–≥–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç)
    CHAIN_TON_ENABLED: bool = True
    CHAIN_USDT_ENABLED: bool = True
    CHAIN_EFHC_ENABLED: bool = True

    # –ë–∞–∑—ã API
    GETGEMS_API_BASE: str = "https://tonapi.io"       # –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏
    TON_API_BASE: str = "https://tonconsole.com"      # –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è (TonConsole RPC/REST)
    USDT_API_BASE: str = "https://apilist.tronscan.org"  # –µ—Å–ª–∏ –≤–µ—Ä–Ω—ë—Ç—Å—è Tron USDT

    # –ö–æ–ª–ª–µ–∫—Ü–∏—è NFT, –¥–∞—é—â–∞—è –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø (–¢–û–ß–ù–û –∏–∑ –≤–≤–æ–¥–Ω—ã—Ö)
    VIP_NFT_COLLECTION: str = "EQASPXkEI0NsZQzqkPjk6O_i752LfwSWRFT9WzDc2SJ2zgi0"

    # –ü—Ä–æ–≤–∞–π–¥–µ—Ä TonAPI/TonConsole –¥–ª—è NFT/—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    NFT_PROVIDER_BASE_URL: str = "https://tonapi.io"
    NFT_PROVIDER_API_KEY: str = "AFHDHVSCO2J757YAAAAKXPGXRMOG4LK7323RPWTDSIIPEYK4EC47C45E2SG3KVLBCLNV7II"

    # Jetton EFHC (–∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞)
    EFHC_TOKEN_ADDRESS: str = "EQDNcpWf9mXgSPDubDCzvuaX-juL4p8MuUwrQC-36sARRBuw"

    # -----------------------------------------------------------------
    # –ö–û–ù–°–¢–ê–ù–¢–´ –ò–ì–†–´ / –≠–ö–û–ù–û–ú–ò–ö–ê
    # -----------------------------------------------------------------
    EFHC_DECIMALS: int = 3
    KWH_DECIMALS: int = 3
    ROUND_DECIMALS: int = 3

    # –ö—É—Ä—Å –∫–í—Ç ‚Üí EFHC
    KWH_TO_EFHC_RATE: float = 1.0  # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∏–º–µ–Ω–µ–º
    EXCHANGE_RATE_KWH_TO_EFHC: float = 1.0  # –Ω–æ–≤–æ–µ –∏–º—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–±–∞)
    EXCHANGE_MIN_KWH: float = 0.001

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–Ω–µ–ª–µ–π
    PANEL_PRICE_EFHC: float = 100.0
    PANEL_LIFESPAN_DAYS: int = 180
    MAX_ACTIVE_PANELS_PER_USER: int = 1000

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
    DAILY_GEN_BASE_KWH: float = 0.598
    VIP_MULTIPLIER: float = 1.07
    DAILY_GEN_VIP_KWH: float = 0.64

    # –£—Ä–æ–≤–Ω–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ)
    LEVELS: List[Dict[str, str]] = [
        {"idx": "1", "name": "Eco Initiate", "threshold_kwh": "0"},
        {"idx": "2", "name": "Hope Bringer", "threshold_kwh": "100"},
        {"idx": "3", "name": "Energy Seeker", "threshold_kwh": "300"},
        {"idx": "4", "name": "Nature's Voice", "threshold_kwh": "600"},
        {"idx": "5", "name": "Earth Ally", "threshold_kwh": "1000"},
        {"idx": "6", "name": "Climate Warrior", "threshold_kwh": "2000"},
        {"idx": "7", "name": "Green Sentinel", "threshold_kwh": "3500"},
        {"idx": "8", "name": "Planet Defender", "threshold_kwh": "5000"},
        {"idx": "9", "name": "Eco Champion", "threshold_kwh": "7500"},
        {"idx": "10", "name": "Planet Saver", "threshold_kwh": "10000"},
        {"idx": "11", "name": "Green Commander", "threshold_kwh": "15000"},
        {"idx": "12", "name": "Guardian of Earth", "threshold_kwh": "20000"},
    ]

    # –§–ª–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ –ø–∞–Ω–µ–ª–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º)
    ACTIVE_USER_FLAG_ON_FIRST_PANEL: bool = True

    # -----------------------------------------------------------------
    # –†–ï–§–ï–†–ê–õ–´
    # -----------------------------------------------------------------
    REFERRAL_DIRECT_BONUS_EFHC: float = 0.1
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ –Ω–æ–≤—ã—Ö –≤–≤–æ–¥–Ω—ã—Ö (–Ω–µ —Ä–µ–∂–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    REFERRAL_MILESTONES: Dict[int, float] = {
        10: 1.0,
        50: 5.0,
        100: 10.0,
        500: 50.0,
        1000: 100.0,
        10000: 1000.0,
    }

    # -----------------------------------------------------------------
    # –ú–ê–ì–ê–ó–ò–ù (–¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–∞–∫–µ—Ç—ã, –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫–µ)
    # -----------------------------------------------------------------
    # –ò–∑ —Ç–≤–æ–∏—Ö –≤–≤–æ–¥–Ω—ã—Ö ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º TON-–ø–∞–∫–µ—Ç—ã –∏ VIP USDT, –Ω–æ —Ç–∞–∫–∂–µ
    # –ù–ï —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (–æ–Ω–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Å–µ–π—á–∞—Å).
    SHOP_DEFAULTS: List[Dict[str, str]] = [
        {"id": "efhc_10_ton",   "label": "10 EFHC",   "pay_asset": "TON",  "price": "0.8"},
        {"id": "efhc_100_ton",  "label": "100 EFHC",  "pay_asset": "TON",  "price": "8"},
        {"id": "efhc_1000_ton", "label": "1000 EFHC", "pay_asset": "TON",  "price": "80"},
        {"id": "vip_usdt",      "label": "VIP NFT",   "pay_asset": "USDT", "price": "50"},
        # –ù–∏–∂–µ ‚Äî —Å—Ç–∞—Ä—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ UI/–∞–¥–º–∏–Ω–∫–∏):
        {"id": "efhc_10_usdt",   "label": "10 EFHC",   "pay_asset": "USDT", "price": "3"},
        {"id": "efhc_100_usdt",  "label": "100 EFHC",  "pay_asset": "USDT", "price": "30"},
        {"id": "efhc_1000_usdt", "label": "1000 EFHC", "pay_asset": "USDT", "price": "300"},
        {"id": "vip_efhc",       "label": "VIP NFT",   "pay_asset": "EFHC", "price": "250"},
        {"id": "vip_ton",        "label": "VIP NFT",   "pay_asset": "TON",  "price": "20"},
    ]

    # -----------------------------------------------------------------
    # –õ–û–¢–ï–†–ï–ò
    # -----------------------------------------------------------------
    LOTTERY_ENABLED: bool = True
    LOTTERY_MAX_TICKETS_PER_USER: int = 10
    LOTTERY_TICKET_PRICE_EFHC: float = 1.0
    LOTTERY_DEFAULTS: List[Dict[str, str]] = [
        {"id": "lottery_vip",   "title": "NFT VIP",   "target_participants": "500", "prize_type": "VIP_NFT"},
        {"id": "lottery_panel", "title": "1 –ü–∞–Ω–µ–ª—å",  "target_participants": "200", "prize_type": "PANEL"},
    ]

    # -----------------------------------------------------------------
    # –ó–ê–î–ê–ù–ò–Ø
    # -----------------------------------------------------------------
    TASKS_ENABLED: bool = True
    TASK_REWARD_BONUS_EFHC_DEFAULT: float = 1.0
    TASK_PRICE_USD_DEFAULT: float = 0.3

    # -----------------------------------------------------------------
    # –†–ê–°–ü–ò–°–ê–ù–ò–ï –ó–ê–î–ê–ß (UTC)
    # -----------------------------------------------------------------
    SCHEDULE_NFT_CHECK_UTC: str = "00:00"
    SCHEDULE_ENERGY_ACCRUAL_UTC: str = "00:30"

    # -----------------------------------------------------------------
    # –õ–ò–ú–ò–¢–´ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
    # -----------------------------------------------------------------
    RATE_LIMIT_USER_WRITE_PER_MIN: int = 30
    RATE_LIMIT_ADMIN_WRITE_PER_MIN: int = 60

    # -----------------------------------------------------------------
    # –Ø–ó–´–ö–ò
    # -----------------------------------------------------------------
    SUPPORTED_LANGS: List[str] = ["EN", "RU", "UA", "DE", "FR", "ES", "IT", "PL"]
    DEFAULT_LANG: str = "RU"

    # -----------------------------------------------------------------
    # –ü–£–¢–ò/–ü–û–î–°–ö–ê–ó–ö–ò
    # -----------------------------------------------------------------
    ASSETS_LEVELS_PATH_HINT: str = "frontend/src/assets/levels/level{1..12}.gif"

    # -----------------------------------------------------------------
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∏–∑–Ω–µ—Å-—Ñ–ª–∞–≥–∏ (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    # -----------------------------------------------------------------
    CHAIN_TON_ENABLED: bool = True
    CHAIN_USDT_ENABLED: bool = True
    CHAIN_EFHC_ENABLED: bool = True

    class Config:
        case_sensitive = True
        env_file = ".env"
        env_file_encoding = "utf-8"


@lru_cache()
def get_settings() -> Settings:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π singleton –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª—è–µ–º, —Ç–æ–ª—å–∫–æ —Ä–∞—Å—à–∏—Ä—è–µ–º)."""
    s = Settings()

    # 1) –ï—Å–ª–∏ DATABASE_URL –ø—É—Å—Ç ‚Äî –ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ EFHC_DB_* (Vercel/Neon).
    if not s.DATABASE_URL:
        # –ï—Å–ª–∏ Vercel –ø–æ–¥—Ç—è–Ω—É–ª URL –±–µ–∑ SSL (—á–∞—Å—Ç–æ —Ç–∞–∫), –≤–æ–∑—å–º—ë–º –µ–≥–æ –∫–∞–∫ –±–∞–∑—É.
        # –ù–æ –Ω–∞–º –Ω—É–∂–µ–Ω async –¥—Ä–∞–π–≤–µ—Ä: "postgresql+asyncpg://"
        if s.EFHC_DB_POSTGRES_URL_NO_SSL:
            url = s.EFHC_DB_POSTGRES_URL_NO_SSL
            # –ü—Ä–∏–≤–µ–¥—ë–º –∫ async –≤–∏–¥—É
            if url.startswith("postgres://"):
                url = url.replace("postgres://", "postgresql+asyncpg://", 1)
            elif url.startswith("postgresql://") and "asyncpg" not in url:
                url = url.replace("postgresql://", "postgresql+asyncpg://", 1)
            s.DATABASE_URL = url
        else:
            # –§–æ–ª–±—ç–∫: –ª–æ–∫–∞–ª—å–Ω—ã–π URL
            s.DATABASE_URL = s.DATABASE_URL_LOCAL

    # 2) –ï—Å–ª–∏ DATABASE_URL –≤ —Ñ–æ—Ä–º–µ postgres:// ‚Äî –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ asyncpg.
    if s.DATABASE_URL.startswith("postgres://"):
        s.DATABASE_URL = s.DATABASE_URL.replace("postgres://", "postgresql+asyncpg://", 1)
    elif s.DATABASE_URL.startswith("postgresql://") and "asyncpg" not in s.DATABASE_URL:
        s.DATABASE_URL = s.DATABASE_URL.replace("postgresql://", "postgresql+asyncpg://", 1)

    # 3) –õ–æ–∫–∞–ª—å–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if s.ENV == "local":
        Path(".local_artifacts").mkdir(exist_ok=True)

    # 4) –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Å–µ–∫—Ä–µ—Ç–∞–º
    if s.TELEGRAM_BOT_TOKEN == "SET_ME_IN_ENV":
        print("[EFHC][WARN] TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω.")
    if s.BOT_TOKEN == "SET_ME_IN_ENV":
        # –°—Ç–∞—Ä—ã–π –¥—É–±–ª—å ‚Äî –æ—Å—Ç–∞–≤–∏–ª–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        pass
    if not s.TON_WALLET_ADDRESS:
        print("[EFHC][WARN] TON_WALLET_ADDRESS –Ω–µ –∑–∞–¥–∞–Ω.")
    if not s.NFT_PROVIDER_API_KEY:
        print("[EFHC][WARN] NFT_PROVIDER_API_KEY –Ω–µ –∑–∞–¥–∞–Ω (TonAPI/TonConsole).")

    return s
