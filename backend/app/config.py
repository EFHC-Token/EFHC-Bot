# -----------------------------------------------------------------------------
# üìÇ backend/app/config.py
# -----------------------------------------------------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞ EFHC Bot.
# –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (Neon/PostgreSQL), Telegram-–±–æ—Ç (aiogram),
# CORS, TON/NFT/Jetton, –∏–≥—Ä–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞ (–ø–∞–Ω–µ–ª–∏, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, —É—Ä–æ–≤–Ω–∏),
# –º–∞–≥–∞–∑–∏–Ω (Shop), —Ä–µ—Ñ–µ—Ä–∞–ª—ã, –ª–æ—Ç–µ—Ä–µ–∏, –∑–∞–¥–∞–Ω–∏—è, –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏ WebApp.
# –í—Å–µ —Å–µ–∫—Ä–µ—Ç—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ ENV (.env / Vercel / Render / Neon). –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ
# —É–º–æ–ª—á–∞–Ω–∏—é –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏/–ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏.
# -----------------------------------------------------------------------------

from functools import lru_cache
from pathlib import Path
from typing import Dict, List, Literal, Optional

from pydantic import AnyHttpUrl, BaseSettings, validator


class Settings(BaseSettings):
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ EFHC Bot (Pydantic BaseSettings).
    –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤–æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö: main.py, bot.py, database.py, user_routes.py,
    admin_routes.py, ton_integration.py, scheduler.py, services/* –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ WebApp.
    """

    # -----------------------------------------------------------------
    # –û–ë–©–ï–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
    # -----------------------------------------------------------------
    PROJECT_NAME: str = "EFHC Bot"                     # –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ (UI/–ª–æ–≥–∏/OpenAPI)
    ENV: Literal["local", "dev", "prod"] = "dev"       # –¢–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    API_V1_STR: str = "/api"                           # –ü—Ä–µ—Ñ–∏–∫—Å REST API

    # CORS (–∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞). –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è legacy-—Å—Ç—Ä–æ–∫–∏ –∏ –≤–∞–ª–∏–¥–Ω—ã–µ URL:
    FRONTEND_ORIGINS: List[str] = [                    # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏
        "http://localhost:5173",
        "https://yourfrontend.app",
    ]
    BACKEND_CORS_ORIGINS: List[AnyHttpUrl] = []        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ URL

    @validator("BACKEND_CORS_ORIGINS", pre=True)
    def assemble_cors(cls, v):
        """
        –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å BACKEND_CORS_ORIGINS —Å—Ç—Ä–æ–∫–æ–π –≤ ENV (CSV).
        –°–ø–µ—Ü-–∑–Ω–∞—á–µ–Ω–∏–µ "*" —Ç—Ä–∞–∫—Ç—É–µ—Ç—Å—è –∫–∞–∫ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ (—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏).
        """
        if isinstance(v, str) and v and v != "*":
            return [i.strip() for i in v.split(",")]
        return [] if v in (None, "", "*") else v

    # -----------------------------------------------------------------
    # –ë–ê–ó–ê –î–ê–ù–ù–´–• (PostgreSQL / Neon)
    # -----------------------------------------------------------------
    DATABASE_URL: Optional[str] = None                 # –û—Å–Ω–æ–≤–Ω–æ–π DSN (–∏–∑ ENV)
    DATABASE_URL_LOCAL: str = (                        # –§–æ–ª–±—ç–∫ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
        "postgresql+asyncpg://postgres:postgres@localhost:5432/efhc"
    )

    # –°—Ö–µ–º—ã –ë–î (–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü):
    DB_SCHEMA_CORE: str = "efhc_core"                  # –ë–∞–∑–æ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏/–æ–ø–µ—Ä–∞—Ü–∏–∏
    DB_SCHEMA_ADMIN: str = "efhc_admin"                # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å/—Å–ª—É–∂–µ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    DB_SCHEMA_REFERRAL: str = "efhc_referrals"         # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    DB_SCHEMA_LOTTERY: str = "efhc_lottery"            # –õ–æ—Ç–µ—Ä–µ–∏/—Ä–æ–∑—ã–≥—Ä—ã—à–∏
    DB_SCHEMA_TASKS: str = "efhc_tasks"                # –ó–∞–¥–∞–Ω–∏—è (tasks)

    # –ü—É–ª—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (SQLAlchemy async engine):
    DB_POOL_SIZE: int = 10
    DB_MAX_OVERFLOW: int = 10

    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Vercel ‚Üí Neon (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏):
    EFHC_DB_NEXT_PUBLIC_STACK_PROJECT_ID: Optional[str] = None
    EFHC_DB_PGUSER: Optional[str] = None
    EFHC_DB_POSTGRES_URL_NO_SSL: Optional[str] = None  # –ß–∞—Å—Ç–æ –≤—ã–¥–∞—ë—Ç—Å—è Vercel –±–µ–∑ SSL
    EFHC_DB_POSTGRES_HOST: Optional[str] = None
    EFHC_DB_NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY: Optional[str] = None
    EFHC_DB_NEON_PROJECT_ID: Optional[str] = None

    # -----------------------------------------------------------------
    # TELEGRAM BOT / WEBHOOK (aiogram)
    # -----------------------------------------------------------------
    TELEGRAM_BOT_TOKEN: str = (                        # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∏–∑ ENV –≤ –ø—Ä–æ–¥–µ)
        "8374691236:AAFgTHjtDZOqrkhBApyLiuUwGF5qSWu8C1I"
    )
    TELEGRAM_BOT_USERNAME: Optional[str] = "EnergySolarGameBot"  # –ù–∏–∫ –±–æ—Ç–∞
    TELEGRAM_COMMAND_PREFIX: str = "/"                 # –ü—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥

    ADMIN_TELEGRAM_ID: Optional[int] = 362746228       # –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω (–¥–æ—Å—Ç—É–ø/—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
    BANK_TELEGRAM_ID: int = 362746228                  # –ê–∫–∫–∞—É–Ω—Ç ¬´–±–∞–Ω–∫ EFHC¬ª (–µ–¥–∏–Ω—ã–π —Å—á—ë—Ç)

    TELEGRAM_WEBHOOK_PATH: str = "/tg/webhook"         # –ü—É—Ç—å –≤–µ–±—Ö—É–∫–∞ (–∞–∫—Ç—É–∞–ª—å–Ω—ã–π)
    TELEGRAM_WEBHOOK_PATH_LEGACY: str = "/telegram/webhook"  # –ü—É—Ç—å –≤–µ–±—Ö—É–∫–∞ (–ª–µ–≥–∞—Å–∏)
    TELEGRAM_WEBHOOK_SECRET: Optional[str] = "EFHC_webhook_9pX3"  # –°–µ–∫—Ä–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞

    BASE_PUBLIC_URL: Optional[str] = None              # –ü—É–±–ª–∏—á–Ω—ã–π URL –±—ç–∫–µ–Ω–¥–∞ (–¥–ª—è setWebhook)
    BACKEND_BASE_URL: Optional[str] = None             # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –≤—ã–∑–æ–≤–æ–≤ –±–æ—Ç–∞
    TELEGRAM_WEBAPP_URL: Optional[str] = "https://efhc-bot.vercel.app"  # URL WebApp (Vercel)
    TELEGRAM_POLLING_INTERVAL: float = 1.0             # –ò–Ω—Ç–µ—Ä–≤–∞–ª polling (–ª–æ–∫–∞–ª—å–Ω–æ)

    # –ê–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º:
    BOT_TOKEN: str = "SET_ME_IN_ENV"                   # –°—Ç–∞—Ä–æ–µ –∏–º—è —Ç–æ–∫–µ–Ω–∞
    WEBHOOK_ENABLED: bool = True                       # –§–ª–∞–≥ –≤–∫–ª—é—á–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞ (legacy)
    WEBHOOK_BASE_URL: Optional[str] = None             # –ë–∞–∑–∞ –≤–µ–±—Ö—É–∫–∞ (legacy)
    WEBHOOK_SECRET: Optional[str] = None               # –ê–ª–∏–∞—Å –∫ TELEGRAM_WEBHOOK_SECRET

    # -----------------------------------------------------------------
    # –ê–î–ú–ò–ù–ö–ê / –î–û–°–¢–£–ü
    # -----------------------------------------------------------------
    ADMIN_ENFORCE_NFT: bool = True                     # –¢—Ä–µ–±–æ–≤–∞—Ç—å NFT –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É
    ADMIN_NFT_COLLECTION_URL: str = "https://getgems.io/efhc-nft"  # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –≤ UI
    ADMIN_NFT_ITEM_URL: str = (                        # –ü—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è UI/FAQ
        "https://getgems.io/collection/"
        "EQASPXkEI0NsZQzqkPjk6O_i752LfwSWRFT9WzDc2SJ2zgi0/"
        "EQDvvZCMEs5WIOrdO4r-F9NmsyEU5HyVN0uo1yfAqLG3qyLj"
    )

    # -----------------------------------------------------------------
    # TON / NFT / JETTONS
    # -----------------------------------------------------------------
    TON_WALLET_ADDRESS: str = (                        # –ö–æ—à–µ–ª—ë–∫ TON –ø—Ä–æ–µ–∫—Ç–∞ (Tonkeeper)
        "UQAyCoxmxzb2D6cmlf4M8zWYFYkaQuHbN_dgH-IfraFP8QKW"
    )

    GETGEMS_API_BASE: str = "https://tonapi.io"       # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –±–∞–∑–æ–≤—ã–π API
    TON_API_BASE: str = "https://tonconsole.com"      # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π RPC/REST
    USDT_API_BASE: str = "https://apilist.tronscan.org"  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ USDT (Tron) –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

    VIP_NFT_COLLECTION: str = (                        # –ö–æ–ª–ª–µ–∫—Ü–∏—è NFT —Å VIP/–∞–¥–º–∏–Ω –¥–æ—Å—Ç—É–ø–æ–º
        "EQASPXkEI0NsZQzqkPjk6O_i752LfwSWRFT9WzDc2SJ2zgi0"
    )
    NFT_PROVIDER_BASE_URL: str = "https://tonapi.io"  # –ü—Ä–æ–≤–∞–π–¥–µ—Ä NFT/—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    NFT_PROVIDER_API_KEY: Optional[str] = None         # –ö–ª—é—á –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–∏–∑ ENV)

    EFHC_TOKEN_ADDRESS: str = (                        # Jetton EFHC (–∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞)
        "EQDNcpWf9mXgSPDubDCzvuaX-juL4p8MuUwrQC-36sARRBuw"
    )

    # -----------------------------------------------------------------
    # –ò–ì–†–ê / –≠–ö–û–ù–û–ú–ò–ö–ê (–ø–∞–Ω–µ–ª–∏, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, —É—Ä–æ–≤–Ω–∏)
    # -----------------------------------------------------------------
    EFHC_DECIMALS: int = 3                             # –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è EFHC
    KWH_DECIMALS: int = 3                              # –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–í—Ç¬∑—á
    ROUND_DECIMALS: int = 3                            # –û–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤ UI/–æ—Ç—á—ë—Ç–∞—Ö

    KWH_TO_EFHC_RATE: float = 1.0                      # –ö—É—Ä—Å: 1 EFHC = 1 –∫–í—Ç¬∑—á (legacy –∏–º—è)
    EXCHANGE_RATE_KWH_TO_EFHC: float = 1.0             # –ö—É—Ä—Å: 1 EFHC = 1 –∫–í—Ç¬∑—á (–Ω–æ–≤–æ–µ –∏–º—è)
    EXCHANGE_MIN_KWH: float = 0.001                    # –ú–∏–Ω–∏–º—É–º –≤ –æ–±–º–µ–Ω–Ω–∏–∫–µ

    PANEL_PRICE_EFHC: float = 100.0                    # –¶–µ–Ω–∞ –ø–∞–Ω–µ–ª–∏ (EFHC)
    PANEL_LIFESPAN_DAYS: int = 180                     # –°—Ä–æ–∫ —Å–ª—É–∂–±—ã –ø–∞–Ω–µ–ª–∏ (–¥–Ω–∏)
    MAX_ACTIVE_PANELS_PER_USER: int = 1000             # –õ–∏–º–∏—Ç –ø–∞–Ω–µ–ª–µ–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    DAILY_GEN_BASE_KWH: float = 0.598                  # –ë–∞–∑–æ–≤–∞—è —Å—É—Ç–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    VIP_MULTIPLIER: float = 1.07                       # VIP –±–æ–Ω—É—Å (—Å—Ç—Ä–æ–≥–æ +7%)
    DAILY_GEN_VIP_KWH: float = 0.64                    # –û—Ä–∏–µ–Ω—Ç–∏—Ä –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞ (‚âà 0.598 * 1.07)

    LEVELS: List[Dict[str, str]] = [                   # –£—Ä–æ–≤–Ω–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞/–¥–æ—Å—Ç—É–ø–æ–≤)
        {"idx": "1", "name": "Eco Initiate", "threshold_kwh": "0"},
        {"idx": "2", "name": "Hope Bringer", "threshold_kwh": "100"},
        {"idx": "3", "name": "Energy Seeker", "threshold_kwh": "300"},
        {"idx": "4", "name": "Nature's Voice", "threshold_kwh": "600"},
        {"idx": "5", "name": "Earth Ally", "threshold_kwh": "1000"},
        {"idx": "6", "name": "Climate Warrior", "threshold_kwh": "2000"},
        {"idx": "7", "name": "Green Sentinel", "threshold_kwh": "3500"},
        {"idx": "8", "name": "Planet Defender", "threshold_kwh": "5000"},
        {"idx": "9", "name": "Eco Champion", "threshold_kwh": "7500"},
        {"idx": "10", "name": "Planet Saver", "threshold_kwh": "10000"},
        {"idx": "11", "name": "Green Commander", "threshold_kwh": "15000"},
        {"idx": "12", "name": "Guardian of Earth", "threshold_kwh": "20000"},
    ]

    ACTIVE_USER_FLAG_ON_FIRST_PANEL: bool = True       # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ –ø–∞–Ω–µ–ª–∏

    # -----------------------------------------------------------------
    # –†–ï–§–ï–†–ê–õ–´
    # -----------------------------------------------------------------
    REFERRAL_DIRECT_BONUS_EFHC: float = 0.1            # –ë–æ–Ω—É—Å –∑–∞ –ø—Ä—è–º—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é (EFHC)
    REFERRAL_MILESTONES: Dict[int, float] = {          # –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–µ—Ç–∏
        10: 1.0,
        50: 5.0,
        100: 10.0,
        500: 50.0,
        1000: 100.0,
        10000: 1000.0,
    }

    # -----------------------------------------------------------------
    # –ú–ê–ì–ê–ó–ò–ù (Shop)
    # -----------------------------------------------------------------
    SHOP_DEFAULTS: List[Dict[str, str]] = [            # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –≤ –ë–î)
        {"id": "efhc_10_ton",   "label": "10 EFHC",   "pay_asset": "TON",  "price": "0.8"},
        {"id": "efhc_100_ton",  "label": "100 EFHC",  "pay_asset": "TON",  "price": "8"},
        {"id": "efhc_1000_ton", "label": "1000 EFHC", "pay_asset": "TON",  "price": "80"},
        {"id": "vip_usdt",      "label": "VIP NFT",   "pay_asset": "USDT", "price": "50"},
        # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å/–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:
        {"id": "efhc_10_usdt",   "label": "10 EFHC",   "pay_asset": "USDT", "price": "3"},
        {"id": "efhc_100_usdt",  "label": "100 EFHC",  "pay_asset": "USDT", "price": "30"},
        {"id": "efhc_1000_usdt", "label": "1000 EFHC", "pay_asset": "USDT", "price": "300"},
        {"id": "vip_efhc",       "label": "VIP NFT",   "pay_asset": "EFHC", "price": "250"},
        {"id": "vip_ton",        "label": "VIP NFT",   "pay_asset": "TON",  "price": "20"},
    ]

    # -----------------------------------------------------------------
    # –õ–û–¢–ï–†–ï–ò
    # -----------------------------------------------------------------
    LOTTERY_ENABLED: bool = True                       # –í–∫–ª—é—á–∞–µ—Ç –ø–æ–¥—Å–∏—Å—Ç–µ–º—É –ª–æ—Ç–µ—Ä–µ–π
    LOTTERY_MAX_TICKETS_PER_USER: int = 10             # –õ–∏–º–∏—Ç –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    LOTTERY_TICKET_PRICE_EFHC: float = 1.0             # –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞ –≤ EFHC
    LOTTERY_DEFAULTS: List[Dict[str, str]] = [         # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ª–æ—Ç—ã (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –≤ –ë–î)
        {"id": "lottery_vip",   "title": "NFT VIP",   "target_participants": "500", "prize_type": "VIP_NFT"},
        {"id": "lottery_panel", "title": "1 –ü–∞–Ω–µ–ª—å",  "target_participants": "200", "prize_type": "PANEL"},
    ]

    # -----------------------------------------------------------------
    # –ó–ê–î–ê–ù–ò–Ø (Tasks)
    # -----------------------------------------------------------------
    TASKS_ENABLED: bool = True                         # –í–∫–ª—é—á–∞–µ—Ç –ø–æ–¥—Å–∏—Å—Ç–µ–º—É –∑–∞–¥–∞–Ω–∏–π
    TASK_REWARD_BONUS_EFHC_DEFAULT: float = 1.0        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    TASK_PRICE_USD_DEFAULT: float = 0.3                # –ë–∞–∑–æ–≤–∞—è "—Å—Ç–æ–∏–º–æ—Å—Ç—å" –∑–∞–¥–∞–Ω–∏—è –≤ USD (–¥–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤)

    # -----------------------------------------------------------------
    # –†–ê–°–ü–ò–°–ê–ù–ò–ï (UTC)
    # -----------------------------------------------------------------
    SCHEDULE_NFT_CHECK_UTC: str = "00:00"              # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ NFT (cron)
    SCHEDULE_ENERGY_ACCRUAL_UTC: str = "00:30"         # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏ (cron)

    # -----------------------------------------------------------------
    # –õ–ò–ú–ò–¢–´
    # -----------------------------------------------------------------
    RATE_LIMIT_USER_WRITE_PER_MIN: int = 30            # –ê–Ω—Ç–∏-—Å–ø–∞–º –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    RATE_LIMIT_ADMIN_WRITE_PER_MIN: int = 60           # –õ–∏–º–∏—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

    # -----------------------------------------------------------------
    # –Ø–ó–´–ö / –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–Ø
    # -----------------------------------------------------------------
    SUPPORTED_LANGS: List[str] = ["EN", "RU", "UA", "DE", "FR", "ES", "IT", "PL"]  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
    DEFAULT_LANG: str = "RU"                            # –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # -----------------------------------------------------------------
    # –ü–û–î–°–ö–ê–ó–ö–ò –î–õ–Ø UI / –ü–†–û–ß–ï–ï
    # -----------------------------------------------------------------
    ASSETS_LEVELS_PATH_HINT: str = "frontend/src/assets/levels/level{1..12}.gif"  # –ü—É—Ç—å –∫ –∞—Å—Å–µ—Ç–∞–º —É—Ä–æ–≤–Ω–µ–π

    class Config:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∏ BaseSettings: —á—Ç–µ–Ω–∏–µ .env, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É, –∫–æ–¥–∏—Ä–æ–≤–∫–∞.
        """
        env_file = ".env"
        env_file_encoding = "utf-8"
        case_sensitive = True

    # ---------------------------- –£–¢–ò–õ–ò–¢–´ -----------------------------
    def effective_cors_origins(self) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ CORS-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑ FRONTEND_ORIGINS –∏ BACKEND_CORS_ORIGINS.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ main.py –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORSMiddleware.
        """
        legacy = list(self.FRONTEND_ORIGINS or [])
        strict = [str(u) for u in (self.BACKEND_CORS_ORIGINS or [])]
        merged: List[str] = []
        for x in [*legacy, *strict]:
            if x and x not in merged:
                merged.append(x)
        return merged

    def export_public_frontend_config(self) -> Dict[str, str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤),
        –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ endpoint-–µ –Ω–∞–ø–æ–¥–æ–±–∏–µ GET /api/public/config –¥–ª—è WebApp.
        """
        return {
            "projectName": self.PROJECT_NAME,
            "apiPrefix": self.API_V1_STR,
            "webAppUrl": (self.TELEGRAM_WEBAPP_URL or ""),
            "panelPriceEFHC": str(self.PANEL_PRICE_EFHC),
            "panelLifespanDays": str(self.PANEL_LIFESPAN_DAYS),
            "maxPanelsPerUser": str(self.MAX_ACTIVE_PANELS_PER_USER),
            "vipMultiplier": str(self.VIP_MULTIPLIER),
            "exchangeRateKwhToEfhc": str(self.EXCHANGE_RATE_KWH_TO_EFHC),
            "levelsCount": str(len(self.LEVELS)),
            "lotteryEnabled": str(self.LOTTERY_ENABLED),
            "tasksEnabled": str(self.TASKS_ENABLED),
        }


@lru_cache()
def get_settings() -> Settings:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç singleton –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–æ–π:
    - –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç DATABASE_URL –∏–∑ EFHC_DB_POSTGRES_URL_NO_SSL, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
    - –ü—Ä–∏–≤–æ–¥–∏—Ç DSN –∫ async-–¥—Ä–∞–π–≤–µ—Ä—É "postgresql+asyncpg://".
    - –°–æ–∑–¥–∞—ë—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ ENV=local.
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–ª–∏–∞—Å WEBHOOK_SECRET ‚Üí TELEGRAM_WEBHOOK_SECRET.
    """
    s = Settings()

    # 1) –ï—Å–ª–∏ DATABASE_URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ–±—É–µ–º URL –±–µ–∑ SSL –∏–∑ Vercel/Neon.
    if not s.DATABASE_URL:
        if s.EFHC_DB_POSTGRES_URL_NO_SSL:
            url = s.EFHC_DB_POSTGRES_URL_NO_SSL
            if url.startswith("postgres://"):
                url = url.replace("postgres://", "postgresql+asyncpg://", 1)
            elif url.startswith("postgresql://") and "asyncpg" not in url:
                url = url.replace("postgresql://", "postgresql+asyncpg://", 1)
            s.DATABASE_URL = url
        else:
            s.DATABASE_URL = s.DATABASE_URL_LOCAL

    # 2) –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ DSN –∫ asyncpg, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
    if s.DATABASE_URL.startswith("postgres://"):
        s.DATABASE_URL = s.DATABASE_URL.replace("postgres://", "postgresql+asyncpg://", 1)
    elif s.DATABASE_URL.startswith("postgresql://") and "asyncpg" not in s.DATABASE_URL:
        s.DATABASE_URL = s.DATABASE_URL.replace("postgresql://", "postgresql+asyncpg://", 1)

    # 3) –õ–æ–∫–∞–ª—å–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (ENV=local).
    if s.ENV == "local":
        Path(".local_artifacts").mkdir(exist_ok=True)

    # 4) –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–ª–∏–∞—Å–∞ legacy WEBHOOK_SECRET ‚Üí TELEGRAM_WEBHOOK_SECRET.
    if not s.TELEGRAM_WEBHOOK_SECRET and s.WEBHOOK_SECRET:
        s.TELEGRAM_WEBHOOK_SECRET = s.WEBHOOK_SECRET

    return s
