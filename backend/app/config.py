# üìÇ backend/app/config.py ‚Äî –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# -----------------------------------------------------------------------------
# –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Ñ–∞–π–ª:
#   - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env/–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
#   - –•—Ä–∞–Ω–∏—Ç –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (—Ü–µ–Ω—ã, –º–Ω–æ–∂–∏—Ç–µ–ª–∏, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è).
#   - –í—Å–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–¥–µ—Å—å –ù–ï —Ö–∞—Ä–¥–∫–æ–¥–∏–º ‚Äî —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ .env.
#
# –ö–∞–∫ —Å–≤—è–∑–∞–Ω–æ —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏:
#   - database.py —á–∏—Ç–∞–µ—Ç DATABASE_URL.
#   - models.py/—Å–µ—Ä–≤–∏—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (PANEL_PRICE_EFHC, VIP_MULTIPLIER –∏ –ø—Ä.).
#   - bot.py, scheduler.py, nft_checker.py, admin_routes.py –∏ —Ç.–¥. —á–∏—Ç–∞—é—Ç —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
#
# –ö–∞–∫ –º–µ–Ω—è—Ç—å:
#   - –ó–∞–ø–æ–ª–Ω—è–π—Ç–µ .env –≤ Vercel/Render –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ (—Å–º. .env.example).
#   - –í—Å–µ ¬´–º–∞–≥–∏—á–µ—Å–∫–∏–µ¬ª —á–∏—Å–ª–∞ –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
# -----------------------------------------------------------------------------

from pydantic import BaseSettings, AnyHttpUrl, validator
from typing import List, Optional, Dict, Literal
from functools import lru_cache
from pathlib import Path

class Settings(BaseSettings):
    # ---------------------------------------------------------------------
    # –û–ë–©–ï–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
    # ---------------------------------------------------------------------
    PROJECT_NAME: str = "EFHC Bot"
    ENV: Literal["local", "dev", "prod"] = "dev"
    API_V1_STR: str = "/api"
    BACKEND_CORS_ORIGINS: List[AnyHttpUrl] = []

    @validator("BACKEND_CORS_ORIGINS", pre=True)
    def assemble_cors(cls, v):
        if isinstance(v, str) and v:
            return [i.strip() for i in v.split(",")]
        return v

    # ---------------------------------------------------------------------
    # –ë–ê–ó–ê –î–ê–ù–ù–´–• (Neon / PostgreSQL)
    # ---------------------------------------------------------------------
    # –í–ù–ò–ú–ê–ù–ò–ï: –¥–ª—è async SQLAlchemy —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ—Ñ–∏–∫—Å postgresql+asyncpg://
    # –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥–∞—ë—Ç–µ –æ–±—ã—á–Ω—ã–π postgres:// –∏–∑ Vercel/Neon ‚Äî –º—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏–º –µ–≥–æ –≤ async –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
    DATABASE_URL: str = "postgres://user:pass@host:5432/db?sslmode=require"

    DB_SCHEMA_CORE: str = "efhc_core"
    DB_SCHEMA_REFERRAL: str = "efhc_referrals"
    DB_SCHEMA_ADMIN: str = "efhc_admin"
    DB_SCHEMA_LOTTERY: str = "efhc_lottery"
    DB_SCHEMA_TASKS: str = "efhc_tasks"

    DB_POOL_SIZE: int = 10
    DB_MAX_OVERFLOW: int = 10

    # ---------------------------------------------------------------------
    # TELEGRAM
    # ---------------------------------------------------------------------
    BOT_TOKEN: str = "SET_ME_IN_ENV"
    ADMIN_TELEGRAM_ID: int = 362746228
    TELEGRAM_WEBAPP_URL: Optional[str] = None
    TELEGRAM_POLLING_INTERVAL: float = 1.0
    WEBHOOK_ENABLED: bool = True
    WEBHOOK_SECRET: Optional[str] = None          # –î–ª—è –ø–æ–¥–ø–∏—Å–∏ –≤–µ–±—Ö—É–∫–æ–≤ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
    WEBHOOK_BASE_URL: Optional[str] = None        # https://your-domain.tld

    # ---------------------------------------------------------------------
    # –î–û–°–¢–£–ü –ö –ê–î–ú–ò–ù–ö–ï: NFT + Telegram ID
    # ---------------------------------------------------------------------
    ADMIN_ENFORCE_NFT: bool = True
    # –°–ø–∏—Å–æ–∫ NFT, –¥–∞—é—â–∏—Ö –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø, —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ë–î (—Ç–∞–±–ª–∏—Ü–∞ admin_nft_whitelist),
    # –Ω–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏:
    ADMIN_NFT_COLLECTION_URL: str = "https://getgems.io/efhc-nft"
    # –ü—Ä–∏–º–µ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ NFT —Å –ø—Ä–∞–≤–∞–º–∏ (–±—É–¥–µ—Ç —Ç–∞–∫–∂–µ –≤–Ω–µ—Å—ë–Ω –≤ –ë–î —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å):
    ADMIN_NFT_ITEM_URL: str = (
        "https://getgems.io/collection/EQASPXkEI0NsZQzqkPjk6O_i752LfwSWRFT9WzDc2SJ2zgi0/"
        "EQDvvZCMEs5WIOrdO4r-F9NmsyEU5HyVN0uo1yfAqLG3qyLj"
    )

    # ---------------------------------------------------------------------
    # –°–ï–¢–ò / –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
    # ---------------------------------------------------------------------
    TON_WALLET_ADDRESS: str = "SET_BOT_TON_WALLET"
    CHAIN_TON_ENABLED: bool = True
    CHAIN_USDT_ENABLED: bool = True
    CHAIN_EFHC_ENABLED: bool = True

    # –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã API ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã/–∫–ª—é—á–∏
    GETGEMS_API_BASE: str = "https://tonapi.io"           # –ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ NFT
    TON_API_BASE: str = "https://toncenter.com/api/v2/jsonRPC"
    USDT_API_BASE: str = "https://api.tronscan.org"       # –ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ USDT-TRC20
    EFHC_TOKEN_ADDRESS: Optional[str] = None              # –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è

    # ---------------------------------------------------------------------
    # –ò–ì–†–û–í–ê–Ø –≠–ö–û–ù–û–ú–ò–ö–ê
    # ---------------------------------------------------------------------
    EFHC_DECIMALS: int = 3
    KWH_DECIMALS: int = 3
    ROUND_DECIMALS: int = 3

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: 1 –∫–í—Ç = 1 EFHC (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –∏–¥–µ–æ–ª–æ–≥–∏–µ–π –ø—Ä–æ–µ–∫—Ç–∞)
    KWH_TO_EFHC_RATE: float = 1.0
    EXCHANGE_MIN_KWH: float = 0.001

    # –ü–∞–Ω–µ–ª–∏
    PANEL_PRICE_EFHC: float = 100.0
    PANEL_LIFESPAN_DAYS: int = 180
    MAX_ACTIVE_PANELS_PER_USER: int = 1000
    DAILY_GEN_BASE_KWH: float = 0.598

    # VIP
    VIP_MULTIPLIER: float = 1.07
    DAILY_GEN_VIP_KWH: float = 0.64   # —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å VIP NFT)

    # –†–µ—Ñ–µ—Ä–∞–ª–∫–∞
    ACTIVE_USER_FLAG_ON_FIRST_PANEL: bool = True
    REFERRAL_DIRECT_BONUS_EFHC: float = 0.1
    REFERRAL_MILESTONES: Dict[int, float] = {
        10: 1.0,
        100: 10.0,
        1000: 100.0,
        3000: 300.0,
        10000: 1000.0,
    }

    # –õ–æ—Ç–µ—Ä–µ–∏/–†–æ–∑—ã–≥—Ä—ã—à–∏
    LOTTERY_ENABLED: bool = True
    LOTTERY_MAX_TICKETS_PER_USER: int = 10
    LOTTERY_TICKET_PRICE_EFHC: float = 1.0

    # –ó–∞–¥–∞–Ω–∏—è ‚Üí –±–æ–Ω—É—Å–Ω—ã–µ EFHC
    TASKS_ENABLED: bool = True
    TASK_REWARD_BONUS_EFHC_DEFAULT: float = 1.0  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 bonus EFHC
    TASK_PRICE_USD_DEFAULT: float = 0.3          # —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è (–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ)

    # –ú–∞–≥–∞–∑–∏–Ω (–¥–µ—Ñ–æ–ª—Ç ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ –∞–¥–º–∏–Ω–∫–∏)
    SHOP_DEFAULTS: List[Dict[str, str]] = [
        {"id": "efhc_10_ton",   "label": "10 EFHC",   "pay_asset": "TON",  "price": "0.8"},
        {"id": "efhc_100_ton",  "label": "100 EFHC",  "pay_asset": "TON",  "price": "8"},
        {"id": "efhc_1000_ton", "label": "1000 EFHC", "pay_asset": "TON",  "price": "80"},
        {"id": "efhc_10_usdt",  "label": "10 EFHC",   "pay_asset": "USDT", "price": "3"},
        {"id": "efhc_100_usdt", "label": "100 EFHC",  "pay_asset": "USDT", "price": "30"},
        {"id": "efhc_1000_usdt","label": "1000 EFHC", "pay_asset": "USDT", "price": "300"},
        {"id": "vip_efhc",      "label": "VIP NFT",   "pay_asset": "EFHC", "price": "250"},
        {"id": "vip_ton",       "label": "VIP NFT",   "pay_asset": "TON",  "price": "20"},
        {"id": "vip_usdt",      "label": "VIP NFT",   "pay_asset": "USDT", "price": "50"},
    ]

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (UTC)
    SCHEDULE_NFT_CHECK_UTC: str = "00:00"
    SCHEDULE_ENERGY_ACCRUAL_UTC: str = "00:30"

    # –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å
    SUPPORTED_LANGS: List[str] = ["EN", "RU", "UA", "DE", "FR", "ES", "IT", "PL"]
    DEFAULT_LANG: str = "RU"

    class Config:
        case_sensitive = True
        env_file = ".env"
        env_file_encoding = "utf-8"

@lru_cache()
def get_settings() -> Settings:
    settings = Settings()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π postgres:// –≤ async postgresql+asyncpg:// –Ω–∞ –ª–µ—Ç—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if settings.DATABASE_URL.startswith("postgres://"):
        settings.DATABASE_URL = settings.DATABASE_URL.replace("postgres://", "postgresql+asyncpg://", 1)

    if settings.BOT_TOKEN == "SET_ME_IN_ENV":
        print("[EFHC][WARN] BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")

    if settings.ENV == "local":
        Path(".local_artifacts").mkdir(exist_ok=True)

    return settings
