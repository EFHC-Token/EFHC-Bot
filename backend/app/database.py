# üìÇ backend/app/database.py ‚Äî –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î, –ø—É–ª, —Å–µ—Å—Å–∏–∏, —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º
# -----------------------------------------------------------------------------
# –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Ñ–∞–π–ª:
#   ‚Ä¢ –°–æ–∑–¥–∞—ë—Ç async-–¥–≤–∏–∂–æ–∫ SQLAlchemy (PostgreSQL/Neon) —Å –¥—Ä–∞–π–≤–µ—Ä–æ–º asyncpg.
#   ‚Ä¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω—É–∂–Ω—ã–µ —Å—Ö–µ–º—ã (efhc_core, efhc_admin, efhc_referrals, efhc_lottery, efhc_tasks).
#   ‚Ä¢ –û—Ç–¥–∞—ë—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å get_session() –¥–ª—è FastAPI-—Ä–æ—É—Ç–æ–≤/—Å–µ—Ä–≤–∏—Å–æ–≤.
#   ‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç —É—Ç–∏–ª–∏—Ç—ã: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –º—è–≥–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Alembic (–∑–∞–≥–ª—É—à–∫–∞).
#
# –ö–∞–∫ —Å–≤—è–∑–∞–Ω–æ —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏:
#   ‚Ä¢ config.py ‚Äî –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∏–º—ë–Ω —Å—Ö–µ–º.
#   ‚Ä¢ models.py ‚Äî –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Å __table_args__={"schema": "<...>"} (–∏—Å–ø–æ–ª—å–∑—É—é—Ç —ç—Ç–∏ —Å—Ö–µ–º—ã).
#   ‚Ä¢ main.py ‚Äî –≤—ã–∑—ã–≤–∞–µ—Ç on_startup_init_db() –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞/—Ñ—É–Ω–∫—Ü–∏–∏ Vercel.
#
# –ö–∞–∫ –º–µ–Ω—è—Ç—å:
#   ‚Ä¢ –ï—Å–ª–∏ DATABASE_URL –ø—É—Å—Ç–æ–π ‚Äî —É–ø–∞–¥—ë–º –Ω–∞ DATABASE_URL_LOCAL –∏–∑ config.py.
#   ‚Ä¢ –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –ª–æ–≥ SQL ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DEBUG=true –≤ .env (–∏ —á–∏—Ç–∞–π—Ç–µ –µ–≥–æ –≤ config.py –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏).
#   ‚Ä¢ –î–ª—è Alembic: –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –≤ run_alembic_migrations().
# -----------------------------------------------------------------------------

from __future__ import annotations

import asyncio
from contextlib import asynccontextmanager
from typing import AsyncGenerator, Optional

from sqlalchemy.ext.asyncio import (
    AsyncEngine,
    AsyncSession,
    create_async_engine,
)
from sqlalchemy.orm import sessionmaker
from sqlalchemy import text

from .config import get_settings

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–∏–Ω–≥–ª—Ç–æ–Ω—ã (—Å–æ–∑–¥–∞—é—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å/–≤–æ—Ä–∫–µ—Ä)
_engine: Optional[AsyncEngine] = None
_SessionFactory: Optional[sessionmaker] = None


def _build_database_url() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π async URL –¥–ª—è SQLAlchemy —Å –¥—Ä–∞–π–≤–µ—Ä–æ–º asyncpg.
    - –ï—Å–ª–∏ DATABASE_URL –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –ø—É—Å—Ç–æ–π ‚Üí –±–µ—Ä—ë–º –ª–æ–∫–∞–ª—å–Ω—ã–π DATABASE_URL_LOCAL.
    - –ï—Å–ª–∏ URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'postgres://' ‚Üí –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 'postgresql+asyncpg://'
      (—á–∞—Å—Ç—ã–π —Å–ª—É—á–∞–π —Å Neon/Vercel).
    """
    settings = get_settings()
    url = settings.DATABASE_URL or settings.DATABASE_URL_LOCAL

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ async-—Ñ–æ—Ä–º–∞—Ç—É –¥–ª—è SQLAlchemy
    if url.startswith("postgres://"):
        url = url.replace("postgres://", "postgresql+asyncpg://", 1)
    elif url.startswith("postgresql://"):
        # —Ç–æ–∂–µ –æ–∫, –Ω–æ –Ω–∞–º –Ω—É–∂–µ–Ω –∏–º–µ–Ω–Ω–æ –¥—Ä–∞–π–≤–µ—Ä asyncpg
        url = url.replace("postgresql://", "postgresql+asyncpg://", 1)

    return url


def _get_pool_sizes() -> tuple[int, int]:
    """
    –ß–∏—Ç–∞–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –ø—É–ª–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ù–∞ Vercel serverless –±–æ–ª—å—à–∏—Ö –ø—É–ª–æ–≤ –Ω–µ –Ω–∞–¥–æ,
    –Ω–æ –¥–ª—è –ª–æ–∫–∞–ª–∫–∏/Render —á–∏—Å–ª–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã—à–µ.
    """
    s = get_settings()
    return (s.DB_POOL_SIZE, s.DB_MAX_OVERFLOW)


def get_engine() -> AsyncEngine:
    """
    –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AsyncEngine. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤–µ–∑–¥–µ,
    –≥–¥–µ –Ω—É–∂–µ–Ω engine (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º, health-check, –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ —Ç.–¥.).
    """
    global _engine, _SessionFactory

    if _engine is not None:
        return _engine

    settings = get_settings()
    db_url = _build_database_url()
    pool_size, max_overflow = _get_pool_sizes()

    # echo=False ‚Äî —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –ª–æ–≥–∞–º–∏. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–µ–±–∞–≥ SQL, –≤–∫–ª—é—á–∞–π—Ç–µ echo=True.
    # pool_pre_ping=True ‚Äî –ø–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ –¥–æ–ª–≥–∏—Ö –ø—Ä–æ—Å—Ç–æ—è—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
    _engine = create_async_engine(
        db_url,
        echo=False,
        pool_pre_ping=True,
        pool_size=pool_size,
        max_overflow=max_overflow,
        future=True,
    )

    # –§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π (autoflush=False: –∫–æ–Ω—Ç—Ä–æ–ª—å —Ä—É—á–Ω–æ–π; expire_on_commit=False: –æ–±—ä–µ–∫—Ç—ã –∂–∏–≤—ã –ø–æ—Å–ª–µ commit)
    _SessionFactory = sessionmaker(
        bind=_engine,
        class_=AsyncSession,
        autoflush=False,
        expire_on_commit=False,
    )

    return _engine


@asynccontextmanager
async def session_scope() -> AsyncGenerator[AsyncSession, None]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä ¬´—Å–µ—Å—Å–∏—è –∫–∞–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è¬ª.
    –ü—Ä–∏–º–µ—Ä:
        async with session_scope() as db:
            ... —Ä–∞–±–æ—Ç–∞ —Å db ...
    """
    if _SessionFactory is None:
        get_engine()  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º engine –∏ —Ñ–∞–±—Ä–∏–∫—É, –µ—Å–ª–∏ –µ—â—ë –Ω–µ

    assert _SessionFactory is not None, "Session factory not initialized"
    session: AsyncSession = _SessionFactory()
    try:
        yield session
        await session.commit()
    except Exception:
        await session.rollback()
        raise
    finally:
        await session.close()


async def get_session() -> AsyncGenerator[AsyncSession, None]:
    """
    FastAPI-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –∏–Ω—ä–µ–∫—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã/—Å–µ—Ä–≤–∏—Å—ã.
    –ü—Ä–∏–º–µ—Ä:
        @router.get("/users")
        async def list_users(db: AsyncSession = Depends(get_session)):
            ...
    """
    if _SessionFactory is None:
        get_engine()

    assert _SessionFactory is not None, "Session factory not initialized"
    session: AsyncSession = _SessionFactory()
    try:
        yield session
        await session.commit()
    except Exception:
        await session.rollback()
        raise
    finally:
        await session.close()


async def ensure_schemas(engine: Optional[AsyncEngine] = None) -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ö–µ–º—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç.
    –°–ø–∏—Å–æ–∫ —Å—Ö–µ–º –±–µ—Ä—ë—Ç—Å—è –∏–∑ config.py (DB_SCHEMA_*).
    –í–∞–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è/–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü.
    """
    settings = get_settings()
    engine = engine or get_engine()

    schemas = [
        settings.DB_SCHEMA_CORE,
        settings.DB_SCHEMA_ADMIN,
        settings.DB_SCHEMA_REFERRAL,
        settings.DB_SCHEMA_LOTTERY,
        settings.DB_SCHEMA_TASKS,
    ]

    create_sql = "; ".join([f'CREATE SCHEMA IF NOT EXISTS "{sch}"' for sch in schemas])

    async with engine.begin() as conn:
        await conn.execute(text(create_sql))


async def set_default_search_path(engine: Optional[AsyncEngine] = None) -> None:
    """
    (–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —à–∞–≥) –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç search_path –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è SQL-—Å–∫—Ä–∏–ø—Ç–æ–≤.
    –ú–æ–¥–µ–ª–∏ —É –Ω–∞—Å –∏ —Ç–∞–∫ –∏—Å–ø–æ–ª—å–∑—É—é—Ç schema=..., –Ω–æ –ø–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ –≥–æ–ª—ã—Ö SQL.
    """
    settings = get_settings()
    engine = engine or get_engine()

    # –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω ‚Äî —Å–Ω–∞—á–∞–ª–∞ core, –∑–∞—Ç–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ, –≤ –∫–æ–Ω—Ü–µ public
    search_path = ",".join(
        [
            settings.DB_SCHEMA_CORE,
            settings.DB_SCHEMA_ADMIN,
            settings.DB_SCHEMA_REFERRAL,
            settings.DB_SCHEMA_LOTTERY,
            settings.DB_SCHEMA_TASKS,
            "public",
        ]
    )
    async with engine.begin() as conn:
        await conn.execute(text(f'SET search_path TO {search_path}'))


async def check_db_connection(engine: Optional[AsyncEngine] = None) -> bool:
    """
    –ü—Ä–æ—Å—Ç–æ–π health-check (SELECT 1). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.
    """
    engine = engine or get_engine()
    try:
        async with engine.connect() as conn:
            await conn.execute(text("SELECT 1"))
        return True
    except Exception as e:
        # –ú–æ–∂–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å e, –Ω–æ –∑–¥–µ—Å—å —Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ –Ω–µ —à—É–º–∏–º
        return False


async def run_alembic_migrations() -> None:
    """
    –ó–∞–≥–ª—É—à–∫–∞ –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ Alembic.
    –ù–∞ –ø—Ä–æ–¥–µ/CI –≤—ã –æ–±—ã—á–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π:
        alembic upgrade head
    –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Äî –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ –∑–¥–µ—Å—å –≤—ã–∑–æ–≤ Alembic.
    """
    # –ü—Ä–∏–º–µ—Ä (–ø—Å–µ–≤–¥–æ–∫–æ–¥):
    # from alembic import command
    # from alembic.config import Config as AlembicConfig
    # cfg = AlembicConfig("alembic.ini")
    # command.upgrade(cfg, "head")
    pass


async def on_startup_init_db() -> None:
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ main.py –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è/—Ñ—É–Ω–∫—Ü–∏–∏:
        app.add_event_handler("startup", on_startup_init_db)
    –î–µ–ª–∞–µ—Ç:
      1) –ª–µ–Ω–∏–≤—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–≤–∏–∂–∫–∞/—Å–µ—Å—Å–∏–∏,
      2) —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º (idempotent),
      3) (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —É—Å—Ç–∞–Ω–æ–≤–∫—É search_path,
      4) (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∑–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π,
      5) health-check.
    """
    engine = get_engine()
    await ensure_schemas(engine)
    # –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ —É–¥–æ–±–Ω–æ:
    await set_default_search_path(engine)
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Alembic –ø–æ –∂–µ–ª–∞–Ω–∏—é:
    # await run_alembic_migrations()
    ok = await check_db_connection(engine)
    if not ok:
        # –Ø–≤–Ω–æ –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª–∞ –∏–Ω—Å—Ç–∞–Ω—Å/—Ñ—É–Ω–∫—Ü–∏—é
        raise RuntimeError("Database connection failed during startup.")


async def on_shutdown_dispose() -> None:
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–≤–∏–∂–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    global _engine
    if _engine is not None:
        await _engine.dispose()
        _engine = None


# ------------------------------------------------------------
# –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç: python -m backend.app.database
# (–ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º)
# ------------------------------------------------------------
if __name__ == "__main__":
    async def _selftest():
        print("[EFHC][DB] Initializing...")
        await on_startup_init_db()
        ok = await check_db_connection()
        print(f"[EFHC][DB] Health check: {'OK' if ok else 'FAIL'}")

    asyncio.run(_selftest())
