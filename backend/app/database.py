# üìÇ backend/app/database.py ‚Äî –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î, –ø—É–ª, —Å–µ—Å—Å–∏–∏, —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º
# -----------------------------------------------------------------------------
# –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
#   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ SQLAlchemy (PostgreSQL/Neon) —Å –¥—Ä–∞–π–≤–µ—Ä–æ–º asyncpg.
#   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫—É –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (pool_size, max_overflow, pre_ping).
#   ‚Ä¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ö–µ–º –ë–î (efhc_core, efhc_admin, efhc_referrals, efhc_lottery, efhc_tasks).
#   ‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–π –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è FastAPI:
#       - AsyncSessionLocal()   ‚Äî —Ñ–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π, "as is" (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –≤–∞—à–∏–º –∫–æ–¥–æ–º).
#       - get_session()         ‚Äî Depends –¥–ª—è —Ä–æ—É—Ç–æ–≤/—Å–µ—Ä–≤–∏—Å–æ–≤.
#       - session_scope()       ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
#   ‚Ä¢ –£—Ç–∏–ª–∏—Ç—ã –∑–∞–ø—É—Å–∫–∞: ensure_schemas, set_default_search_path, health-check, –∑–∞–≥–ª—É—à–∫–∞ Alembic.
#   ‚Ä¢ Startup/Shutdown hooks: on_startup_init_db(), on_shutdown_dispose().
#
# –í–∑–∞–∏–º–æ—Å–≤—è–∑–∏:
#   ‚Ä¢ config.py ‚Äî –∏—Å—Ç–æ—á–Ω–∏–∫: DATABASE_URL, *SCHEMA*, –ø—É–ª, DEBUG –∏ —Ç.–¥.
#   ‚Ä¢ models.py ‚Äî –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏, –æ–±—ã—á–Ω–æ —Å __table_args__={"schema": "<...>"}.
#   ‚Ä¢ main.py ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–∑—ã–≤–∞—Ç—å on_startup_init_db() –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
#   ‚Ä¢ –î—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏ (watcher/—Ç–æ–Ω –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è) –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AsyncSessionLocal() –Ω–∞–ø—Ä—è–º—É—é.
#
# –ü–†–ò–ú–ï–ß–ê–ù–ò–Ø:
#   ‚Ä¢ –ï—Å–ª–∏ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ DATABASE_URL –ø—É—Å—Ç–æ–π ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º DATABASE_URL_LOCAL –∏–∑ config.py.
#   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º "postgres://..." ‚Üí "postgresql+asyncpg://..." (—á–∞—Å—Ç–æ –≤ Vercel/Neon).
#   ‚Ä¢ –î–ª—è serverless –æ–∫—Ä—É–∂–µ–Ω–∏–π –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å pool_size (–º–µ–Ω—å—à–µ ‚Äî –ª—É—á—à–µ).
#   ‚Ä¢ –ú–∏–≥—Ä–∞—Ü–∏–∏ Alembic –æ–±—ã—á–Ω–æ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π CI/CD; –∑–¥–µ—Å—å –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞.
# -----------------------------------------------------------------------------

from __future__ import annotations

import asyncio
from contextlib import asynccontextmanager
from typing import AsyncGenerator, Optional

from sqlalchemy.ext.asyncio import (
    AsyncEngine,
    AsyncSession,
    create_async_engine,
)
from sqlalchemy.orm import sessionmaker
from sqlalchemy import text

from .config import get_settings

# -----------------------------------------------------------------------------
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–∏–Ω–≥–ª—Ç–æ–Ω—ã (—Å–æ–∑–¥–∞—é—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å/–≤–æ—Ä–∫–µ—Ä)
# -----------------------------------------------------------------------------
_engine: Optional[AsyncEngine] = None
_SessionFactory: Optional[sessionmaker] = None

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ä–∞–Ω–Ω–∏–º –∫–æ–¥–æ–º: –∏–Ω–æ–≥–¥–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ AsyncSessionLocal –Ω–∞–ø—Ä—è–º—É—é
# (–Ω–∞–ø—Ä–∏–º–µ—Ä, "from .database import AsyncSessionLocal" –∏ –ø–æ—Ç–æ–º "async with AsyncSessionLocal() as db:")
AsyncSessionLocal: Optional[sessionmaker] = None


def _build_database_url() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π async URL –¥–ª—è SQLAlchemy —Å –¥—Ä–∞–π–≤–µ—Ä–æ–º asyncpg.
    –õ–æ–≥–∏–∫–∞:
      1) –ë–µ—Ä—ë–º DATABASE_URL –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (config.py). –ï—Å–ª–∏ –ø—É—Å—Ç–æ–π ‚Üí DATABASE_URL_LOCAL.
      2) –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É –¥–ª—è asyncpg:
           - postgres://            ‚Üí postgresql+asyncpg://
           - postgresql://          ‚Üí postgresql+asyncpg://
         (–Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –±–∞–∑–∞ –æ—Ç–¥–∞—ë—Ç –∏–º–µ–Ω–Ω–æ postgres://)
    """
    s = get_settings()
    url = s.DATABASE_URL or getattr(s, "DATABASE_URL_LOCAL", "")

    if not url:
        # –Ø–≤–Ω–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω—ã –Ω–∏ –æ—Å–Ω–æ–≤–Ω–∞—è, –Ω–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
        # –õ—É—á—à–µ —É–ø–∞—Å—Ç—å —Ä–∞–Ω—å—à–µ, —á–µ–º –ª–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–æ–∑–∂–µ.
        raise RuntimeError(
            "DATABASE_URL is empty and DATABASE_URL_LOCAL is not provided in settings."
        )

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É asyncpg
    if url.startswith("postgres://"):
        url = url.replace("postgres://", "postgresql+asyncpg://", 1)
    elif url.startswith("postgresql://") and "asyncpg" not in url:
        url = url.replace("postgresql://", "postgresql+asyncpg://", 1)

    return url


def _get_pool_sizes() -> tuple[int, int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (pool_size, max_overflow) –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
      ‚Ä¢ –ù–∞ Vercel serverless –±–æ–ª—å—à–∏—Ö –ø—É–ª–æ–≤ –Ω–µ –Ω—É–∂–Ω–æ (–¥–∞–∂–µ 1-2).
      ‚Ä¢ –ù–∞ Render/VPS/–ª–æ–∫–∞–ª—å–Ω–æ ‚Äî –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ.
    """
    s = get_settings()
    return (s.DB_POOL_SIZE, s.DB_MAX_OVERFLOW)


def get_engine() -> AsyncEngine:
    """
    –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AsyncEngine + —Ñ–∞–±—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–π.
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤–µ–∑–¥–µ, –≥–¥–µ –Ω—É–∂–µ–Ω engine (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º, health-check, –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ —Ç.–¥.).
    """
    global _engine, _SessionFactory, AsyncSessionLocal

    if _engine is not None:
        return _engine

    s = get_settings()
    db_url = _build_database_url()
    pool_size, max_overflow = _get_pool_sizes()

    # echo = s.DEBUG –¥–ª—è —É–¥–æ–±–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ SQL (–≤ –ø—Ä–æ–¥–µ –≤—ã–∫–ª—é—á–∞–µ–º).
    _engine = create_async_engine(
        db_url,
        echo=bool(getattr(s, "DEBUG", False)),
        pool_pre_ping=True,   # –ø–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ –¥–æ–ª–≥–∏—Ö –ø—Ä–æ—Å—Ç–æ—è—Ö; –æ–∂–∏–≤–ª—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        pool_size=pool_size,
        max_overflow=max_overflow,
        future=True,
    )

    # –§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π (autoflush=False ‚Äî —Ä—É—á–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å flush; expire_on_commit=False ‚Äî –æ–±—ä–µ–∫—Ç—ã –∂–∏–≤—ã –ø–æ—Å–ª–µ commit)
    _SessionFactory = sessionmaker(
        bind=_engine,
        class_=AsyncSession,
        autoflush=False,
        expire_on_commit=False,
    )

    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
    AsyncSessionLocal = _SessionFactory

    return _engine


@asynccontextmanager
async def session_scope() -> AsyncGenerator[AsyncSession, None]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä ¬´—Å–µ—Å—Å–∏—è –∫–∞–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è¬ª:
        async with session_scope() as db:
            ... —Ä–∞–±–æ—Ç–∞ —Å db ...
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç commit/rollback/close.
    –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á, —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏–ª–∏ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
    """
    if _SessionFactory is None:
        get_engine()  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º engine –∏ —Ñ–∞–±—Ä–∏–∫—É, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç

    assert _SessionFactory is not None, "Session factory is not initialized"
    session: AsyncSession = _SessionFactory()
    try:
        yield session
        await session.commit()
    except Exception:
        await session.rollback()
        raise
    finally:
        await session.close()


async def get_session() -> AsyncGenerator[AsyncSession, None]:
    """
    FastAPI-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –∏–Ω—ä–µ–∫—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã/—Å–µ—Ä–≤–∏—Å—ã.
    –ü—Ä–∏–º–µ—Ä:
        @router.get("/users")
        async def list_users(db: AsyncSession = Depends(get_session)):
            ...
    –ù–∞ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –µ—ë –∑–∞–≤–µ—Ä—à–∞–µ—Ç (commit/rollback/close).
    """
    if _SessionFactory is None:
        get_engine()

    assert _SessionFactory is not None, "Session factory is not initialized"
    session: AsyncSession = _SessionFactory()
    try:
        yield session
        await session.commit()
    except Exception:
        await session.rollback()
        raise
    finally:
        await session.close()


async def ensure_schemas(engine: Optional[AsyncEngine] = None) -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ **—Å—Ö–µ–º—ã** –≤ Postgres, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç.
    –°–ø–∏—Å–æ–∫ —Å—Ö–µ–º –±–µ—Ä—ë—Ç—Å—è –∏–∑ config.py (DB_SCHEMA_*).
    –í–∞–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è/–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü.
    """
    s = get_settings()
    engine = engine or get_engine()

    schemas = [
        s.DB_SCHEMA_CORE,
        s.DB_SCHEMA_ADMIN,
        s.DB_SCHEMA_REFERRAL,
        s.DB_SCHEMA_LOTTERY,
        s.DB_SCHEMA_TASKS,
    ]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º (idempotent)
    create_sql = "; ".join([f'CREATE SCHEMA IF NOT EXISTS "{sch}"' for sch in schemas])

    async with engine.begin() as conn:
        await conn.execute(text(create_sql))


async def set_default_search_path(engine: Optional[AsyncEngine] = None) -> None:
    """
    (–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —à–∞–≥) –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç search_path –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –≥–æ–ª—ã—Ö SQL-—Å–∫—Ä–∏–ø—Ç–æ–≤.
    –ú–æ–¥–µ–ª–∏ —É –Ω–∞—Å –∏ —Ç–∞–∫ –∏—Å–ø–æ–ª—å–∑—É—é—Ç schema=..., –Ω–æ search_path –±—ã–≤–∞–µ—Ç —É–¥–æ–±–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä –≤ raw SQL).
    –í–∞–∂–Ω–æ: –ø–æ—Ä—è–¥–æ–∫ —Å—Ö–µ–º –≤ search_path –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü/—Ñ—É–Ω–∫—Ü–∏–π.
    """
    s = get_settings()
    engine = engine or get_engine()

    # –ü–æ—Ä—è–¥–æ–∫: —Å–Ω–∞—á–∞–ª–∞ core, –∑–∞—Ç–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ, –≤ –∫–æ–Ω—Ü–µ public
    search_path = ",".join(
        [
            s.DB_SCHEMA_CORE,
            s.DB_SCHEMA_ADMIN,
            s.DB_SCHEMA_REFERRAL,
            s.DB_SCHEMA_LOTTERY,
            s.DB_SCHEMA_TASKS,
            "public",
        ]
    )
    async with engine.begin() as conn:
        await conn.execute(text(f"SET search_path TO {search_path}"))


async def check_db_connection(engine: Optional[AsyncEngine] = None) -> bool:
    """
    –ü—Ä–æ—Å—Ç–æ–π health-check (SELECT 1). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.
    –£–¥–æ–±–Ω–æ –¥–µ—Ä–≥–∞—Ç—å –≤ on_startup, readiness probes –∏ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–µ.
    """
    engine = engine or get_engine()
    try:
        async with engine.connect() as conn:
            await conn.execute(text("SELECT 1"))
        return True
    except Exception:
        # –ó–¥–µ—Å—å —Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º stacktrace, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –ª–æ–≥–∏ —Å—Ç–∞—Ä—Ç–∞.
        # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
        return False


async def run_alembic_migrations() -> None:
    """
    –ó–∞–≥–ª—É—à–∫–∞ –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ Alembic.
    –ù–∞ –ø—Ä–æ–¥–µ/CI –≤—ã –æ–±—ã—á–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π:
        alembic upgrade head
    –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Äî –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ –∑–¥–µ—Å—å Alembic.
    –ü—Ä–∏–º–µ—Ä (–ø—Å–µ–≤–¥–æ–∫–æ–¥):
        from alembic import command
        from alembic.config import Config as AlembicConfig
        cfg = AlembicConfig("alembic.ini")
        command.upgrade(cfg, "head")
    """
    pass


async def on_startup_init_db() -> None:
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ main.py –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è/—Ñ—É–Ω–∫—Ü–∏–∏:
        app.add_event_handler("startup", on_startup_init_db)
    –î–µ–ª–∞–µ—Ç:
      1) –õ–µ–Ω–∏–≤—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–≤–∏–∂–∫–∞/—Ñ–∞–±—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–π (get_engine()).
      2) –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ö–µ–º (ensure_schemas()) ‚Äî idempotent.
      3) (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç search_path (set_default_search_path()).
      4) (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ Alembic (run_alembic_migrations()).
      5) –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (check_db_connection()) ‚Äî –±—Ä–æ—Å–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ—É—Å–ø–µ—Ö–µ.
    """
    engine = get_engine()
    await ensure_schemas(engine)
    await set_default_search_path(engine)
    # –ü–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç—Å—é–¥–∞:
    # await run_alembic_migrations()
    ok = await check_db_connection(engine)
    if not ok:
        # –Ø–≤–Ω–æ –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª–∞ –∏–Ω—Å—Ç–∞–Ω—Å/—Ñ—É–Ω–∫—Ü–∏—é
        raise RuntimeError("Database connection failed during startup.")


async def on_shutdown_dispose() -> None:
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–≤–∏–∂–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –í–∞–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –≤ —Å–æ–±—ã—Ç–∏–∏ shutdown, —á—Ç–æ–±—ã –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
    """
    global _engine, _SessionFactory, AsyncSessionLocal
    if _engine is not None:
        await _engine.dispose()
        _engine = None
    _SessionFactory = None
    AsyncSessionLocal = None


# -----------------------------------------------------------------------------
# –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–∞–º–æ—Ç–µ—Å—Ç: python -m backend.app.database
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º –∏ health-check.
# -----------------------------------------------------------------------------
if __name__ == "__main__":
    async def _selftest():
        print("[EFHC][DB] Initializing...")
        await on_startup_init_db()
        ok = await check_db_connection()
        print(f"[EFHC][DB] Health check: {'OK' if ok else 'FAIL'}")

        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è manual session (–∫–∞–∫ –¥–µ–ª–∞–µ—Ç –≤–∞—à watcher):
        if AsyncSessionLocal is not None:
            async with AsyncSessionLocal() as db:
                # –õ—é–±–æ–π –ø—Ä–æ—Å—Ç–µ–π—à–∏–π –∑–∞–ø—Ä–æ—Å
                await db.execute(text("SELECT 1"))
                await db.commit()
                print("[EFHC][DB] Manual session: OK")

    asyncio.run(_selftest())
