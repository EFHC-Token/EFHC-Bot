"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ EFHC –¥–ª—è –≤—Å–µ–≥–æ –±–æ—Ç–∞.

‚ö° –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
1. –í—Å–µ EFHC (–æ–±—ã—á–Ω—ã–µ –∏ –±–æ–Ω—É—Å–Ω—ã–µ) —Å—É—â–µ—Å—Ç–≤—É—é—Ç —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ ‚Äî 
   —á–µ—Ä–µ–∑ –ë–∞–Ω–∫ EFHC (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å—á—ë—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞).
2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç "—Å–æ–∑–¥–∞–≤–∞—Ç—å" –∏–ª–∏ "—Ç–µ—Ä—è—Ç—å" EFHC –≤–Ω–µ –±–∞–Ω–∫–∞:
   - –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é = —Å–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–Ω–∫–∞.
   - –°–ø–∏—Å–∞–Ω–∏–µ EFHC —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è = –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞ –±–∞–Ω–∫.
3. –î–ª—è –±–æ–Ω—É—Å–Ω—ã—Ö EFHC ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ balances.bonus.
   –≠—Ç–∏ –º–æ–Ω–µ—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –∏ –º–æ–≥—É—Ç —Ç—Ä–∞—Ç–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–∞–Ω–µ–ª–∏.
4. –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤ efhc_transfers_log:
   (from_id, to_id, amount, reason, created_at).
5. –ú–∏–Ω—Ç –∏ —Å–∂–∏–≥–∞–Ω–∏–µ EFHC –≤–æ–∑–º–æ–∂–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
"""

from decimal import Decimal, ROUND_DOWN
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import insert

from app.models import Balances, EFHCTransfersLog
from app.config import settings

# üîπ ID –±–∞–Ω–∫–∞ EFHC (—Å—á—ë—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
BANK_ID = 362746228

# üîπ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è (3 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)
DECIMAL_PLACES = Decimal("0.001")


# ==============================
# üîπ –£—Ç–∏–ª–∏—Ç—ã
# ==============================

def round_d3(value: Decimal) -> Decimal:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è EFHC/kWh –¥–æ —Ç—Ä—ë—Ö –∑–Ω–∞–∫–æ–≤.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º ROUND_DOWN (–≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑).
    """
    if not isinstance(value, Decimal):
        value = Decimal(str(value))
    return value.quantize(DECIMAL_PLACES, rounding=ROUND_DOWN)


async def log_transfer(db: AsyncSession, from_id: int, to_id: int, amount: Decimal, reason: str):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ª—é–±—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é EFHC –≤ –∂—É—Ä–Ω–∞–ª (efhc_transfers_log).

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        db      ‚Äî —Å–µ—Å—Å–∏—è –ë–î
        from_id ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å (0 = "—Å–∏—Å—Ç–µ–º–∞")
        to_id   ‚Äî –ø–æ–ª—É—á–∞—Ç–µ–ª—å (0 = "—Å–∏—Å—Ç–µ–º–∞")
        amount  ‚Äî —Å—É–º–º–∞ EFHC (–æ–∫—Ä—É–≥–ª—è–µ—Ç—Å—è –¥–æ d3)
        reason  ‚Äî –ø—Ä–∏—á–∏–Ω–∞ (exchange, shop, withdraw, referral, bonus, mint, burn...)
    """
    stmt = insert(EFHCTransfersLog).values(
        from_id=from_id,
        to_id=to_id,
        amount=round_d3(amount),
        reason=reason,
        created_at=datetime.utcnow()
    )
    await db.execute(stmt)
    await db.commit()


# ==============================
# üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ EFHC
# ==============================

async def credit_user_from_bank(db: AsyncSession, user_id: int, amount: Decimal, reason: str):
    """
    –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å –±–∞–Ω–∫–∞).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
      - –æ–±–º–µ–Ω–Ω–∏–∫–∞ kWh‚ÜíEFHC
      - –≤—ã–∏–≥—Ä—ã—à–µ–π –ª–æ—Ç–µ—Ä–µ–∏
      - —Ä—É—á–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–æ–º
    """
    amount = round_d3(amount)

    # –°–ø–∏—Å—ã–≤–∞–µ–º —É –±–∞–Ω–∫–∞
    bank = await db.get(Balances, BANK_ID)
    bank.efhc -= amount

    # –ó–∞—á–∏—Å–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user = await db.get(Balances, user_id)
    user.efhc += amount

    await log_transfer(db, BANK_ID, user_id, amount, reason)


async def debit_user_to_bank(db: AsyncSession, user_id: int, amount: Decimal, reason: str):
    """
    –°–ø–∏—Å–∞–Ω–∏–µ EFHC —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞—á–∏—Å–ª—è–µ—Ç—Å—è –Ω–∞ –±–∞–Ω–∫).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
      - –ø–æ–∫—É–ø–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ (–ø–∞–Ω–µ–ª–∏, NFT/VIP)
      - –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ EFHC
      - –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤ –ª–æ—Ç–µ—Ä–µ–∏
    """
    amount = round_d3(amount)

    user = await db.get(Balances, user_id)
    if user.efhc < amount:
        raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ EFHC –Ω–∞ —Å—á–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    user.efhc -= amount

    bank = await db.get(Balances, BANK_ID)
    bank.efhc += amount

    await log_transfer(db, user_id, BANK_ID, amount, reason)


# ==============================
# üîπ –ë–æ–Ω—É—Å–Ω—ã–µ EFHC
# ==============================

async def credit_user_bonus_from_bank(db: AsyncSession, user_id: int, amount: Decimal, reason: str):
    """
    –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∏–∑ –±–∞–Ω–∫–∞).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
      - –∑–∞–¥–∞–Ω–∏–π
      - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
    """
    amount = round_d3(amount)

    bank = await db.get(Balances, BANK_ID)
    bank.efhc -= amount

    user = await db.get(Balances, user_id)
    user.bonus += amount

    await log_transfer(db, BANK_ID, user_id, amount, f"{reason}_bonus")


async def debit_user_bonus_to_bank(db: AsyncSession, user_id: int, amount: Decimal, reason: str):
    """
    –°–ø–∏—Å–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö EFHC —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–æ–∑–≤—Ä–∞—Ç –≤ –±–∞–Ω–∫).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
      - –ø–æ–∫—É–ø–∫–∏ –ø–∞–Ω–µ–ª–µ–π –±–æ–Ω—É—Å–Ω—ã–º–∏ –º–æ–Ω–µ—Ç–∞–º–∏
    """
    amount = round_d3(amount)

    user = await db.get(Balances, user_id)
    if user.bonus < amount:
        raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–Ω—ã—Ö EFHC")
    user.bonus -= amount

    bank = await db.get(Balances, BANK_ID)
    bank.efhc += amount

    await log_transfer(db, user_id, BANK_ID, amount, f"{reason}_bonus")


# ==============================
# üîπ –û–±–º–µ–Ω–Ω–∏–∫ kWh ‚Üí EFHC
# ==============================

async def exchange_kwh_to_efhc(db: AsyncSession, user_id: int, kwh_amount: Decimal):
    """
    –û–±–º–µ–Ω kWh –Ω–∞ EFHC (1:1).
    - kwh_total (–æ–±—â–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è) –ù–ï —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è ‚Üí –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥.
    - kwh_available —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è.
    - EFHC –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å –±–∞–Ω–∫–∞).
    """
    kwh_amount = round_d3(kwh_amount)

    user = await db.get(Balances, user_id)
    if user.kwh_available < kwh_amount:
        raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ kWh –¥–ª—è –æ–±–º–µ–Ω–∞")

    # –°–ø–∏—Å—ã–≤–∞–µ–º kWh
    user.kwh_available -= kwh_amount

    # EFHC: —Å–ø–∏—Å–∞–Ω–∏–µ —É –±–∞–Ω–∫–∞ ‚Üí –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bank = await db.get(Balances, BANK_ID)
    bank.efhc -= kwh_amount
    user.efhc += kwh_amount

    await log_transfer(db, BANK_ID, user_id, kwh_amount, "exchange_kwh_to_efhc")


# ==============================
# üîπ Mint / Burn (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
# ==============================

async def mint_to_bank(db: AsyncSession, admin_id: int, amount: Decimal, comment: str):
    """
    –ú–∏–Ω—Ç EFHC (—Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω–µ—Ç —É –±–∞–Ω–∫–∞).
    –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (BANK_ID).
    """
    if admin_id != BANK_ID:
        raise PermissionError("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –º–∏–Ω—Ç–∏—Ç—å EFHC")

    amount = round_d3(amount)

    bank = await db.get(Balances, BANK_ID)
    bank.efhc += amount

    await log_transfer(db, 0, BANK_ID, amount, f"mint:{comment}")


async def burn_from_bank(db: AsyncSession, admin_id: int, amount: Decimal, comment: str):
    """
    –°–∂–∏–≥–∞–Ω–∏–µ EFHC (—É–º–µ–Ω—å—à–µ–Ω–∏–µ –º–æ–Ω–µ—Ç —É –±–∞–Ω–∫–∞).
    –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (BANK_ID).
    """
    if admin_id != BANK_ID:
        raise PermissionError("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–∂–∏–≥–∞—Ç—å EFHC")

    amount = round_d3(amount)

    bank = await db.get(Balances, BANK_ID)
    if bank.efhc < amount:
        raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ EFHC –Ω–∞ —Å—á—ë—Ç–µ –±–∞–Ω–∫–∞ –¥–ª—è —Å–∂–∏–≥–∞–Ω–∏—è")

    bank.efhc -= amount

    await log_transfer(db, BANK_ID, 0, amount, f"burn:{comment}")
