# üìÇ backend/app/efhc_transactions.py ‚Äî –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ EFHC —á–µ—Ä–µ–∑ –ë–∞–Ω–∫
# -----------------------------------------------------------------------------
# –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –º–æ–¥—É–ª—å:
#   ‚Ä¢ –†–µ–∞–ª–∏–∑—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ EFHC (—Å–ø–∏—Å–∞–Ω–∏–µ/–∑–∞—á–∏—Å–ª–µ–Ω–∏–µ).
#   ‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç: EFHC –≤—Å–µ–≥–¥–∞ –∏–¥—É—Ç —á–µ—Ä–µ–∑ –ë–∞–Ω–∫ (telegram_id = 362746228).
#   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –ú–∏–Ω—Ç/–ë—ë—Ä–Ω –º–æ–Ω–µ—Ç (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω, —Ç–æ–ª—å–∫–æ –ë–∞–Ω–∫).
#   ‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–∏–Ω—Ç/–±—ë—Ä–Ω –æ–ø–µ—Ä–∞—Ü–∏–π –≤ efhc_core.mint_burn_log.
#
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
#   ‚Ä¢ shop_routes.py ‚Äî –ø–æ–∫—É–ø–∫–∏ EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
#   ‚Ä¢ withdraw_routes.py ‚Äî –≤—ã–≤–æ–¥ EFHC.
#   ‚Ä¢ panels_logic.py ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–∏–∏.
#   ‚Ä¢ referrals.py ‚Äî –±–æ–Ω—É—Å—ã.
#   ‚Ä¢ admin_routes.py ‚Äî –º–∏–Ω—Ç/–±—ë—Ä–Ω EFHC.
# -----------------------------------------------------------------------------

from __future__ import annotations
from decimal import Decimal, ROUND_DOWN
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text

# üìå ID –ë–∞–Ω–∫–∞ EFHC (–∞–¥–º–∏–Ω—Å–∫–∏–π —Å—á—ë—Ç-—ç–º–∏—Ç–µ–Ω—Ç)
BANK_TELEGRAM_ID = 362746228

DEC3 = Decimal("0.001")

def _d3(x: Decimal) -> Decimal:
    """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 3 –∑–Ω–∞–∫–æ–≤ (EFHC/kWh/bonus)."""
    return x.quantize(DEC3, rounding=ROUND_DOWN)


# -----------------------------------------------------------------------------
# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü (–¥–ª—è –ª–æ–≥–æ–≤ –º–∏–Ω—Ç–∞/–±—ë—Ä–Ω–∞)
# -----------------------------------------------------------------------------
CREATE_LOGS_SQL = """
CREATE TABLE IF NOT EXISTS efhc_core.mint_burn_log (
    id BIGSERIAL PRIMARY KEY,
    ts TIMESTAMPTZ DEFAULT now(),
    admin_id BIGINT NOT NULL,
    action_type TEXT NOT NULL,         -- 'MINT' –∏–ª–∏ 'BURN'
    amount NUMERIC(30, 3) NOT NULL,
    comment TEXT
);
"""

async def ensure_logs_table(db: AsyncSession) -> None:
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–æ–≥–æ–≤ –º–∏–Ω—Ç–∞/–±—ë—Ä–Ω–∞ (–µ—Å–ª–∏ –Ω–µ—Ç)."""
    await db.execute(text(CREATE_LOGS_SQL))
    await db.commit()


# -----------------------------------------------------------------------------
# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã
# -----------------------------------------------------------------------------
async def _ensure_user(db: AsyncSession, telegram_id: int) -> None:
    """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ efhc_core.users –∏ balances."""
    await db.execute(
        text("""INSERT INTO efhc_core.users (telegram_id) VALUES (:tg)
                ON CONFLICT (telegram_id) DO NOTHING"""),
        {"tg": telegram_id},
    )
    await db.execute(
        text("""INSERT INTO efhc_core.balances (telegram_id) VALUES (:tg)
                ON CONFLICT (telegram_id) DO NOTHING"""),
        {"tg": telegram_id},
    )


# -----------------------------------------------------------------------------
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
# -----------------------------------------------------------------------------
async def transfer_efhc(
    db: AsyncSession,
    from_id: int,
    to_id: int,
    amount: Decimal,
) -> None:
    """
    –ü–µ—Ä–µ–≤–æ–¥ EFHC —Å—Ç—Ä–æ–≥–æ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–≤–∫–ª—é—á–∞—è BANK).
    –ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å —Å amount <= 0.
    –ù–µ–ª—å–∑—è "—Å–∂–µ—á—å" –∏–ª–∏ "—Å–æ–∑–¥–∞—Ç—å" –º–æ–Ω–µ—Ç—ã –Ω–∞–ø—Ä—è–º—É—é.
    """
    if amount <= 0:
        raise ValueError("Amount must be positive")

    amt = _d3(amount)
    await _ensure_user(db, from_id)
    await _ensure_user(db, to_id)

    # –°–ø–∏—Å–∞–Ω–∏–µ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    q1 = await db.execute(
        text("""UPDATE efhc_core.balances
                   SET efhc = efhc - :amt
                 WHERE telegram_id = :from_id
                   AND efhc >= :amt"""),
        {"amt": str(amt), "from_id": from_id},
    )
    if q1.rowcount == 0:
        raise ValueError("Insufficient balance on sender account")

    # –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    await db.execute(
        text("""UPDATE efhc_core.balances
                   SET efhc = efhc + :amt
                 WHERE telegram_id = :to_id"""),
        {"amt": str(amt), "to_id": to_id},
    )


# -----------------------------------------------------------------------------
# –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ë–∞–Ω–∫
# -----------------------------------------------------------------------------
async def credit_user_from_bank(db: AsyncSession, user_id: int, amount: Decimal) -> None:
    """–ù–∞—á–∏—Å–ª–∏—Ç—å EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Å–ø–∏—Å—ã–≤–∞–µ–º —Å BANK)."""
    await transfer_efhc(db, BANK_TELEGRAM_ID, user_id, amount)


async def debit_user_to_bank(db: AsyncSession, user_id: int, amount: Decimal) -> None:
    """–°–ø–∏—Å–∞—Ç—å EFHC —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞—á–∏—Å–ª—è–µ–º –≤ BANK)."""
    await transfer_efhc(db, user_id, BANK_TELEGRAM_ID, amount)


async def debit_bank_for_withdraw(db: AsyncSession, amount: Decimal) -> None:
    """
    –°–ø–∏—Å–∞—Ç—å EFHC —Å BANK –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –≤—ã–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ TON.
    """
    q1 = await db.execute(
        text("""UPDATE efhc_core.balances
                   SET efhc = efhc - :amt
                 WHERE telegram_id = :bank
                   AND efhc >= :amt"""),
        {"amt": str(_d3(amount)), "bank": BANK_TELEGRAM_ID},
    )
    if q1.rowcount == 0:
        raise ValueError("Insufficient EFHC balance in BANK")


# -----------------------------------------------------------------------------
# –ú–∏–Ω—Ç –∏ –ë—ë—Ä–Ω (—Ç–æ–ª—å–∫–æ –ë–∞–Ω–∫)
# -----------------------------------------------------------------------------
async def mint_efhc(db: AsyncSession, admin_id: int, amount: Decimal, comment: str = "") -> None:
    """
    –ú–∏–Ω—Ç EFHC: –¥–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –ë–∞–Ω–∫–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–º.
    –õ–æ–≥–∏—Ä—É–µ–º –≤ mint_burn_log.
    """
    if amount <= 0:
        raise ValueError("Mint amount must be positive")

    amt = _d3(amount)
    await _ensure_user(db, BANK_TELEGRAM_ID)

    await db.execute(
        text("""UPDATE efhc_core.balances
                   SET efhc = efhc + :amt
                 WHERE telegram_id = :bank"""),
        {"amt": str(amt), "bank": BANK_TELEGRAM_ID},
    )

    await db.execute(
        text("""INSERT INTO efhc_core.mint_burn_log (admin_id, action_type, amount, comment)
                VALUES (:admin_id, 'MINT', :amt, :comment)"""),
        {"admin_id": admin_id, "amt": str(amt), "comment": comment},
    )


async def burn_efhc(db: AsyncSession, admin_id: int, amount: Decimal, comment: str = "") -> None:
    """
    –ë—ë—Ä–Ω EFHC: —Å–∂–µ—á—å –º–æ–Ω–µ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∞ –ë–∞–Ω–∫–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–º.
    –õ–æ–≥–∏—Ä—É–µ–º –≤ mint_burn_log.
    """
    if amount <= 0:
        raise ValueError("Burn amount must be positive")

    amt = _d3(amount)
    await _ensure_user(db, BANK_TELEGRAM_ID)

    q1 = await db.execute(
        text("""UPDATE efhc_core.balances
                   SET efhc = efhc - :amt
                 WHERE telegram_id = :bank
                   AND efhc >= :amt"""),
        {"amt": str(amt), "bank": BANK_TELEGRAM_ID},
    )
    if q1.rowcount == 0:
        raise ValueError("Insufficient EFHC balance in BANK for burn")

    await db.execute(
        text("""INSERT INTO efhc_core.mint_burn_log (admin_id, action_type, amount, comment)
                VALUES (:admin_id, 'BURN', :amt, :comment)"""),
        {"admin_id": admin_id, "amt": str(amt), "comment": comment},
    )
