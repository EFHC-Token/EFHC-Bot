# üìÇ backend/app/main.py
# -----------------------------------------------------------------------------
# EFHC Bot ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –≤—Ö–æ–¥ –≤ backend.
# -----------------------------------------------------------------------------
# –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
#   ‚Ä¢ –°–æ–∑–¥–∞—ë—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º /api (–∏–ª–∏ /).
#   ‚Ä¢ –ü–æ–¥–∫–ª—é—á–∞–µ—Ç CORS (—á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–æ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º –Ω–∞ Vercel).
#   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç Telegram webhook (POST /tg/webhook).
#   ‚Ä¢ –ü–æ–¥–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã: user_routes, admin_routes.
#   ‚Ä¢ –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã (ensure_schemas, search_path, health-check),
#     –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ scheduler, –∑–∞–ø—É—Å–∫ TON watcher.
#   ‚Ä¢ –ü—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
#
# –í–ê–ñ–ù–û:
#   ‚Ä¢ Webhook Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å—Ç—Ä–æ–≥–æ —Å SECRET –∏–∑ config.py (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏).
#   ‚Ä¢ –õ–æ–∫–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ uvicorn –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å polling –≤–º–µ—Å—Ç–æ webhook.
# -----------------------------------------------------------------------------

import asyncio
import logging
from fastapi import FastAPI, Request, Depends, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

from aiogram import Bot, Dispatcher, types

from .config import get_settings
from .database import on_startup_init_db, on_shutdown_dispose, get_session
from . import user_routes, admin_routes
from . import scheduler
from . import ton_integration

settings = get_settings()

# -----------------------------------------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# -----------------------------------------------------------------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("efhc-main")

# -----------------------------------------------------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot (Aiogram)
# -----------------------------------------------------------------------------
bot = Bot(token=settings.TELEGRAM_BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# -----------------------------------------------------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
# -----------------------------------------------------------------------------
app = FastAPI(
    title=settings.PROJECT_NAME,
    openapi_url=f"{settings.API_V1_STR}/openapi.json"
)

# -----------------------------------------------------------------------------
# CORS: —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ (Vercel) + "*" (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)
# -----------------------------------------------------------------------------
if settings.BACKEND_CORS_ORIGINS or True:
    app.add_middleware(
        CORSMiddleware,
        allow_origins=[str(origin) for origin in settings.BACKEND_CORS_ORIGINS] or ["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

# -----------------------------------------------------------------------------
# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏ –∞–¥–º–∏–Ω—Å–∫–∏–µ API)
# -----------------------------------------------------------------------------
app.include_router(user_routes.router, prefix=settings.API_V1_STR, tags=["user"])
app.include_router(admin_routes.router, prefix=settings.API_V1_STR, tags=["admin"])

# -----------------------------------------------------------------------------
# Telegram Webhook endpoint
# -----------------------------------------------------------------------------
@app.post(settings.TELEGRAM_WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    """
    Endpoint –¥–ª—è Telegram webhook:
      ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ–∫—Ä–µ—Ç (header 'X-Telegram-Bot-Api-Secret-Token').
      ‚Ä¢ –ü–µ—Ä–µ–¥–∞—ë—Ç –∞–ø–¥–µ–π—Ç –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä aiogram.
    """
    secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if secret != settings.TELEGRAM_WEBHOOK_SECRET:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Invalid secret")

    try:
        data = await request.json()
        update = types.Update(**data)
    except Exception as e:
        logger.error(f"Webhook parse error: {e}")
        raise HTTPException(status_code=400, detail="Invalid update payload")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ø–¥–µ–π—Ç–∞ aiogram
    await dp.feed_update(bot, update)
    return JSONResponse(content={"ok": True})


# -----------------------------------------------------------------------------
# Startup event ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# -----------------------------------------------------------------------------
@app.on_event("startup")
async def on_startup():
    logger.info("[EFHC] Startup init...")

    # 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã
    await on_startup_init_db()

    # 2. –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (apscheduler –∏–ª–∏ custom loop)
    scheduler.init_scheduler(app)

    # 3. –ó–∞–ø—É—Å–∫ TON watcher loop (–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ incoming tx –ø–æ TON_WALLET)
    loop = asyncio.get_event_loop()
    loop.create_task(ton_integration.ton_watcher_loop())

    # 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –≤ Telegram (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω BASE_PUBLIC_URL)
    if settings.BASE_PUBLIC_URL and settings.TELEGRAM_WEBHOOK_PATH:
        webhook_url = f"{settings.BASE_PUBLIC_URL.rstrip('/')}{settings.TELEGRAM_WEBHOOK_PATH}"
        await bot.set_webhook(
            url=webhook_url,
            secret_token=settings.TELEGRAM_WEBHOOK_SECRET,
            drop_pending_updates=True
        )
        logger.info(f"[EFHC] Telegram webhook set: {webhook_url}")
    else:
        logger.warning("[EFHC] BASE_PUBLIC_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


# -----------------------------------------------------------------------------
# Shutdown event ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
# -----------------------------------------------------------------------------
@app.on_event("shutdown")
async def on_shutdown():
    logger.info("[EFHC] Shutdown...")
    await on_shutdown_dispose()
    await bot.session.close()


# -----------------------------------------------------------------------------
# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ uvicorn
# -----------------------------------------------------------------------------
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "backend.app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True
    )
