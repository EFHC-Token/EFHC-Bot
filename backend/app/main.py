# üìÇ backend/app/main.py
# -----------------------------------------------------------------------------
# –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ EFHC Bot
# -----------------------------------------------------------------------------
# –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
# 1. –°–æ–∑–¥–∞—ë—Ç FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (API backend)
# 2. –ü–æ–¥–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —Ä–æ—É—Ç—ã (user + admin)
# 3. –ü–æ–¥–Ω–∏–º–∞–µ—Ç Telegram-–±–æ—Ç–∞ (webhook –∏–ª–∏ polling)
# 4. –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä–∫–∞ NFT)
# 5. –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä TON (–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π)
# -----------------------------------------------------------------------------

import asyncio
import uvicorn
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

from .config import get_settings
from .database import init_db, AsyncSessionLocal
from .user_routes import router as user_router
from .admin_routes import router as admin_router
from .scheduler import init_scheduler
from .bot import handle_update, start_bot
from .ton_integration import process_incoming_payments

settings = get_settings()

# -----------------------------------------------------------------------------
# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# -----------------------------------------------------------------------------
def create_app() -> FastAPI:
    app = FastAPI(
        title=settings.PROJECT_NAME,
        version="1.0.0",
        description="EFHC Bot Backend API (FastAPI + Neon + Telegram Bot)"
    )

    # ------------------- CORS -------------------
    app.add_middleware(
        CORSMiddleware,
        allow_origins=settings.BACKEND_CORS_ORIGINS or ["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

    # ------------------- –†–æ—É—Ç—ã -------------------
    app.include_router(user_router, prefix=settings.API_V1_STR, tags=["user"])
    app.include_router(admin_router, prefix=settings.API_V1_STR, tags=["admin"])

    # ------------------- Telegram webhook endpoint -------------------
    @app.post(settings.TELEGRAM_WEBHOOK_PATH or "/tg/webhook")
    async def telegram_webhook(req: Request):
        """
        Telegram –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å—é–¥–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
        handle_update ‚Äî —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç update.
        """
        update = await req.json()
        await handle_update(update)
        return JSONResponse({"ok": True})

    return app


# -----------------------------------------------------------------------------
# –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# -----------------------------------------------------------------------------
app = create_app()


# -----------------------------------------------------------------------------
# –§–æ–Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä TON
# -----------------------------------------------------------------------------
async def ton_watcher_loop():
    """
    –§–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç TonAPI –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏.
    –ò–Ω—Ç–µ—Ä–≤–∞–ª 20 —Å–µ–∫—É–Ω–¥. –ù–∞ –ø—Ä–æ–¥–µ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ APScheduler/CRON.
    """
    await asyncio.sleep(3)
    while True:
        try:
            async with AsyncSessionLocal() as db:
                handled = await process_incoming_payments(db, limit=50)
                if handled:
                    print(f"[TON] processed {handled} new tx")
        except Exception as e:
            print(f"[TON] watcher error: {e}")
        await asyncio.sleep(20)


# -----------------------------------------------------------------------------
# Startup / Shutdown events
# -----------------------------------------------------------------------------
@app.on_event("startup")
async def on_startup():
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –ë–î
    await init_db()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á (–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä–∫–∞ NFT)
    init_scheduler(app)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ TON
    asyncio.create_task(ton_watcher_loop())

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞ (polling, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if not settings.WEBHOOK_ENABLED:
        await start_bot()

    print("[EFHC] Startup complete")


@app.on_event("shutdown")
async def on_shutdown():
    print("[EFHC] Shutdown complete")


# -----------------------------------------------------------------------------
# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ uvicorn (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
# -----------------------------------------------------------------------------
if __name__ == "__main__":
    uvicorn.run("backend.app.main:app", host="0.0.0.0", port=8000, reload=True)
