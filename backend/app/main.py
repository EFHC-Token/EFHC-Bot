# üìÇ backend/app/main.py ‚Äî –∑–∞–ø—É—Å–∫ FastAPI + Telegram webhook + TON watcher + Scheduler
# -----------------------------------------------------------------------------
# –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
#   1) –°–æ–∑–¥–∞—ë—Ç –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
#   2) –ü–æ–¥–∫–ª—é—á–∞–µ—Ç CORS (–¥–ª—è WebApp —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞).
#   3) –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç API-—Ä–æ—É—Ç—ã: user_routes, admin_routes (—Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º /api).
#   4) –ü–æ–¥–Ω–∏–º–∞–µ—Ç Telegram webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç (–ø—É—Ç—å –∏–∑ settings.TELEGRAM_WEBHOOK_PATH)
#      + –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ–∫—Ä–µ—Ç (settings.TELEGRAM_WEBHOOK_SECRET), –µ—Å–ª–∏ –∑–∞–¥–∞–Ω.
#   5) –ù–∞ —Å—Ç–∞—Ä—Ç–µ:
#       - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ë–î (ensure —Å—Ö–µ–º—ã, health check),
#       - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Scheduler (–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏, –ø—Ä–æ–≤–µ—Ä–∫–∞ NFT, –ª–æ—Ç–µ—Ä–µ–∏),
#       - –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª –æ–ø—Ä–æ—Å–∞ TON API (process_incoming_payments –∫–∞–∂–¥—ã–π N —Å–µ–∫—É–Ω–¥),
#       - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook —É Telegram-–±–æ—Ç–∞ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω BASE_PUBLIC_URL).
#   6) –ò–º–µ–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: GET / (root), GET /healthz.
#
# –ó–∞—á–µ–º –Ω—É–∂–Ω–æ:
#   –≠—Ç–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç—ã–∫—É–µ—Ç –≤—Å–µ –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã: API, –±–æ—Ç, –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫,
#   –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è TonAPI (–∞–≤—Ç–æ–∑–∞—á–∏—Å–ª–µ–Ω–∏—è EFHC), CORS, –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
#
# –ì–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:
#   - –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è uvicorn'–æ–º (–ª–æ–∫–∞–ª—å–Ω–æ) –∏–ª–∏ –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Render/VPS.
#   - Webhook Telegram –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π URL –≤–∏–¥–∞: https://<host>/tg/webhook
#   - –§–æ–Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä TON –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –ë–î.
# -----------------------------------------------------------------------------

from __future__ import annotations

import asyncio
import json
import sys
from typing import Optional

import uvicorn
from fastapi import FastAPI, Request, Header, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

from .config import get_settings
from .database import (
    on_startup_init_db,
    on_shutdown_dispose,
    session_scope,          # –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–∏ (–∞—Ç–æ–º–∞—Ä–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è)
)
from .user_routes import router as user_router
from .admin_routes import router as admin_router
from .scheduler import init_scheduler  # –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: —ç–Ω–µ—Ä–≥–∏—è, VIP, –ª–æ—Ç–µ—Ä–µ–∏
from .ton_integration import process_incoming_payments  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö TON —Å–æ–±—ã—Ç–∏–π
from . import bot as bot_module  # –Ω–∞—à aiogram-–±–æ—Ç (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –º–µ–Ω—é, –∏ —Ç.–¥.)

settings = get_settings()

# -----------------------------------------------------------------------------
# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# -----------------------------------------------------------------------------
def create_app() -> FastAPI:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.

    - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç CORS (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ WebApp –Ω–∞ Vercel/–¥—Ä—É–≥–æ–º –¥–æ–º–µ–Ω–µ).
    - –ü–æ–¥–∫–ª—é—á–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/–∞–¥–º–∏–Ω–æ–≤ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –∏–∑ settings.API_V1_STR.
    - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç Telegram webhook endpoint (POST {TELEGRAM_WEBHOOK_PATH}).
    - –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ—Ä–Ω–µ–≤—ã–µ –∏ healthcheck —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã.
    """
    app = FastAPI(
        title=settings.PROJECT_NAME,
        version="1.0.0",
        description="EFHC Bot Backend API (FastAPI + PostgreSQL + Aiogram + TON)",
    )

    # -------------------
    # CORS
    # -------------------
    # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞. –ï—Å–ª–∏ BACKEND_CORS_ORIGINS –ø—É—Å—Ç–æ ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã.
    allow_origins = settings.BACKEND_CORS_ORIGINS or ["*"]
    app.add_middleware(
        CORSMiddleware,
        allow_origins=allow_origins,
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

    # -------------------
    # –†–æ—É—Ç—ã API
    # -------------------
    app.include_router(user_router, prefix=settings.API_V1_STR, tags=["user"])
    app.include_router(admin_router, prefix=settings.API_V1_STR, tags=["admin"])

    # -------------------
    # Telegram webhook endpoint
    # -------------------
    @app.post(settings.TELEGRAM_WEBHOOK_PATH)
    async def telegram_webhook(
        req: Request,
        x_telegram_webhook_secret: Optional[str] = Header(
            None, convert_underscores=False, alias="X-Telegram-Webhook-Secret"
        ),
    ):
        """
        –≠–Ω–¥–ø–æ–∏–Ω—Ç, –∫—É–¥–∞ Telegram –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (updates) –≤ —Ä–µ–∂–∏–º–µ webhook.

        –ó–∞—â–∏—Ç–∞:
          - –ï—Å–ª–∏ settings.TELEGRAM_WEBHOOK_SECRET –∑–∞–¥–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Telegram-Webhook-Secret.
          - –ò–Ω–∞—á–µ (—Å–µ–∫—Ä–µ—Ç –Ω–µ –∑–∞–¥–∞–Ω) –ø—Ä–∏–Ω–∏–º–∞–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ª–æ–∫–∞–ª–∞/test.

        –û–±—Ä–∞–±–æ—Ç–∫–∞:
          - –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ ‚Äî JSON update (dict), –º—ã –ø—Ä–æ–∫—Å–∏—Ä—É–µ–º –µ–≥–æ –≤ aiogram.Dispatcher.
          - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥/–∫–Ω–æ–ø–æ–∫/–º–µ–Ω—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ backend/app/bot.py.

        –í–∞–∂–Ω–æ:
          - –î–∞–Ω–Ω—ã–π –ø—É—Ç—å –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å settings.TELEGRAM_WEBHOOK_PATH.
          - –£ –±–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω webhook –Ω–∞ {BASE_PUBLIC_URL}{TELEGRAM_WEBHOOK_PATH}.
        """
        if settings.TELEGRAM_WEBHOOK_SECRET:
            if not x_telegram_webhook_secret or x_telegram_webhook_secret != settings.TELEGRAM_WEBHOOK_SECRET:
                # –û—Ç–≤–µ—á–∞–µ–º 403, –µ—Å–ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
                raise HTTPException(status_code=403, detail="Invalid webhook secret")

        try:
            update = await req.json()
        except Exception:
            # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON
            raise HTTPException(status_code=400, detail="Invalid JSON body")

        # –ü–µ—Ä–µ–¥–∞—ë–º update –≤ aiogram Dispatcher
        # –ü–æ–ª—É—á–∞–µ–º dispatcher –∏–∑ –Ω–∞—à–µ–≥–æ –º–æ–¥—É–ª—è –±–æ—Ç–∞
        dp = bot_module.get_dispatcher()
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç Bot (aiogram)
        tg_bot = bot_module.bot

        # aiogram v3: –º–µ—Ç–æ–¥ feed_raw_update (–∏–ª–∏ feed_update) –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –ø–æ–¥–∞—á—ñ –∞–ø–¥–µ–π—Ç–∞
        try:
            # –í–æ–∑–º–æ–∂–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç: await dp.feed_update(bot=tg_bot, update=update)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º feed_raw_update –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ "—Å—ã—Ä–æ–π" –ø–æ–¥–∞—á–∏ JSON
            await dp.feed_raw_update(tg_bot, update)
        except Exception as e:
            print(f"[EFHC][BOT][WEBHOOK] Update handling error: {e}", file=sys.stderr)

        return JSONResponse({"ok": True})

    # -------------------
    # –ò–Ω—Ñ–æ –∏ Healthcheck
    # -------------------
    @app.get("/")
    async def root():
        """
        –ü—Ä–æ—Å—Ç–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç ‚Äî –æ—Ç–¥–∞—ë–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: –∑–∞–¥–µ–ø–ª–æ–∏–ª–æ—Å—å –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
        """
        return {
            "name": settings.PROJECT_NAME,
            "env": settings.ENV,
            "api_prefix": settings.API_V1_STR,
            "ton_wallet": settings.TON_WALLET_ADDRESS,
            "efhc_jetton": settings.EFHC_TOKEN_ADDRESS,
            "webhook_path": settings.TELEGRAM_WEBHOOK_PATH,
            "base_public_url": settings.BASE_PUBLIC_URL,
        }

    @app.get("/healthz")
    async def healthz():
        """
        Healthcheck —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤/–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–æ–≤.
        –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å: –ø–∏–Ω–≥ –ë–î, –ø–∏–Ω–≥ TonAPI –∏ —Ç.–¥.
        """
        return {"status": "ok"}

    return app


# -----------------------------------------------------------------------------
# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –æ–ø—Ä–æ—Å TonAPI –∏ –∞–≤—Ç–æ-–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è EFHC
# -----------------------------------------------------------------------------
async def ton_watcher_loop():
    """
    –§–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π:
      - –ö–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥ (20—Å) –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç TonAPI (—á–µ—Ä–µ–∑ ton_integration.process_incoming_payments)
      - –†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç –Ω–æ–≤—ã–µ –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ TON_WALLET_ADDRESS.
      - –ü–∞—Ä—Å–∏—Ç memo (—Ñ–æ—Ä–º–∞—Ç: "id telegram 4357333, 100 EFHC" –∏–ª–∏ "id telegram 4357333, VIP").
      - –ù–∞—á–∏—Å–ª—è–µ—Ç EFHC/–≤—ã–¥–∞—ë—Ç VIP/–∑–∞—á–∏—Å–ª—è–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º.
      - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥–∏ –≤ efhc_core.ton_events_log.

    –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
      - –í—Å–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –∫–∞–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –ë–î (–Ω–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞).
      - –í–Ω–µ—à–Ω–∏–π TON-–∫–æ—à–µ–ª—ë–∫ —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∞–∫—Ç–∞ –æ–ø–ª–∞—Ç—ã (–≤–Ω–µ –Ω–∞—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è).

    –ì–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:
      - –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (startup event) –∫–∞–∫ asyncio.create_task().
    """
    await asyncio.sleep(3.0)  # –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã —Å–µ—Ä–≤–∏—Å —É—Å–ø–µ–ª –ø–æ–¥–Ω—è—Ç—å—Å—è
    while True:
        try:
            # –†–∞–±–æ—Ç–∞–µ–º —Å —Å–µ—Å—Å–∏–µ–π –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            async with session_scope() as db:
                handled = await process_incoming_payments(db, limit=50)
                if handled:
                    print(f"[EFHC][TON] processed {handled} new tx")
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º (—á—Ç–æ–±—ã —Ü–∏–∫–ª –Ω–µ —É–º–∏—Ä–∞–ª)
            print(f"[EFHC][TON] watcher error: {e}", file=sys.stderr)

        await asyncio.sleep(20.0)  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ (—Å–µ–∫—É–Ω–¥—ã)


# -----------------------------------------------------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (startup/shutdown)
# -----------------------------------------------------------------------------
app = create_app()

@app.on_event("startup")
async def on_startup():
    """
    –°–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
      1) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î (—Å–æ–∑–¥–∞—ë–º —Å—Ö–µ–º—ã, –≤—ã—Å—Ç–∞–≤–ª—è–µ–º search_path, health-check).
      2) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á (–µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è, –ø—Ä–æ–≤–µ—Ä–∫–∞ NFT, –ª–æ—Ç–µ—Ä–µ–∏).
      3) –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ TON (–æ–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏).
      4) –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –±–æ—Ç—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω BASE_PUBLIC_URL).
    """
    print("[EFHC] Starting up...")

    # --- 1) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î: —Å—Ö–µ–º—ã, search_path, health-check
    await on_startup_init_db()
    print("[EFHC][DB] Initialized")

    # --- 2) –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (APScheduler / asyncio) ‚Äî –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è, VIP, –ª–æ—Ç–µ—Ä–µ–∏
    init_scheduler(app)
    print("[EFHC][SCHEDULER] Initialized")

    # --- 3) –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ TON
    asyncio.create_task(ton_watcher_loop())
    print("[EFHC][TON] Watcher started")

    # --- 4) –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —É Telegram-–±–æ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL)
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ bot_module.setup_webhook(), –æ–Ω–∞ —Å–∞–º–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç BASE_PUBLIC_URL/BOT_WEBHOOK_URL
        await bot_module.setup_webhook()
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø—É—Ç—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å TELEGRAM_WEBHOOK_PATH ‚Äî –º–æ–∂–Ω–æ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:
        # –ù–æ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. –§—É–Ω–∫—Ü–∏—è setup_webhook —É–∂–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
        print("[EFHC][BOT] Webhook setup completed (if BASE_PUBLIC_URL was provided).")
    except Exception as e:
        print(f"[EFHC][BOT] Webhook setup skipped/failed: {e}", file=sys.stderr)
        # –≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ: –ª–æ–∫–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ polling (—Å–º. bot_module.start_bot()).
        # –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å polling –∑–¥–µ—Å—å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏:
        # asyncio.create_task(bot_module.start_bot())


@app.on_event("shutdown")
async def on_shutdown():
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:
      - –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–≤–∏–∂–æ–∫ –ë–î.
      - –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫).
    """
    print("[EFHC] Shutting down...")
    await on_shutdown_dispose()
    print("[EFHC] Shutdown complete")


# -----------------------------------------------------------------------------
# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ uvicorn (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
# -----------------------------------------------------------------------------
if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä: python -m backend.app.main
    uvicorn.run("backend.app.main:app", host="0.0.0.0", port=8000, reload=True)
