# üìÇ backend/app/models.py ‚Äî SQLAlchemy ORM –º–æ–¥–µ–ª–∏ EFHC
# -----------------------------------------------------------------------------
# –ß—Ç–æ –∑–¥–µ—Å—å:
#   ‚Ä¢ –î–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—Å–µ—Ö –Ω–∞—à–∏—Ö —Ç–∞–±–ª–∏—Ü –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ö–µ–º–∞—Ö:
#       - efhc_core: users, balances, user_panels, user_vip, (–ª–æ–≥ ton_events_log ‚Äî –æ–ø–∏—Å–∞–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è)
#       - efhc_referrals: referrals, referral_stats
#       - efhc_tasks: tasks, user_tasks
#       - efhc_lottery: lotteries, lottery_tickets
#       - efhc_admin: admin_nft_whitelist
#   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ö–µ–º—É –∏–∑ config.py (settings.DB_SCHEMA_*)
#   ‚Ä¢ –¢–∏–ø—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å –Ω–∞—à–µ–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
#   ‚Ä¢ –í —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ª—É—á—à–µ –≤–µ—Å—Ç–∏ Alembic'–æ–º, –Ω–æ –º–æ–¥–µ–ª–∏ –Ω—É–∂–Ω—ã –¥–ª—è –≤—ã–±–æ—Ä–æ–∫/CRUD.
#   ‚Ä¢ –¢–∞–±–ª–∏—Ü—ã ton_events_log –∏ user_vip –º—ã —Ç–∞–∫–∂–µ –æ–ø–∏—Å—ã–≤–∞–µ–º ORM-–∫–ª–∞—Å—Å–∞–º–∏, —Ö–æ—Ç—è —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å
#     —á–µ—Ä–µ–∑ raw SQL –≤ ton_integration.py (ensure_ton_tables) ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.
# -----------------------------------------------------------------------------

from __future__ import annotations

from datetime import datetime, timedelta
from typing import Optional

from sqlalchemy import (
    Column, Integer, BigInteger, String, DateTime, Boolean, Numeric, Text, ForeignKey, UniqueConstraint
)
from sqlalchemy.orm import declarative_base, relationship

from .config import get_settings

settings = get_settings()

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å ORM
Base = declarative_base()

# –£–¥–æ–±–Ω—ã–µ –∞–ª–∏–∞—Å—ã —Å—Ö–µ–º (–∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
S_CORE = settings.DB_SCHEMA_CORE
S_ADMIN = settings.DB_SCHEMA_ADMIN
S_REF = settings.DB_SCHEMA_REFERRAL
S_TASK = settings.DB_SCHEMA_TASKS
S_LOT  = settings.DB_SCHEMA_LOTTERY


# ---------------------------------------------------------------------
# efhc_core.users ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (Telegram)
# ---------------------------------------------------------------------
class User(Base):
    __tablename__ = "users"
    __table_args__ = {"schema": S_CORE}

    telegram_id = Column(BigInteger, primary_key=True, index=True)
    username = Column(String(255), nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)

    # –°–≤—è–∑–∏ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã, –Ω–æ —É–¥–æ–±–Ω—ã)
    balance = relationship("Balance", uselist=False, back_populates="user", cascade="all, delete-orphan")
    panels = relationship("UserPanel", back_populates="user", cascade="all, delete-orphan")


# ---------------------------------------------------------------------
# efhc_core.balances ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å EFHC/bonus/kWh
# ---------------------------------------------------------------------
class Balance(Base):
    __tablename__ = "balances"
    __table_args__ = {"schema": S_CORE}

    telegram_id = Column(BigInteger, ForeignKey(f"{S_CORE}.users.telegram_id", ondelete="CASCADE"), primary_key=True)
    efhc = Column(Numeric(30, 3), nullable=False, default=0)
    bonus = Column(Numeric(30, 3), nullable=False, default=0)
    kwh  = Column(Numeric(30, 3), nullable=False, default=0)

    user = relationship("User", back_populates="balance")


# ---------------------------------------------------------------------
# efhc_core.user_panels ‚Äî –∫—É–ø–ª–µ–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–∏
# ---------------------------------------------------------------------
class UserPanel(Base):
    __tablename__ = "user_panels"
    __table_args__ = {"schema": S_CORE}

    id = Column(BigInteger, primary_key=True, autoincrement=True)
    telegram_id = Column(BigInteger, ForeignKey(f"{S_CORE}.users.telegram_id", ondelete="CASCADE"), index=True, nullable=False)

    price_eFHC = Column(Numeric(30, 3), nullable=False, default=100)
    purchased_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    expires_at = Column(DateTime, nullable=False)  # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º: purchased_at + PANEL_LIFESPAN_DAYS
    active = Column(Boolean, default=True, nullable=False)

    # –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –Ω–æ—Ä–º—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
    daily_gen_kwh = Column(Numeric(30, 3), nullable=False, default=0.598)

    user = relationship("User", back_populates="panels")


# ---------------------------------------------------------------------
# efhc_core.user_vip ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π VIP-—Ñ–ª–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# (–ù–ï –∞–¥–º–∏–Ω—Å–∫–∏–π –¥–æ—Å—Ç—É–ø, –∞–¥–º–∏–Ω –¥–æ—Å—Ç—É–ø –ø–æ NFT whitelist –≤ efhc_admin.admin_nft_whitelist)
# ---------------------------------------------------------------------
class UserVIP(Base):
    __tablename__ = "user_vip"
    __table_args__ = {"schema": S_CORE}

    telegram_id = Column(BigInteger, ForeignKey(f"{S_CORE}.users.telegram_id", ondelete="CASCADE"), primary_key=True)
    since = Column(DateTime, default=datetime.utcnow, nullable=False)


# ---------------------------------------------------------------------
# efhc_core.ton_events_log ‚Äî –ª–æ–≥ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ TonAPI (–¥–ª—è –∞—É–¥–∏—Ç–∞)
# ---------------------------------------------------------------------
class TonEventLog(Base):
    __tablename__ = "ton_events_log"
    __table_args__ = {"schema": S_CORE}

    event_id = Column(String, primary_key=True)
    ts = Column(DateTime, default=datetime.utcnow, nullable=False)

    action_type = Column(String, nullable=True)      # "TonTransfer" / "JettonTransfer"
    asset = Column(String, nullable=True)            # "TON" / "EFHC" / "USDT" / "JETTON:addr"

    amount = Column(Numeric(30, 9), nullable=True)   # –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö –∞–∫—Ç–∏–≤–∞ (TON 9 –∑–Ω–∞–∫–æ–≤, EFHC 3 –∏ —Ç.–¥.)
    decimals = Column(Integer, nullable=True)

    from_addr = Column(String, nullable=True)
    to_addr = Column(String, nullable=True)

    memo = Column(Text, nullable=True)

    telegram_id = Column(BigInteger, nullable=True)  # –∏–∑ memo, –µ—Å–ª–∏ –±—ã–ª
    parsed_amount_efhc = Column(Numeric(30, 3), nullable=True)  # —Å–∫–æ–ª—å–∫–æ EFHC –º—ã –∑–∞—á–∏—Å–ª–∏–ª–∏ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
    vip_requested = Column(Boolean, default=False, nullable=False)

    processed = Column(Boolean, default=True, nullable=False)
    processed_at = Column(DateTime, default=datetime.utcnow, nullable=False)


# ---------------------------------------------------------------------
# efhc_referrals.referrals ‚Äî —Å–≤—è–∑–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
# ---------------------------------------------------------------------
class Referral(Base):
    __tablename__ = "referrals"
    __table_args__ = {"schema": S_REF, UniqueConstraint("inviter_id", "invitee_id", name="uq_ref_pair")}

    id = Column(BigInteger, primary_key=True, autoincrement=True)
    inviter_id = Column(BigInteger, index=True, nullable=False)
    invitee_id = Column(BigInteger, index=True, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    active = Column(Boolean, default=False, nullable=False)


# ---------------------------------------------------------------------
# efhc_referrals.referral_stats ‚Äî –∞–≥—Ä–µ–≥–∞—Ç—ã/–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
# ---------------------------------------------------------------------
class ReferralStat(Base):
    __tablename__ = "referral_stats"
    __table_args__ = {"schema": S_REF, UniqueConstraint("telegram_id", name="uq_ref_stat_tid")}

    id = Column(BigInteger, primary_key=True, autoincrement=True)
    telegram_id = Column(BigInteger, index=True, nullable=False)
    direct_count = Column(Integer, default=0, nullable=False)
    bonuses_total = Column(Numeric(30, 3), default=0, nullable=False)
    updated_at = Column(DateTime, default=datetime.utcnow, nullable=False)


# ---------------------------------------------------------------------
# efhc_tasks.tasks ‚Äî –∑–∞–¥–∞–Ω–∏—è
# ---------------------------------------------------------------------
class Task(Base):
    __tablename__ = "tasks"
    __table_args__ = {"schema": S_TASK}

    id = Column(BigInteger, primary_key=True, autoincrement=True)
    title = Column(String(255), nullable=False)
    url = Column(Text, nullable=True)
    reward_bonus_efhc = Column(Numeric(30, 3), nullable=False, default=1.0)
    active = Column(Boolean, default=True, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)


# ---------------------------------------------------------------------
# efhc_tasks.user_tasks ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
# ---------------------------------------------------------------------
class UserTask(Base):
    __tablename__ = "user_tasks"
    __table_args__ = {"schema": S_TASK, UniqueConstraint("task_id", "telegram_id", name="uq_user_task")}

    id = Column(BigInteger, primary_key=True, autoincrement=True)
    task_id = Column(BigInteger, ForeignKey(f"{S_TASK}.tasks.id", ondelete="CASCADE"), nullable=False)
    telegram_id = Column(BigInteger, nullable=False)
    completed = Column(Boolean, default=False, nullable=False)
    completed_at = Column(DateTime, nullable=True)

    # –ï—Å–ª–∏ —á–∞—Å—Ç–æ –Ω–∞–¥–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å join ‚Äî –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å relationship –Ω–∞ Task


# ---------------------------------------------------------------------
# efhc_lottery.lotteries ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
# ---------------------------------------------------------------------
class Lottery(Base):
    __tablename__ = "lotteries"
    __table_args__ = {"schema": S_LOT, UniqueConstraint("code", name="uq_lottery_code")}

    id = Column(BigInteger, primary_key=True, autoincrement=True)
    code = Column(String(64), nullable=False, index=True)  # –Ω–∞–ø—Ä–∏–º–µ—Ä "lottery_vip"
    title = Column(String(255), nullable=False)
    prize_type = Column(String(64), nullable=False)        # "VIP_NFT" / "PANEL" / "EFHC" etc.
    target_participants = Column(Integer, nullable=False, default=100)
    active = Column(Boolean, default=True, nullable=False)
    tickets_sold = Column(Integer, default=0, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)


# ---------------------------------------------------------------------
# efhc_lottery.lottery_tickets ‚Äî –±–∏–ª–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# ---------------------------------------------------------------------
class LotteryTicket(Base):
    __tablename__ = "lottery_tickets"
    __table_args__ = {"schema": S_LOT}

    id = Column(BigInteger, primary_key=True, autoincrement=True)
    lottery_code = Column(String(64), nullable=False, index=True)  # —Å–≤—è–∑—ã–≤–∞–µ–º—Å—è –ø–æ code
    telegram_id = Column(BigInteger, nullable=False, index=True)
    purchased_at = Column(DateTime, default=datetime.utcnow, nullable=False)


# ---------------------------------------------------------------------
# efhc_admin.admin_nft_whitelist ‚Äî NFT-—Ç–æ–∫–µ–Ω—ã, –¥–∞—é—â–∏–µ –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∫–µ
# -----------------------------------------------------------------------------
class AdminNFTWhitelist(Base):
    __tablename__ = "admin_nft_whitelist"
    __table_args__ = {"schema": S_ADMIN, UniqueConstraint("nft_address", name="uq_admin_nft")}

    id = Column(BigInteger, primary_key=True, autoincrement=True)
    nft_address = Column(String(200), nullable=False)  # –∞–¥—Ä–µ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ NFT-—Ç–æ–∫–µ–Ω–∞
    comment = Column(Text, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
