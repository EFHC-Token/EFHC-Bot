# üìÇ backend/app/models.py ‚Äî ORM-–º–æ–¥–µ–ª–∏ EFHC Bot (SQLAlchemy 2.x, async)
# =============================================================================
# –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç –í–°–ï —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–µ–∫—Ç–∞ EFHC:
#
# –°–•–ï–ú–´ (schemas) ‚Äî –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ config.py –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏:
#   ‚Ä¢ efhc_core      ‚Äî –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –±–∞–ª–∞–Ω—Å—ã, –ø–∞–Ω–µ–ª–∏, VIP, –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è.
#   ‚Ä¢ efhc_admin     ‚Äî whitelist NFT –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ.
#   ‚Ä¢ efhc_referrals ‚Äî —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞.
#   ‚Ä¢ efhc_lottery   ‚Äî —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –∏ –±–∏–ª–µ—Ç—ã.
#   ‚Ä¢ efhc_tasks     ‚Äî –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∑–∞–¥–∞–Ω–∏—è–º.
#
# –°—Ç–µ–∫:
#   ‚Ä¢ SQLAlchemy ORM (declarative)
#   ‚Ä¢ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ asyncpg (—Å–º. database.py)
#   ‚Ä¢ –ú–∏–≥—Ä–∞—Ü–∏–∏ ‚Äî Alembic (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è, —Å–º. —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞)
#
# –í–ê–ñ–ù–û:
#   ‚Ä¢ –í—Å–µ —Å—É–º–º—ã (EFHC, kWh, –±–æ–Ω—É—Å—ã) —Ö—Ä–∞–Ω–∏–º –≤ Decimal/NUMERIC ‚Äî —Ç–æ—á–Ω–æ—Å—Ç—å –∑–∞–¥–∞—ë–º –∏–∑ config.py.
#   ‚Ä¢ –î–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ–ª–µ–π (telegram_id, —Å–≤—è–∑–∫–∏ lottery_id + telegram_id –∏ —Ç.–ø.) —Å–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å—ã.
#   ‚Ä¢ –î–æ–±–∞–≤–ª—è–µ–º audited-–ø–æ–ª—è: created_at/updated_at, –≥–¥–µ –ø–æ–ª–µ–∑–Ω–æ.
#
# –ì–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:
#   ‚Ä¢ services/*.py ‚Äî –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ (–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è, –ø–æ–∫—É–ø–∫–∏, –æ–±–º–µ–Ω–Ω–∏–∫).
#   ‚Ä¢ routers/*.py  ‚Äî API-—Ä–æ—É—Ç—ã FastAPI.
#   ‚Ä¢ scheduler.py  ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏, –ø—Ä–æ–≤–µ—Ä–∫–∏ VIP –ø–æ NFT.
#   ‚Ä¢ bot.py        ‚Äî Telegram –±–æ—Ç (—á–∏—Ç–∞–µ—Ç/–ø–∏—à–µ—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å—ã –∏/–∏–ª–∏ API).
#
# –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ:
#   ‚Ä¢ –î–ª—è –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü ‚Äî —Å–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –∑–¥–µ—Å—å –∏ –¥–æ–±–∞–≤—å—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é Alembic.
#   ‚Ä¢ –ù–µ –º–µ–Ω—è–π—Ç–µ precision/scale Numerics ¬´–Ω–∞ –≥–æ—Ä—è—á—É—é¬ª ‚Äî –¥–µ–ª–∞–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–∏.
#   ‚Ä¢ –°—Ö–µ–º—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ database.py ‚Üí ensure_schemas().
# =============================================================================

from __future__ import annotations

from datetime import datetime, date
from decimal import Decimal

from sqlalchemy import (
    Column,
    String,
    Integer,
    DateTime,
    Numeric,
    Boolean,
    ForeignKey,
    Date,
    Text,
    Index,
    UniqueConstraint,
)
from sqlalchemy.orm import relationship

from .database import Base
from .config import get_settings

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –µ–¥–∏–Ω—ã–º –∏–Ω—Å—Ç–∞–Ω—Å–æ–º (singleton)
settings = get_settings()

# =============================================================================
# –°–•–ï–ú–ê efhc_core ‚Äî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ë–∞–ª–∞–Ω—Å—ã, –ü–∞–Ω–µ–ª–∏, VIP, –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
# =============================================================================

class User(Base):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞ (–∫–ª—é—á–µ–≤–∞—è —Å—É—â–Ω–æ—Å—Ç—å, —Å–≤—è–∑—ã–≤–∞–µ–º–∞—è –ø–æ Telegram ID).

    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
      ‚Ä¢ –•—Ä–∞–Ω–∏—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
      ‚Ä¢ –°–≤—è–∑–∏:
          - 1:1 -> Balance (–±–∞–ª–∞–Ω—Å EFHC/kWh/bonus)
          - 1:N -> Panel (–Ω–∞–±–æ—Ä –ø–∞–Ω–µ–ª–µ–π)
          - 1:1 -> UserVIP (–Ω–∞–ª–∏—á–∏–µ VIP-–¥–æ—Å—Ç—É–ø–∞)
      ‚Ä¢ Telegram ID –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ primary key (int).

    –ß–∞—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:
      ‚Ä¢ get_or_create_user(telegram_id)
      ‚Ä¢ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è, —è–∑—ã–∫–∞, —é–∑–µ—Ä–Ω–µ–π–º–∞
    """
    __tablename__ = "users"
    __table_args__ = (
        # –ò–Ω–¥–µ–∫—Å –ø–æ username (–ø–æ–∏—Å–∫ –ø–æ –Ω–∏–∫—É –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫–µ)
        Index("ix_core_users_username", "username"),
        {"schema": settings.DB_SCHEMA_CORE},
    )

    # Telegram ID ‚Äî –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á, —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º—ã–π
    telegram_id = Column(Integer, primary_key=True, index=True, unique=True)

    # Telegram username (–Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è) ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å None
    username = Column(String, nullable=True)

    # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî settings.DEFAULT_LANG)
    lang = Column(String(10), default=settings.DEFAULT_LANG)

    # –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
    created_at = Column(DateTime, default=datetime.utcnow)

    # ORM-—Å–≤—è–∑–∏:
    balance = relationship("Balance", uselist=False, back_populates="user")
    panels = relationship("Panel", back_populates="user")
    vip = relationship("UserVIP", uselist=False, back_populates="user")

    def __repr__(self) -> str:
        return f"<User telegram_id={self.telegram_id} username={self.username!r}>"


class Balance(Base):
    """
    –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (EFHC, –±–æ–Ω—É—Å–Ω—ã–µ EFHC, –∫–í—Ç¬∑—á).

    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
      ‚Ä¢ –•—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–∞–ª—é—Ç/—Ä–µ—Å—É—Ä—Å–æ–≤:
          - efhc  ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å EFHC (–¥–ª—è –ø–æ–∫—É–ø–æ–∫, —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –∏ —Ç.–¥.)
          - bonus ‚Äî –±–æ–Ω—É—Å–Ω—ã–µ EFHC (–∫–æ–ø—è—Ç—Å—è –æ—Ç –∑–∞–¥–∞–Ω–∏–π/–∞–∫—Ü–∏–π, —Å–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Ö–æ–¥—É—é—Ç—Å—è –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–∞–Ω–µ–ª–∏)
          - kwh   ‚Äî –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–∏–ª–æ–≤–∞—Ç—Ç-—á–∞—Å—ã (–æ–±–º–µ–Ω–∏–≤–∞—é—Ç—Å—è –Ω–∞ EFHC 1:1)
      ‚Ä¢ –û–¥–∏–Ω –∫ –æ–¥–Ω–æ–º—É —Å User (telegram_id).

    –§–æ—Ä–º–∞—Ç:
      ‚Ä¢ Decimal/NUMERIC –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤.
      ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –±–µ—Ä—ë–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (EFHC_DECIMALS, KWH_DECIMALS).
    """
    __tablename__ = "balances"
    __table_args__ = (
        UniqueConstraint("telegram_id", name="uq_core_balances_telegram_id"),
        {"schema": settings.DB_SCHEMA_CORE},
    )

    # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π surrogate primary key
    id = Column(Integer, primary_key=True)

    # –í–Ω–µ—à–Ω–∏–π –∫–ª—é—á –≤ users.telegram_id ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π (1:1 —Å–≤—è–∑—å)
    telegram_id = Column(
        Integer,
        ForeignKey(f"{settings.DB_SCHEMA_CORE}.users.telegram_id"),
        unique=True,
        index=True,
        nullable=False,
    )

    # –û—Å–Ω–æ–≤–Ω–æ–π EFHC (NUMERIC —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é)
    efhc = Column(Numeric(20, settings.EFHC_DECIMALS), default=Decimal("0.000"))

    # –ë–æ–Ω—É—Å–Ω—ã–µ EFHC (—Ä–∞—Å—Ö–æ–¥—É—é—Ç—Å—è –ø–µ—Ä–≤—ã–º–∏ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–∞–Ω–µ–ª–∏)
    bonus = Column(Numeric(20, settings.EFHC_DECIMALS), default=Decimal("0.000"))

    # –ö–∏–ª–æ–≤–∞—Ç—Ç-—á–∞—Å—ã (–Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –æ—Ç –ø–∞–Ω–µ–ª–µ–π)
    kwh = Column(Numeric(20, settings.KWH_DECIMALS), default=Decimal("0.000"))

    # ORM-—Å–≤—è–∑—å –æ–±—Ä–∞—Ç–Ω–æ –∫ User
    user = relationship("User", back_populates="balance")

    def __repr__(self) -> str:
        return f"<Balance tg={self.telegram_id} efhc={self.efhc} bonus={self.bonus} kwh={self.kwh}>"


class Panel(Base):
    """
    –ü–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Å —Ä–∞–∑–Ω–æ–π –¥–∞—Ç–æ–π –ø–æ–∫—É–ø–∫–∏/–æ–∫–æ–Ω—á–∞–Ω–∏—è).

    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
      ‚Ä¢ –û—Ç—Ä–∞–∂–∞–µ—Ç —Ñ–∞–∫—Ç –ø–æ–∫—É–ø–∫–∏ "–ø–∞–Ω–µ–ª–∏" (—Å—Ç–æ–∏–º–æ—Å—Ç—å: 100 EFHC).
      ‚Ä¢ –ö–∞–∂–¥—ã–π –∏–Ω—Å—Ç–∞–Ω—Å = –∫—É–ø–ª–µ–Ω–Ω—ã–π –ø–∞–∫–µ—Ç, –ø–æ–ª–µ count –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–∞—Ç—á-–ø–æ–∫—É–ø–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ).
      ‚Ä¢ –°—Ä–æ–∫ –∂–∏–∑–Ω–∏ ‚Äî 180 –¥–Ω–µ–π (PANEL_LIFESPAN_DAYS), –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–∞–Ω–µ–ª—å –ø–µ—Ä–µ—Å—Ç–∞—ë—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.

    –ü–æ–ª—è:
      ‚Ä¢ telegram_id   ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü.
      ‚Ä¢ count         ‚Äî —Å–∫–æ–ª—å–∫–æ –ø–∞–Ω–µ–ª–µ–π –≤ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏.
      ‚Ä¢ purchased_at  ‚Äî –¥–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏.
      ‚Ä¢ expires_at    ‚Äî –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å precomputed –Ω–∞ –º–æ–º–µ–Ω—Ç –ø–æ–∫—É–ø–∫–∏).
    """
    __tablename__ = "panels"
    __table_args__ = (
        # –ò–Ω–¥–µ–∫—Å –ø–æ (telegram_id, expires_at) ‚Äî —á–∞—Å—Ç—ã–µ –≤—ã–±–æ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Index("ix_core_panels_tg_expires", "telegram_id", "expires_at"),
        {"schema": settings.DB_SCHEMA_CORE},
    )

    id = Column(Integer, primary_key=True)

    # –í–ª–∞–¥–µ–ª–µ—Ü –ø–∞–Ω–µ–ª–∏
    telegram_id = Column(
        Integer,
        ForeignKey(f"{settings.DB_SCHEMA_CORE}.users.telegram_id"),
        index=True,
        nullable=False,
    )

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π (–µ—Å–ª–∏ –ø–æ–∫—É–ø–∫–∞ –ø–∞—á–∫–æ–π ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –ø–∞–Ω–µ–ª–µ–π –æ–¥–Ω–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º)
    count = Column(Integer, default=1)

    # –í—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏
    purchased_at = Column(DateTime, default=datetime.utcnow)

    # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (purchased_at + PANEL_LIFESPAN_DAYS); –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –Ω–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–º —É—Ä–æ–≤–Ω–µ
    expires_at = Column(DateTime, nullable=True)

    # ORM-—Å–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user = relationship("User", back_populates="panels")

    def __repr__(self) -> str:
        return f"<Panel id={self.id} tg={self.telegram_id} count={self.count} expires_at={self.expires_at}>"


class UserVIP(Base):
    """
    –ü—Ä–∏–∑–Ω–∞–∫ VIP –¥–æ—Å—Ç—É–ø–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
      ‚Ä¢ –ü–æ–∑–≤–æ–ª—è–µ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (–º–Ω–æ–∂–∏—Ç–µ–ª—å VIP_MULTIPLIER = 1.07).
      ‚Ä¢ –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–¥–∞–Ω –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ NFT, –≤—Ä—É—á–Ω—É—é, –∏–ª–∏ –ø–æ whitelist.

    –ü–æ–ª—è:
      ‚Ä¢ telegram_id  ‚Äî –∫—Ç–æ —è–≤–ª—è–µ—Ç—Å—è VIP.
      ‚Ä¢ nft_address  ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π NFT, –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–¥–∞–Ω VIP (–¥–ª—è –∞—É–¥–∏—Ç–∞).
      ‚Ä¢ activated_at ‚Äî –∫–æ–≥–¥–∞ –≤—ã–¥–∞–Ω VIP.
    """
    __tablename__ = "user_vip"
    __table_args__ = (
        {"schema": settings.DB_SCHEMA_CORE},
    )

    # telegram_id ‚Äî primary key, 1:1 –∫ users
    telegram_id = Column(
        Integer,
        ForeignKey(f"{settings.DB_SCHEMA_CORE}.users.telegram_id"),
        primary_key=True,
        index=True,
        nullable=False,
    )

    # NFT, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–ª –ø—Ä–∞–≤–æ –Ω–∞ VIP (–¥–ª—è –∞—É–¥–∏—Ç–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
    nft_address = Column(String, nullable=True, index=True)

    # –î–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VIP
    activated_at = Column(DateTime, default=datetime.utcnow)

    # ORM-—Å–≤—è–∑—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user = relationship("User", back_populates="vip")

    def __repr__(self) -> str:
        return f"<UserVIP tg={self.telegram_id} nft={self.nft_address!r} at={self.activated_at}>"


class DailyGenerationLog(Base):
    """
    –õ–æ–≥ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ kWh.

    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
      ‚Ä¢ –§–∏–∫—Å–∏—Ä—É–µ–º, —Å–∫–æ–ª—å–∫–æ kWh –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É.
      ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å.
      ‚Ä¢ –î–∞—ë—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å/–∞—É–¥–∏—Ç: —Å–∫–æ–ª—å–∫–æ –ø–∞–Ω–µ–ª–µ–π –±—ã–ª–æ —É—á—Ç–µ–Ω–æ, –±—ã–ª –ª–∏ VIP.

    –ü–æ–ª—è:
      ‚Ä¢ telegram_id     ‚Äî –∫–æ–º—É –Ω–∞—á–∏—Å–ª–∏–ª–∏.
      ‚Ä¢ run_date        ‚Äî –¥–∞—Ç–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (DATE, –ø–æ UTC; –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ UTC).
      ‚Ä¢ generated_kwh   ‚Äî –Ω–∞—á–∏—Å–ª–µ–Ω–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ (—É—á–∏—Ç—ã–≤–∞–µ—Ç VIP).
      ‚Ä¢ panels_count    ‚Äî —Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π –±—ã–ª–æ —É—á—Ç–µ–Ω–æ.
      ‚Ä¢ vip             ‚Äî –±—ã–ª –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VIP –Ω–∞ –º–æ–º–µ–Ω—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è.
      ‚Ä¢ created_at      ‚Äî –∫–æ–≥–¥–∞ –∑–∞–ø–∏—Å–∞–ª–∏ –ª–æ–≥.

    –ò–Ω–¥–µ–∫—Å—ã:
      ‚Ä¢ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π (telegram_id, run_date) ‚Äî –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–µ–π –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π.
    """
    __tablename__ = "daily_generation_log"
    __table_args__ = (
        UniqueConstraint("telegram_id", "run_date", name="uq_core_dailygen_tg_date"),
        Index("ix_core_dailygen_tg_date", "telegram_id", "run_date"),
        {"schema": settings.DB_SCHEMA_CORE},
    )

    id = Column(Integer, primary_key=True)

    # –ö–æ–º—É –Ω–∞—á–∏—Å–ª–∏–ª–∏ kWh
    telegram_id = Column(
        Integer,
        ForeignKey(f"{settings.DB_SCHEMA_CORE}.users.telegram_id"),
        index=True,
        nullable=False,
    )

    # –î–∞—Ç–∞ (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏) ‚Äî —á—Ç–æ–±—ã –Ω–∞—á–∏—Å–ª—è—Ç—å —Å—Ç—Ä–æ–≥–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
    run_date = Column(Date, default=date.today, nullable=False)

    # –ù–∞—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ kWh (Decimal)
    generated_kwh = Column(Numeric(20, settings.KWH_DECIMALS), nullable=False)

    # –°–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π —É—á—Ç–µ–Ω–æ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ
    panels_count = Column(Integer, default=0)

    # –ë—ã–ª –ª–∏ VIP-—Å—Ç–∞—Ç—É—Å –≤ –º–æ–º–µ–Ω—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    vip = Column(Boolean, default=False)

    # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ (–∞—É–¥–∏—Ç)
    created_at = Column(DateTime, default=datetime.utcnow)

    def __repr__(self) -> str:
        return f"<DailyGenerationLog tg={self.telegram_id} date={self.run_date} kwh={self.generated_kwh} vip={self.vip}>"


# =============================================================================
# –°–•–ï–ú–ê efhc_admin ‚Äî Whitelist NFT –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
# =============================================================================

class AdminNFTWhitelist(Base):
    """
    –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ NFT, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.

    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
      ‚Ä¢ –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –æ–¥–∏–Ω –∏–∑ NFT –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ ‚Äî –æ–Ω —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.
      ‚Ä¢ –°–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É (—Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞).

    –ü–æ–ª—è:
      ‚Ä¢ nft_address ‚Äî –∞–¥—Ä–µ—Å NFT (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π).
      ‚Ä¢ added_at    ‚Äî –∫–æ–≥–¥–∞ –¥–æ–±–∞–≤–∏–ª–∏.
      ‚Ä¢ added_by    ‚Äî Telegram ID —Ç–æ–≥–æ, –∫—Ç–æ –¥–æ–±–∞–≤–∏–ª (–¥–ª—è –∞—É–¥–∏—Ç–∞).
    """
    __tablename__ = "admin_nft_whitelist"
    __table_args__ = (
        UniqueConstraint("nft_address", name="uq_admin_whitelist_nft"),
        Index("ix_admin_whitelist_nft", "nft_address"),
        {"schema": settings.DB_SCHEMA_ADMIN},
    )

    id = Column(Integer, primary_key=True)

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å NFT (string); –¥–ª—è TON ‚Äî —ç—Ç–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–π ID NFT.
    nft_address = Column(String, unique=True, nullable=False)

    # –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ whitelist
    added_at = Column(DateTime, default=datetime.utcnow)

    # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–∏–ª –∑–∞–ø–∏—Å—å (–¥–ª—è –∞—É–¥–∏—Ç–∞)
    added_by = Column(Integer, nullable=True)

    def __repr__(self) -> str:
        return f"<AdminNFTWhitelist id={self.id} nft={self.nft_address!r}>"


# =============================================================================
# –°–•–ï–ú–ê efhc_referrals ‚Äî –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
# =============================================================================

class Referral(Base):
    """
    –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏: –∫—Ç–æ –∫–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª.

    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
      ‚Ä¢ –°—Ç—Ä–æ–∏–º "–¥–µ—Ä–µ–≤–æ" –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π ‚Äî —É –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –µ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å.
      ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏ –ø–æ–¥—Å—á—ë—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.

    –ü–æ–ª—è:
      ‚Ä¢ inviter_id ‚Äî Telegram ID —Ç–æ–≥–æ, –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª.
      ‚Ä¢ invited_id ‚Äî Telegram ID –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ò–Ω–¥–µ–∫—Å—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
      ‚Ä¢ –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –æ–¥–Ω–æ–π –ø–∞—Ä—ã (inviter_id, invited_id),
        –Ω–æ –æ—Å—Ç–∞–≤–∏–º –±–µ–∑ —è–≤–Ω–æ–≥–æ UniqueConstraint, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–Ω–æ—Å—Ç—å –≤ –±—É–¥—É—â–µ–º.
    """
    __tablename__ = "referrals"
    __table_args__ = (
        Index("ix_ref_referrals_inviter", "inviter_id"),
        Index("ix_ref_referrals_invited", "invited_id"),
        {"schema": settings.DB_SCHEMA_REFERRAL},
    )

    id = Column(Integer, primary_key=True)

    inviter_id = Column(
        Integer,
        ForeignKey(f"{settings.DB_SCHEMA_CORE}.users.telegram_id"),
        nullable=False,
        index=True,
    )

    invited_id = Column(
        Integer,
        ForeignKey(f"{settings.DB_SCHEMA_CORE}.users.telegram_id"),
        nullable=False,
        index=True,
    )

    created_at = Column(DateTime, default=datetime.utcnow)

    def __repr__(self) -> str:
        return f"<Referral inviter={self.inviter_id} invited={self.invited_id}>"


# =============================================================================
# –°–•–ï–ú–ê efhc_lottery ‚Äî –†–æ–∑—ã–≥—Ä—ã—à–∏ –∏ –±–∏–ª–µ—Ç—ã
# =============================================================================

class LotteryRound(Base):
    """
    –†–æ–∑—ã–≥—Ä—ã—à (–ª–æ—Ç–µ—Ä–µ—è).

    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
      ‚Ä¢ –•—Ä–∞–Ω–∏—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Ç–∏–ø –ø—Ä–∏–∑–∞, —Ü–µ–ª–µ–≤–æ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤).
      ‚Ä¢ –ü—Ä–∏–∑ –º–æ–∂–µ—Ç –±—ã—Ç—å: VIP_NFT –∏–ª–∏ PANEL (—Å–º. –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö).

    –ü–æ–ª—è:
      ‚Ä¢ title               ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.
      ‚Ä¢ prize_type          ‚Äî "VIP_NFT" | "PANEL" (—Å—Ç—Ä–æ–∫–∞).
      ‚Ä¢ target_participants ‚Äî —Ü–µ–ª–µ–≤–æ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞).
      ‚Ä¢ finished            ‚Äî –∑–∞–∫—Ä—ã—Ç –ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à.
    """
    __tablename__ = "lottery_rounds"
    __table_args__ = (
        Index("ix_lot_rounds_finished", "finished"),
        {"schema": settings.DB_SCHEMA_LOTTERY},
    )

    id = Column(Integer, primary_key=True)

    # –ù–∞–∑–≤–∞–Ω–∏–µ/—Ç–µ–º–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–¥–ª—è UI)
    title = Column(String, nullable=False)

    # –¢–∏–ø –ø—Ä–∏–∑–∞: "VIP_NFT" –∏–ª–∏ "PANEL" (—Å—Ç—Ä–æ–∫–∞; –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ Enum –≤ –±—É–¥—É—â–µ–º)
    prize_type = Column(String, nullable=False)

    # –¶–µ–ª–µ–≤–æ–π –æ–±—ä—ë–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–¥–ª—è —É–ø—Ä–∞–≤–ª—è–µ–º–æ—Å—Ç–∏ –∏ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞)
    target_participants = Column(Integer, default=0)

    # –ö–æ–≥–¥–∞ —Å–æ–∑–¥–∞–Ω
    created_at = Column(DateTime, default=datetime.utcnow)

    # –§–ª–∞–≥ ‚Äî –∑–∞–≤–µ—Ä—à—ë–Ω –ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à (—Ä–æ–∑—ã–≥—Ä—ã—à –ø—Ä–æ–≤–µ–¥—ë–Ω, –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã)
    finished = Column(Boolean, default=False)

    def __repr__(self) -> str:
        return f"<LotteryRound id={self.id} title={self.title!r} finished={self.finished}>"


class LotteryTicket(Base):
    """
    –ë–∏–ª–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å = –æ–¥–∏–Ω –∫—É–ø–ª–µ–Ω–Ω—ã–π –±–∏–ª–µ—Ç).

    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
      ‚Ä¢ –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫—É–ø–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –æ–¥–∏–Ω —Ä–æ–∑—ã–≥—Ä—ã—à.
      ‚Ä¢ –ù–∞ –±–∏–ª–µ—Ç—ã —Ä–∞—Å—Ö–æ–¥—É—é—Ç—Å—è EFHC (—Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º).
      ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (—Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –ø–æ –±–∏–ª–µ—Ç–∞–º).

    –ü–æ–ª—è:
      ‚Ä¢ lottery_id  ‚Äî –Ω–∞ –∫–∞–∫–æ–π —Ä–æ–∑—ã–≥—Ä—ã—à –±–∏–ª–µ—Ç.
      ‚Ä¢ telegram_id ‚Äî —á–µ–π –±–∏–ª–µ—Ç.
      ‚Ä¢ purchased_at ‚Äî –∫–æ–≥–¥–∞ –∫—É–ø–ª–µ–Ω.

    –ò–Ω–¥–µ–∫—Å—ã:
      ‚Ä¢ (lottery_id, telegram_id) ‚Äî –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –±–∏–ª–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
      ‚Ä¢ telegram_id ‚Äî –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∫–∏ –≤—Å–µ—Ö –±–∏–ª–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    __tablename__ = "lottery_tickets"
    __table_args__ = (
        Index("ix_lot_tickets_lottery_tg", "lottery_id", "telegram_id"),
        Index("ix_lot_tickets_tg", "telegram_id"),
        {"schema": settings.DB_SCHEMA_LOTTERY},
    )

    id = Column(Integer, primary_key=True)

    lottery_id = Column(
        Integer,
        ForeignKey(f"{settings.DB_SCHEMA_LOTTERY}.lottery_rounds.id"),
        nullable=False,
        index=True,
    )

    telegram_id = Column(
        Integer,
        ForeignKey(f"{settings.DB_SCHEMA_CORE}.users.telegram_id"),
        nullable=False,
        index=True,
    )

    purchased_at = Column(DateTime, default=datetime.utcnow)

    def __repr__(self) -> str:
        return f"<LotteryTicket id={self.id} lottery={self.lottery_id} tg={self.telegram_id}>"


# =============================================================================
# –°–•–ï–ú–ê efhc_tasks ‚Äî –ó–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# =============================================================================

class Task(Base):
    """
    –ó–∞–¥–∞–Ω–∏–µ (–¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º).

    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
      ‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è, –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ bonus EFHC, —Ç–∏–ø —Ü–µ–Ω—ã (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω–µ—à–Ω—è—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è).
      ‚Ä¢ –ù–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Ñ—Ä–æ–Ω—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç –±–æ–Ω—É—Å—ã.

    –ü–æ–ª—è:
      ‚Ä¢ code                ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∑–∞–¥–∞–Ω–∏—è (–¥–ª—è –ø–æ–∏—Å–∫–∞/—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏).
      ‚Ä¢ title               ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞–Ω–∏—è (UI).
      ‚Ä¢ reward_bonus_efhc   ‚Äî –Ω–∞–≥—Ä–∞–¥–∞ –≤ –±–æ–Ω—É—Å–Ω—ã—Ö EFHC (Decimal).
      ‚Ä¢ price_usd           ‚Äî "–Ω–æ–º–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞" –∑–∞–¥–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).

    –ò–Ω–¥–µ–∫—Å—ã:
      ‚Ä¢ code ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π.
    """
    __tablename__ = "tasks"
    __table_args__ = (
        UniqueConstraint("code", name="uq_tasks_code"),
        Index("ix_tasks_code", "code"),
        {"schema": settings.DB_SCHEMA_TASKS},
    )

    id = Column(Integer, primary_key=True)

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: "JOIN_CHANNEL", "FOLLOW_TWITTER", ...
    code = Column(String, nullable=False)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫/–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    title = Column(String, nullable=False)

    # –ù–∞–≥—Ä–∞–¥–∞ (bonus EFHC), –±—É–¥–µ—Ç –ø—Ä–∏–±–∞–≤–ª–µ–Ω–∞ –∫ Balance.bonus
    reward_bonus_efhc = Column(Numeric(20, settings.EFHC_DECIMALS), default=Decimal("1.000"))

    # –ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–¥–∞–Ω–∏—è (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä)
    price_usd = Column(Numeric(20, 2), default=Decimal("0.30"))

    # –ö–æ–≥–¥–∞ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ
    created_at = Column(DateTime, default=datetime.utcnow)

    def __repr__(self) -> str:
        return f"<Task id={self.id} code={self.code!r} reward={self.reward_bonus_efhc}>"


class TaskUserProgress(Base):
    """
    –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∑–∞–¥–∞–Ω–∏—è–º.

    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
      ‚Ä¢ –•—Ä–∞–Ω–∏—Ç —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (pending/completed/verified).
      ‚Ä¢ –ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —ç—Ç–æ–≥–æ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –±–æ–Ω—É—Å–Ω—ã–µ EFHC.

    –ü–æ–ª—è:
      ‚Ä¢ task_id     ‚Äî –∫–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
      ‚Ä¢ telegram_id ‚Äî –∫—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç.
      ‚Ä¢ status      ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ ("pending" | "completed" | "verified").
      ‚Ä¢ updated_at  ‚Äî –∫–æ–≥–¥–∞ –º–µ–Ω—è–ª–æ—Å—å.

    –ò–Ω–¥–µ–∫—Å—ã:
      ‚Ä¢ (task_id, telegram_id) ‚Äî —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏.
    """
    __tablename__ = "task_user_progress"
    __table_args__ = (
        Index("ix_task_progress_task_tg", "task_id", "telegram_id"),
        {"schema": settings.DB_SCHEMA_TASKS},
    )

    id = Column(Integer, primary_key=True)

    task_id = Column(
        Integer,
        ForeignKey(f"{settings.DB_SCHEMA_TASKS}.tasks.id"),
        nullable=False,
        index=True,
    )

    telegram_id = Column(
        Integer,
        ForeignKey(f"{settings.DB_SCHEMA_CORE}.users.telegram_id"),
        nullable=False,
        index=True,
    )

    # –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
    #   pending   ‚Äî –∑–∞–¥–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
    #   completed ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∏–ª –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ (–∏–ª–∏ –±–æ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª), –æ–∂–∏–¥–∞–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    #   verified  ‚Äî –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã, –±–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω
    status = Column(String, default="pending")

    updated_at = Column(DateTime, default=datetime.utcnow)

    def __repr__(self) -> str:
        return f"<TaskUserProgress id={self.id} task={self.task_id} tg={self.telegram_id} status={self.status!r}>"
