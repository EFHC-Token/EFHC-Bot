# üìÇ backend/app/models.py ‚Äî SQLAlchemy-–º–æ–¥–µ–ª–∏ (–ø–æ–ª–Ω—ã–π —Å–æ—Å—Ç–∞–≤)
# -----------------------------------------------------------------------------
# –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
#   - –û–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–µ–∫—Ç–∞ (—è–¥—Ä–æ, —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞, –ª–æ—Ç–µ—Ä–µ–∏, –∑–∞–¥–∞–Ω–∏—è, –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø).
#   - –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å async SQLAlchemy 2.x.
#
# –ö–∞–∫ —Å–≤—è–∑–∞–Ω–æ:
#   - schemas.py –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è Pydantic-—Å—Ö–µ–º.
#   - —Å–µ—Ä–≤–∏—Å—ã/—Ä–æ—É—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Å —ç—Ç–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏.
#
# –í–∞–∂–Ω–æ:
#   - –î–µ–Ω–µ–∂–Ω—ã–µ –ø–æ–ª—è: Numeric(..., 3) –∏ Decimal –≤ –∫–æ–¥–µ.
#   - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º ondelete –∫–∞—Å–∫–∞–¥—ã –ø–æ–≤—Å–µ–º–µ—Å—Ç–Ω–æ ‚Äî —Ç–æ–ª—å–∫–æ —Ç–∞–º, –≥–¥–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ.
# -----------------------------------------------------------------------------

from sqlalchemy.orm import declarative_base, relationship, Mapped, mapped_column
from sqlalchemy import (
    BigInteger, Integer, String, Boolean, Numeric, TIMESTAMP, ForeignKey, JSON, UniqueConstraint, Index
)
from sqlalchemy.sql import func

Base = declarative_base()

# -----------------------
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ / —è–¥—Ä–æ
# -----------------------
class User(Base):
    __tablename__ = "users"
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)
    telegram_id: Mapped[int] = mapped_column(BigInteger, unique=True, index=True)
    username: Mapped[str | None] = mapped_column(String(64), nullable=True)
    lang: Mapped[str] = mapped_column(String(8), default="RU")

    wallet_ton: Mapped[str | None] = mapped_column(String(128), unique=False, nullable=True)
    # –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å EFHC ‚Äî –≤—ã–≤–æ–¥–∏–º—ã–π/—Ç–æ—Ä–≥–æ–≤—ã–π
    main_balance: Mapped[str] = mapped_column(Numeric(14, 3), default=0, nullable=False)
    # –ë–æ–Ω—É—Å–Ω—ã–π EFHC ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π, –Ω–µ–≤—ã–ª–∞–∑–Ω–æ–π (—Ç—Ä–∞—Ç–∏—Ç—Å—è –Ω–∞ –ø–∞–Ω–µ–ª–∏/–∞–ø–≥—Ä–µ–π–¥—ã)
    bonus_balance: Mapped[str] = mapped_column(Numeric(14, 3), default=0, nullable=False)

    total_generated_kwh: Mapped[str] = mapped_column(Numeric(18, 3), default=0, nullable=False)
    todays_generated_kwh: Mapped[str] = mapped_column(Numeric(18, 3), default=0, nullable=False)

    is_active_user: Mapped[bool] = mapped_column(Boolean, default=False)   # –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Å–ª–µ 1-–π –ø–∞–Ω–µ–ª–∏
    has_vip: Mapped[bool] = mapped_column(Boolean, default=False)          # –∫—ç—à —Ñ–ª–∞–≥–∞ VIP –ø–æ NFT-–ø—Ä–æ–≤–µ—Ä–∫–µ

    referred_by: Mapped[int | None] = mapped_column(BigInteger, nullable=True, index=True)
    created_at: Mapped[str] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now())
    updated_at: Mapped[str] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now(), onupdate=func.now())

    panels: Mapped[list["Panel"]] = relationship("Panel", back_populates="owner")

Index("ix_users_referred_by", User.referred_by)

class Panel(Base):
    __tablename__ = "panels"
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("users.id", ondelete="CASCADE"), index=True)
    purchase_date: Mapped[str] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now())
    lifespan_days: Mapped[int] = mapped_column(Integer, default=180)
    daily_generation: Mapped[str] = mapped_column(Numeric(10, 3), default=0.598)
    active: Mapped[bool] = mapped_column(Boolean, default=True)

    owner: Mapped["User"] = relationship("User", back_populates="panels")

class TransactionLog(Base):
    __tablename__ = "transaction_logs"
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)
    user_id: Mapped[int] = mapped_column(BigInteger, index=True)
    op_type: Mapped[str] = mapped_column(String(64))     # buy_panel, bonus_award, main_transfer, exchange –∏ —Ç.–¥.
    amount: Mapped[str] = mapped_column(Numeric(14, 3))
    source: Mapped[str] = mapped_column(String(32))      # bonus, main, combined, kwh, referral, admin
    meta: Mapped[dict | None] = mapped_column(JSON, nullable=True)
    created_at: Mapped[str] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now())

Index("ix_tx_user_op", TransactionLog.user_id, TransactionLog.op_type)

# -----------------------
# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
# -----------------------
class Referral(Base):
    __tablename__ = "referrals"
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)
    inviter_id: Mapped[int] = mapped_column(BigInteger, index=True)
    invited_id: Mapped[int] = mapped_column(BigInteger, unique=True, index=True)  # –æ–¥–∏–Ω —Ä–∞–∑
    is_active: Mapped[bool] = mapped_column(Boolean, default=False)               # —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è True –ø–æ—Å–ª–µ 1-–π –ø–∞–Ω–µ–ª–∏
    created_at: Mapped[str] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now())

Index("ix_ref_inviter_active", Referral.inviter_id, Referral.is_active)

class ReferralMilestone(Base):
    __tablename__ = "referral_milestones"
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)
    inviter_id: Mapped[int] = mapped_column(BigInteger, index=True)
    milestone: Mapped[int] = mapped_column(Integer)     # 10, 100, 1000...
    reward_efhc: Mapped[str] = mapped_column(Numeric(14, 3))
    awarded: Mapped[bool] = mapped_column(Boolean, default=False)
    created_at: Mapped[str] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now())

UniqueConstraint("inviter_id", "milestone", name="uq_ref_milestone_once")

# -----------------------
# –õ–æ—Ç–µ—Ä–µ–∏ (—Ä–æ–∑—ã–≥—Ä—ã—à–∏)
# -----------------------
class Lottery(Base):
    __tablename__ = "lotteries"
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)
    code: Mapped[str] = mapped_column(String(64), unique=True)       # –Ω–∞–ø—Ä–∏–º–µ—Ä "lottery_vip_2025_08_01"
    title: Mapped[str] = mapped_column(String(128))
    prize_type: Mapped[str] = mapped_column(String(32))              # VIP_NFT | PANEL
    target_participants: Mapped[int] = mapped_column(Integer)        # 500 –∏–ª–∏ 200
    ticket_price_efhc: Mapped[str] = mapped_column(Numeric(14, 3), default=1)
    max_tickets_per_user: Mapped[int] = mapped_column(Integer, default=10)
    is_active: Mapped[bool] = mapped_column(Boolean, default=True)
    created_at: Mapped[str] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now())
    ended_at: Mapped[str | None] = mapped_column(TIMESTAMP(timezone=True), nullable=True)
    winner_user_id: Mapped[int | None] = mapped_column(BigInteger, nullable=True)

class LotteryTicket(Base):
    __tablename__ = "lottery_tickets"
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)
    lottery_id: Mapped[int] = mapped_column(ForeignKey("lotteries.id", ondelete="CASCADE"), index=True)
    user_id: Mapped[int] = mapped_column(BigInteger, index=True)
    ticket_number: Mapped[int] = mapped_column(Integer)  # –ø–æ—Ä—è–¥–∫–æ–≤—ã–π ‚Ññ
    created_at: Mapped[str] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now())

UniqueConstraint("lottery_id", "user_id", "ticket_number", name="uq_lottery_user_ticket")

# -----------------------
# –ó–∞–¥–∞–Ω–∏—è (Tasks)
# -----------------------
class Task(Base):
    __tablename__ = "tasks"
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)
    # —Ç–∏–ø: subscribe / visit / like / repost / promo / poll
    type: Mapped[str] = mapped_column(String(32))
    title: Mapped[str] = mapped_column(String(256))
    url: Mapped[str | None] = mapped_column(String(512), nullable=True)
    # –°–∫–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ (–ª–∏–º–∏—Ç —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è)
    available_count: Mapped[int] = mapped_column(Integer, default=0)
    reward_bonus_efhc: Mapped[str] = mapped_column(Numeric(14, 3), default=1)
    is_active: Mapped[bool] = mapped_column(Boolean, default=False)  # –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
    created_by_admin_id: Mapped[int | None] = mapped_column(BigInteger, nullable=True)
    created_at: Mapped[str] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now())

class TaskCompletion(Base):
    __tablename__ = "task_completions"
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)
    task_id: Mapped[int] = mapped_column(ForeignKey("tasks.id", ondelete="CASCADE"), index=True)
    user_id: Mapped[int] = mapped_column(BigInteger, index=True)
    status: Mapped[str] = mapped_column(String(32), default="done")  # done / rejected
    created_at: Mapped[str] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now())

UniqueConstraint("task_id", "user_id", name="uq_task_once_per_user")

# -----------------------
# –ê–¥–º–∏–Ω—Å–∫–∞—è —á–∞—Å—Ç—å / –ø—Ä–∞–≤–∞
# -----------------------
class AdminNFT(Base):
    __tablename__ = "admin_nft_whitelist"
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)
    # –°—Å—ã–ª–∫–∞/–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä NFT –∏–∑ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –¥–∞—é—â–µ–π –¥–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω–∫—É
    nft_url: Mapped[str] = mapped_column(String(512), unique=True)
    # –ú–æ–≥—É—Ç –ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü—ã —ç—Ç–æ–≥–æ NFT –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É
    enabled: Mapped[bool] = mapped_column(Boolean, default=True)
    created_at: Mapped[str] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now())

class AdminNFTPermission(Base):
    __tablename__ = "admin_nft_permissions"
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)
    admin_nft_id: Mapped[int] = mapped_column(ForeignKey("admin_nft_whitelist.id", ondelete="CASCADE"), index=True)
    # –ì—Ä–∞–Ω—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∞–≤–∞ (–≥–∞–ª–æ—á–∫–∞–º–∏): shop / tasks / lotteries / users / withdrawals / panels / everything
    can_shop: Mapped[bool] = mapped_column(Boolean, default=False)
    can_tasks: Mapped[bool] = mapped_column(Boolean, default=False)
    can_lotteries: Mapped[bool] = mapped_column(Boolean, default=False)
    can_users: Mapped[bool] = mapped_column(Boolean, default=False)
    can_withdrawals: Mapped[bool] = mapped_column(Boolean, default=False)
    can_panels: Mapped[bool] = mapped_column(Boolean, default=False)
    can_all: Mapped[bool] = mapped_column(Boolean, default=False)

# -----------------------
# –ú–∞–≥–∞–∑–∏–Ω / –∑–∞–∫–∞–∑—ã / –∑–∞—è–≤–∫–∏
# -----------------------
class ShopItem(Base):
    __tablename__ = "shop_items"
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)
    code: Mapped[str] = mapped_column(String(64), unique=True)   # efhc_100_usdt, vip_ton –∏ —Ç.–¥.
    label: Mapped[str] = mapped_column(String(128))
    pay_asset: Mapped[str] = mapped_column(String(16))          # TON | USDT | EFHC
    price: Mapped[str] = mapped_column(Numeric(14, 3))
    is_active: Mapped[bool] = mapped_column(Boolean, default=True)
    created_at: Mapped[str] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now())

class ShopOrder(Base):
    __tablename__ = "shop_orders"
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)
    user_id: Mapped[int] = mapped_column(BigInteger, index=True)
    item_code: Mapped[str] = mapped_column(String(64), index=True)
    pay_asset: Mapped[str] = mapped_column(String(16))
    status: Mapped[str] = mapped_column(String(32), default="pending")  # pending/paid/canceled/failed
    # –ú–µ–º–æ ID –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö (TON/USDT): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    memo_telegram_id: Mapped[str | None] = mapped_column(String(64), nullable=True)
    tx_hash: Mapped[str | None] = mapped_column(String(256), nullable=True)  # —Ö–µ—à –≤–Ω–µ—à–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    created_at: Mapped[str] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now())
    updated_at: Mapped[str] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now(), onupdate=func.now())

# -----------------------
# –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ EFHC –∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–¥–∞—á—É VIP NFT (–≤—Ä—É—á–Ω—É—é)
# -----------------------
class WithdrawalRequest(Base):
    __tablename__ = "withdrawal_requests"
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)
    user_id: Mapped[int] = mapped_column(BigInteger, index=True)
    amount_efhc: Mapped[str] = mapped_column(Numeric(14, 3))
    status: Mapped[str] = mapped_column(String(32), default="pending")  # pending/approved/rejected/paid
    history: Mapped[list | None] = mapped_column(JSON, nullable=True)   # –∏—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
    created_at: Mapped[str] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now())
    updated_at: Mapped[str] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now(), onupdate=func.now())

class VipNftRequest(Base):
    __tablename__ = "vip_nft_requests"
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)
    user_id: Mapped[int] = mapped_column(BigInteger, index=True)
    pay_asset: Mapped[str] = mapped_column(String(16))          # EFHC/TON/USDT
    status: Mapped[str] = mapped_column(String(32), default="pending")  # pending/approved/rejected/sent
    history: Mapped[list | None] = mapped_column(JSON, nullable=True)
    # –î–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ NFT –∞–¥–º–∏–Ω–æ–º (—á–µ—Ä–µ–∑ Tonkeeper): –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞—è–≤–∫–∞ –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å done/sent
    created_at: Mapped[str] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now())
    updated_at: Mapped[str] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now(), onupdate=func.now())

# -----------------------
# –ö—ç—à –≤–ª–∞–¥–µ–Ω–∏—è VIP NFT (–¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
# -----------------------
class VipOwnershipCache(Base):
    __tablename__ = "vip_ownership_cache"
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)
    user_id: Mapped[int] = mapped_column(BigInteger, unique=True, index=True)
    has_vip: Mapped[bool] = mapped_column(Boolean, default=False)
    last_checked_at: Mapped[str] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now(), onupdate=func.now())
