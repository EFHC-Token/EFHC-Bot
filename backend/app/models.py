# üìÇ backend/app/models.py ‚Äî SQLAlchemy ORM-–º–æ–¥–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ EFHC (–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø)
# -----------------------------------------------------------------------------
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
#   ‚Ä¢ –û–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã EFHC-—ç–∫–æ—Å–∏—Å—Ç–µ–º—ã:
#       - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –±–∞–ª–∞–Ω—Å—ã, –∫–æ—à–µ–ª—å–∫–∏.
#       - –ü–∞–Ω–µ–ª–∏ –∏ –∏—Ö –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª (180 –¥–Ω–µ–π), –∞—Ä—Ö–∏–≤ –≤ —Ç–æ–π –∂–µ —Ç–∞–±–ª–∏—Ü–µ (active=false).
#       - VIP-—Å—Ç–∞—Ç—É—Å (–ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ NFT –≤ TON-–∫–æ—à–µ–ª—å–∫–µ).
#       - EFHC-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—á–µ—Ä–µ–∑ –ë–∞–Ω–∫) –∏ –ª–æ–≥ –ø–µ—Ä–µ–≤–æ–¥–æ–≤/—Å–ø–∏—Å–∞–Ω–∏–π.
#       - –ú–∞–≥–∞–∑–∏–Ω (Shop): –∑–∞–∫–∞–∑—ã EFHC/VIP/NFT –∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä—É—á–Ω—É—é –≤—ã–¥–∞—á—É NFT.
#       - –í—ã–≤–æ–¥—ã EFHC: –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ EFHC (user‚Üí–ë–∞–Ω–∫), approve/reject/send.
#       - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –∏ –ª–æ–≥–∏ –±–æ–Ω—É—Å–æ–≤.
#       - –î–Ω–µ–≤–Ω–∞—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏/–∞–Ω–∞–ª–∏—Ç–∏–∫–∏).
#
# –í–∞–∂–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞ (–∑–∞–∫—Ä–µ–ø–ª—è–µ–º –≤ –º–æ–¥–µ–ª—è—Ö –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö):
#   ‚Ä¢ EFHC –∏ kWh —Ö—Ä–∞–Ω–∏–º –≤ NUMERIC(30,8).
#   ‚Ä¢ 1 EFHC = 1 kWh (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å).
#   ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è kWh ‚Äî ¬´–ª–µ–Ω–∏–≤–∞—è¬ª:
#       - –í –º–æ–¥–µ–ª–∏ User –µ—Å—Ç—å –ø–æ–ª–µ last_generated_at.
#       - –í –º–æ–¥–µ–ª–∏ Balance –µ—Å—Ç—å –ø–æ–ª—è kwh_available (—á—Ç–æ –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å) –∏ kwh_total (–∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞).
#       - –ü—Ä–∏ –ª—é–±–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–≤—Ö–æ–¥ –≤ WebApp / –æ–±–º–µ–Ω / –ø–æ–∫—É–ø–∫–∞ / –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è) –±–µ–∫–µ–Ω–¥ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:
#           delta_seconds = now - last_generated_at
#           added = rate * active_panels * delta_seconds
#           kwh_available += added; kwh_total += added; last_generated_at = now
#     NFT-–ø—Ä–æ–≤–µ—Ä–∫–∞ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ) —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞–≤–∫—É –¥–ª—è –±—É–¥—É—â–∏—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π (VIP=0.640/—Å—É—Ç–∫–∏ –∏–ª–∏ 0.598/—Å—É—Ç–∫–∏).
#   ‚Ä¢ –ü–∞–Ω–µ–ª–∏: —Å—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ 180 –¥–Ω–µ–π (expires_at = activated_at + interval '180 days').
#     –ê—Ä—Ö–∏–≤ ‚Äî —Ç–µ –∂–µ –∑–∞–ø–∏—Å–∏ —Å active=false –∏ archived_at != NULL.
#   ‚Ä¢ –í—Å–µ EFHC-–¥–≤–∏–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ë–∞–Ω–∫ (ID=362746228), –ª–æ–≥ –≤ efhc_transfers_log.
#   ‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–µ EFHC ‚Äî –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∏–∑ –ë–∞–Ω–∫–∞ (bonus) –∏ —Ç—Ä–∞—Ç—è—Ç—Å—è —Å—Ç—Ä–æ–≥–æ –Ω–∞ –ø–∞–Ω–µ–ª–∏, –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–∞–Ω–µ–ª–µ–π –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –ë–∞–Ω–∫—É.
#   ‚Ä¢ WebApp —Ä–∞–∑–¥–µ–ª—ã: –û–±–º–µ–Ω–Ω–∏–∫ (–æ–±–º–µ–Ω kWh‚ÜíEFHC), Panels (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª—è–º–∏), –†–µ–π—Ç–∏–Ω–≥ (–ª–∏–¥–µ—Ä–±–æ—Ä–¥—ã),
#     Shop (–ø–æ–∫—É–ø–∫–∞ EFHC/VIP/NFT), Withdraw (–≤—ã–≤–æ–¥ EFHC).
#   ‚Ä¢ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –±–∞–Ω–∫ EFHC, –º–æ–¥–µ—Ä–∞—Ü–∏—è Shop/Withdraw, –ª–∏–º–∏—Ç—ã, –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—ã, –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤.
#
# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, –≤–µ—Ä—Å–∏–∏ –∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è:
#   ‚Ä¢ SQLAlchemy v2.x (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ database.py).
#   ‚Ä¢ FastAPI 0.103.2 (Pydantic v1).
#   ‚Ä¢ –í–°–ï –¥–µ–Ω–µ–∂–Ω—ã–µ/—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è: Numeric(30,8) ‚Äî –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤ –∫–æ–¥–µ (Decimal quantize, 8 –∑–Ω–∞–∫–æ–≤).
#   ‚Ä¢ –°—Ö–µ–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: settings.DB_SCHEMA_CORE (–Ω–∞–ø—Ä–∏–º–µ—Ä, "efhc_core").
#
# –ì–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:
#   ‚Ä¢ –í–æ –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–∞—Ö (user/admin/shop/withdraw/panels/exchange/rating).
#   ‚Ä¢ –í –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ (scheduler.py) ‚Äî –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π –∏ VIP-—Å–∫–∞–Ω–µ—Ä.
#   ‚Ä¢ –í —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö (efhc_transactions.py) ‚Äî —Å–ø–∏—Å–∞–Ω–∏—è/–∑–∞—á–∏—Å–ª–µ–Ω–∏—è EFHC.
# -----------------------------------------------------------------------------

from __future__ import annotations

from datetime import datetime
from typing import Optional

from sqlalchemy import (
    BigInteger,
    Boolean,
    Column,
    DateTime,
    Enum,
    ForeignKey,
    Index,
    Integer,
    MetaData,
    Numeric,
    String,
    Text,
    UniqueConstraint,
    JSON,
    func,
)
from sqlalchemy.orm import declarative_base, relationship

from .config import get_settings

# -----------------------------------------------------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, –±–∞–∑–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –∏–º—ë–Ω
# -----------------------------------------------------------------------------
settings = get_settings()

# –ï–¥–∏–Ω—ã–µ –∏–º–µ–Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è Alembic (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞)
# –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∫—Ä–æ—Å—Å-–ë–î –º–∏–≥—Ä–∞—Ü–∏—è–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º—É autogenerate.
naming_convention = {
    "ix": "ix_%(schema)s_%(table_name)s_%(column_0_label)s",
    "uq": "uq_%(schema)s_%(table_name)s_%(column_0_name)s",
    "ck": "ck_%(schema)s_%(table_name)s_%(constraint_name)s",
    "fk": "fk_%(schema)s_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
    "pk": "pk_%(schema)s_%(table_name)s",
}
metadata = MetaData(naming_convention=naming_convention)
Base = declarative_base(metadata=metadata)

SCHEMA = settings.DB_SCHEMA_CORE  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 'efhc_core'

# -----------------------------------------------------------------------------
# –ú–æ–¥–µ–ª—å: User ‚Äî –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# -----------------------------------------------------------------------------
class User(Base):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å EFHC —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã.

    –ü–æ–ª—è:
      ‚Ä¢ telegram_id ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ PK).
      ‚Ä¢ username / first_name / last_name ‚Äî –¥–ª—è UI/–∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
      ‚Ä¢ referred_by ‚Äî —Ä–µ—Ñ–µ—Ä–µ—Ä (telegram_id), –µ—Å–ª–∏ –µ—Å—Ç—å.
      ‚Ä¢ created_at ‚Äî –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ.
      ‚Ä¢ last_generated_at ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –º—ã "–ª–µ–Ω–∏–≤–æ" –Ω–∞—á–∏—Å–ª—è–ª–∏ kWh –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —á—Ç–æ–±—ã –ø—Ä–∏ –ª—é–±—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å kWh –∑–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è.
    """
    __tablename__ = "users"
    __table_args__ = (
        {"schema": SCHEMA},
    )

    telegram_id = Column(BigInteger, primary_key=True, autoincrement=False)
    username = Column(String(length=64), nullable=True)
    first_name = Column(String(length=128), nullable=True)
    last_name = Column(String(length=128), nullable=True)

    referred_by = Column(BigInteger, nullable=True)  # –Ω–∞ telegram_id –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    created_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())

    # –õ–µ–Ω–∏–≤—ã–π –ø–µ—Ä–µ—Å—á—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ kWh: —Ç–æ—á–∫–∞ –æ—Ç—Å—á—ë—Ç–∞
    last_generated_at = Column(DateTime(timezone=True), nullable=True)

    # –û—Ç–Ω–æ—à–µ–Ω–∏—è (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã, –Ω–æ –ø–æ–ª–µ–∑–Ω—ã –≤ ORM)
    balance = relationship("Balance", back_populates="user", uselist=False)
    wallets = relationship("UserWallet", back_populates="user", cascade="all, delete-orphan")
    panels = relationship("Panel", back_populates="user")

    def __repr__(self) -> str:
        return f"<User tg={self.telegram_id} username={self.username!r}>"

# –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–µ—Ä—É (–∞–Ω–∞–ª–∏—Ç–∏–∫–∞)
Index("ix_efhc_core_users_referred_by", User.referred_by, schema=SCHEMA)

# -----------------------------------------------------------------------------
# –ú–æ–¥–µ–ª—å: Balance ‚Äî —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# -----------------------------------------------------------------------------
class Balance(Base):
    """
    –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü–æ–ª—è:
      ‚Ä¢ telegram_id ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (PK, == User.telegram_id).
      ‚Ä¢ efhc ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å EFHC (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ Shop/–æ–±–º–µ–Ω kWh‚ÜíEFHC/–∏ —Ç.–¥.).
      ‚Ä¢ bonus ‚Äî –±–æ–Ω—É—Å–Ω—ã–µ EFHC (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–∞–Ω–µ–ª–µ–π).
      ‚Ä¢ kwh_available ‚Äî —Ç–µ–∫—É—â–∞—è "–¥–æ—Å—Ç—É–ø–Ω–∞—è" —ç–Ω–µ—Ä–≥–∏—è (–∫–æ–ø–∏—Ç—Å—è ¬´–ª–µ–Ω–∏–≤–æ¬ª –∏ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–±–º–µ–Ω–µ –≤ EFHC).
      ‚Ä¢ kwh_total ‚Äî —Å—É–º–º–∞—Ä–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –∑–∞ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ (–¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞, –Ω–µ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è).
      ‚Ä¢ updated_at ‚Äî –æ—Ç–º–µ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤.
    """
    __tablename__ = "balances"
    __table_args__ = (
        {"schema": SCHEMA},
    )

    telegram_id = Column(BigInteger, ForeignKey(f"{SCHEMA}.users.telegram_id", ondelete="CASCADE"), primary_key=True)

    # –î–µ–Ω–µ–∂–Ω—ã–µ/—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è ‚Äî —Å—Ç—Ä–æ–≥–æ NUMERIC(30,8)
    efhc = Column(Numeric(30, 8), nullable=False, server_default="0.00000000")
    bonus = Column(Numeric(30, 8), nullable=False, server_default="0.00000000")

    kwh_available = Column(Numeric(30, 8), nullable=False, server_default="0.00000000")
    kwh_total = Column(Numeric(30, 8), nullable=False, server_default="0.00000000")

    updated_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())

    user = relationship("User", back_populates="balance")

    def __repr__(self) -> str:
        return f"<Balance tg={self.telegram_id} efhc={self.efhc} bonus={self.bonus} kwh_avail={self.kwh_available} kwh_total={self.kwh_total}>"

# -----------------------------------------------------------------------------
# –ú–æ–¥–µ–ª—å: UserVIPStatus ‚Äî VIP-—Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ –Ω–∞–ª–∏—á–∏—é NFT)
# -----------------------------------------------------------------------------
class UserVIPStatus(Base):
    """
    VIP-—Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–∫—Ç–∏–≤–µ–Ω, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ EFHC).
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–µ–π (scheduler: 00:00 ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ NFT).

    –ü–æ–ª—è:
      ‚Ä¢ telegram_id ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (PK).
      ‚Ä¢ since ‚Äî —Å –∫–∞–∫–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ VIP-—Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–µ–Ω.
      ‚Ä¢ source ‚Äî –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Ç–∞—Ç—É—Å–∞: 'nft' (–¥–ª—è –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–∏).
      ‚Ä¢ updated_at ‚Äî —Å–µ—Ä–≤–∏—Å–Ω–æ–µ –ø–æ–ª–µ.
    """
    __tablename__ = "user_vip_status"
    __table_args__ = (
        {"schema": SCHEMA},
    )

    telegram_id = Column(BigInteger, ForeignKey(f"{SCHEMA}.users.telegram_id", ondelete="CASCADE"), primary_key=True)
    since = Column(DateTime(timezone=True), nullable=False, server_default=func.now())
    source = Column(String(length=16), nullable=False, server_default="nft")
    updated_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())

    def __repr__(self) -> str:
        return f"<UserVIPStatus tg={self.telegram_id} since={self.since} source={self.source}>"

# -----------------------------------------------------------------------------
# –ú–æ–¥–µ–ª—å: UserWallet ‚Äî –∫–æ—à–µ–ª—å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (TON –∏ –¥—Ä.)
# -----------------------------------------------------------------------------
class UserWallet(Base):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª—å–∫–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π ‚Äî TON).
    –•—Ä–∞–Ω–∏—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è; –¥–ª—è –≤—ã–ø–ª–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è is_primary.

    –ü–æ–ª—è:
      ‚Ä¢ id ‚Äî PK.
      ‚Ä¢ telegram_id ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
      ‚Ä¢ chain ‚Äî 'TON', –Ω–∞ –±—É–¥—É—â–µ–µ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å.
      ‚Ä¢ address ‚Äî –∞–¥—Ä–µ—Å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å–µ—Ç–∏, —É–Ω–∏–∫–∞–ª–µ–Ω –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö chain.
      ‚Ä¢ is_primary ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–ø–ª–∞—Ç/–¥–æ—Å—Ç–∞–≤–∫–∏ NFT.
      ‚Ä¢ created_at / updated_at
    """
    __tablename__ = "user_wallets"
    __table_args__ = (
        UniqueConstraint("chain", "address", name=f"uq_{SCHEMA}_user_wallets_chain_address"),
        {"schema": SCHEMA},
    )

    id = Column(Integer, primary_key=True, autoincrement=True)
    telegram_id = Column(BigInteger, ForeignKey(f"{SCHEMA}.users.telegram_id", ondelete="CASCADE"), nullable=False)

    chain = Column(String(length=16), nullable=False, server_default="TON")  # 'TON'
    address = Column(Text, nullable=False)
    is_primary = Column(Boolean, nullable=False, server_default="false")

    created_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())
    updated_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())

    user = relationship("User", back_populates="wallets")

    def __repr__(self) -> str:
        return f"<UserWallet id={self.id} tg={self.telegram_id} chain={self.chain} primary={self.is_primary}>"

Index("ix_efhc_core_user_wallets_tg", UserWallet.telegram_id, schema=SCHEMA)
Index("ix_efhc_core_user_wallets_chain", UserWallet.chain, schema=SCHEMA)

# -----------------------------------------------------------------------------
# –ú–æ–¥–µ–ª—å: Panel ‚Äî –∑–∞–ø–∏—Å—å –æ –ø–∞–Ω–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (180 –¥–Ω–µ–π, –∞—Ä—Ö–∏–≤ –≤–Ω—É—Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—ã)
# -----------------------------------------------------------------------------
class Panel(Base):
    """
    –ü–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü–æ–ª—è:
      ‚Ä¢ id ‚Äî PK.
      ‚Ä¢ telegram_id ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü –ø–∞–Ω–µ–ª–∏.
      ‚Ä¢ active ‚Äî –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–∞–Ω–µ–ª—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.
      ‚Ä¢ activated_at ‚Äî –¥–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–º–æ–º–µ–Ω—Ç –ø–æ–∫—É–ø–∫–∏).
      ‚Ä¢ expires_at ‚Äî –¥–∞—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (activated_at + 180 –¥–Ω–µ–π).
      ‚Ä¢ archived_at ‚Äî –∫–æ–≥–¥–∞ –º—ã –ø–µ—Ä–µ–≤–µ–ª–∏ –ø–∞–Ω–µ–ª—å –≤ –∞—Ä—Ö–∏–≤ (active=false).
    –ü—Ä–∞–≤–∏–ª–∞:
      ‚Ä¢ –ö–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ (<= 1000).
      ‚Ä¢ –ü–∞–Ω–µ–ª–∏ –¥–∞—é—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ —Å—Ç–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (VIP/–æ–±—ã—á–Ω—ã–π) *—á–∏—Å–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π.
    """
    __tablename__ = "panels"
    __table_args__ = (
        {"schema": SCHEMA},
    )

    id = Column(BigInteger, primary_key=True, autoincrement=True)
    telegram_id = Column(BigInteger, ForeignKey(f"{SCHEMA}.users.telegram_id", ondelete="CASCADE"), nullable=False)

    active = Column(Boolean, nullable=False, server_default="true")
    activated_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())
    expires_at = Column(DateTime(timezone=True), nullable=True)  # –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ = activated_at + 180 days
    archived_at = Column(DateTime(timezone=True), nullable=True)

    user = relationship("User", back_populates="panels")

    def __repr__(self) -> str:
        return f"<Panel id={self.id} tg={self.telegram_id} active={self.active}>"


Index("ix_efhc_core_panels_tg_active", Panel.telegram_id, Panel.active, schema=SCHEMA)

# -----------------------------------------------------------------------------
# –ú–æ–¥–µ–ª—å: EFHCTransfersLog ‚Äî –∂—É—Ä–Ω–∞–ª –ø–µ—Ä–µ–≤–æ–¥–æ–≤ EFHC (–≤–∫–ª—é—á–∞—è –±–æ–Ω—É—Å–Ω—ã–π –ø–æ—Ç–æ–∫)
# -----------------------------------------------------------------------------
class EFHCTransfersLog(Base):
    """
    –ñ—É—Ä–Ω–∞–ª EFHC-–ø–µ—Ä–µ–≤–æ–¥–æ–≤ (–≤–∫–ª. –±–æ–Ω—É—Å–Ω—ã–µ EFHC –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π reason).
    –í—Å–µ –¥–≤–∏–∂–µ–Ω–∏—è EFHC –¥–æ–ª–∂–Ω—ã –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è:
      ‚Ä¢ from_id -> to_id, amount
      ‚Ä¢ reason (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'shop_panel_purchase', 'withdraw_lock', 'withdraw_refund', 'shop_panel_bonus')
      ‚Ä¢ idempotency_key ‚Äî –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–µ–π –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ.
      ‚Ä¢ details ‚Äî JSON –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (context).
      ‚Ä¢ ts ‚Äî –º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏.

    –í–ê–ñ–ù–û: —ç—Ç–æ –ª–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞, –Ω–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã. –ò—Å—Ç–∏–Ω–∞ ‚Äî –æ—Å—Ç–∞—Ç–∫–∏ –≤ balances.
    """
    __tablename__ = "efhc_transfers_log"
    __table_args__ = (
        UniqueConstraint("idempotency_key", name=f"uq_{SCHEMA}_efhc_transfers_log_idempotency_key"),
        {"schema": SCHEMA},
    )

    id = Column(BigInteger, primary_key=True, autoincrement=True)
    from_id = Column(BigInteger, nullable=False)  # telegram_id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–∏–ª–∏ BANK_TELEGRAM_ID)
    to_id = Column(BigInteger, nullable=False)    # telegram_id –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–∏–ª–∏ BANK_TELEGRAM_ID)
    amount = Column(Numeric(30, 8), nullable=False)
    reason = Column(String(length=64), nullable=False)
    idempotency_key = Column(String(length=128), nullable=True)

    details = Column(JSON, nullable=True)
    ts = Column(DateTime(timezone=True), nullable=False, server_default=func.now())

    def __repr__(self) -> str:
        return f"<EFHCTransferLog id={self.id} {self.from_id}->{self.to_id} amt={self.amount} reason={self.reason}>"

Index("ix_efhc_core_efhc_transfers_log_from", EFHCTransfersLog.from_id, schema=SCHEMA)
Index("ix_efhc_core_efhc_transfers_log_to", EFHCTransfersLog.to_id, schema=SCHEMA)
Index("ix_efhc_core_efhc_transfers_log_reason", EFHCTransfersLog.reason, schema=SCHEMA)

# -----------------------------------------------------------------------------
# –ú–æ–¥–µ–ª—å: ShopOrder ‚Äî –∑–∞–∫–∞–∑—ã –º–∞–≥–∞–∑–∏–Ω–∞ (EFHC/VIP/NFT)
# -----------------------------------------------------------------------------
class ShopOrder(Base):
    """
    –ó–∞–∫–∞–∑ –≤ –º–∞–≥–∞–∑–∏–Ω–µ (Shop):
      ‚Ä¢ order_type: 'efhc' | 'vip' | 'nft'
      ‚Ä¢ –°—Ç–∞—Ç—É—Å—ã: 'pending','paid','completed','rejected','canceled','failed'
      ‚Ä¢ efhc_amount ‚Äî –∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è 'efhc'
      ‚Ä¢ pay_asset/pay_amount/ton_address ‚Äî –æ—Ç –≤–Ω–µ—à–Ω–µ–π –æ–ø–ª–∞—Ç—ã (TON/USDT)
      ‚Ä¢ idempotency_key ‚Äî –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–µ–π
      ‚Ä¢ tx_hash ‚Äî –≤–Ω–µ—à–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è (–æ–ø–ª–∞—Ç–∞)
    """
    __tablename__ = "shop_orders"
    __table_args__ = (
        UniqueConstraint("idempotency_key", name=f"uq_{SCHEMA}_shop_orders_idempotency_key"),
        {"schema": SCHEMA},
    )

    id = Column(BigInteger, primary_key=True, autoincrement=True)
    telegram_id = Column(BigInteger, ForeignKey(f"{SCHEMA}.users.telegram_id", ondelete="CASCADE"), nullable=False)

    order_type = Column(String(length=16), nullable=False)  # 'efhc'|'vip'|'nft'
    efhc_amount = Column(Numeric(30, 8), nullable=True)

    pay_asset = Column(String(length=16), nullable=True)   # 'TON'|'USDT'
    pay_amount = Column(Numeric(30, 8), nullable=True)
    ton_address = Column(Text, nullable=True)

    status = Column(String(length=16), nullable=False, server_default="pending")
    idempotency_key = Column(String(length=128), nullable=True)
    tx_hash = Column(Text, nullable=True)

    admin_id = Column(BigInteger, nullable=True)
    comment = Column(Text, nullable=True)

    created_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())
    paid_at = Column(DateTime(timezone=True), nullable=True)
    completed_at = Column(DateTime(timezone=True), nullable=True)
    updated_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())

    def __repr__(self) -> str:
        return f"<ShopOrder id={self.id} tg={self.telegram_id} type={self.order_type} status={self.status}>"

Index("ix_efhc_core_shop_orders_tg", ShopOrder.telegram_id, schema=SCHEMA)
Index("ix_efhc_core_shop_orders_status", ShopOrder.status, schema=SCHEMA)
Index("ix_efhc_core_shop_orders_type", ShopOrder.order_type, schema=SCHEMA)

# -----------------------------------------------------------------------------
# –ú–æ–¥–µ–ª—å: ManualNFTRequest ‚Äî –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä—É—á–Ω—É—é –≤—ã–¥–∞—á—É VIP NFT
# -----------------------------------------------------------------------------
class ManualNFTRequest(Base):
    """
    –†—É—á–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–¥–∞—á—É NFT (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ VIP NFT –≤ Shop):
      ‚Ä¢ request_type ‚Äî 'vip_nft'
      ‚Ä¢ status ‚Äî 'open','processed','canceled'
    """
    __tablename__ = "manual_nft_requests"
    __table_args__ = (
        {"schema": SCHEMA},
    )

    id = Column(BigInteger, primary_key=True, autoincrement=True)
    telegram_id = Column(BigInteger, ForeignKey(f"{SCHEMA}.users.telegram_id", ondelete="CASCADE"), nullable=False)

    wallet_address = Column(Text, nullable=True)
    request_type = Column(String(length=32), nullable=False, server_default="vip_nft")
    order_id = Column(BigInteger, ForeignKey(f"{SCHEMA}.shop_orders.id", ondelete="SET NULL"), nullable=True)

    status = Column(String(length=16), nullable=False, server_default="open")
    created_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())

    def __repr__(self) -> str:
        return f"<ManualNFTRequest id={self.id} tg={self.telegram_id} type={self.request_type} status={self.status}>"

Index("ix_efhc_core_manual_nft_requests_tg", ManualNFTRequest.telegram_id, schema=SCHEMA)
Index("ix_efhc_core_manual_nft_requests_status", ManualNFTRequest.status, schema=SCHEMA)

# -----------------------------------------------------------------------------
# –ú–æ–¥–µ–ª—å: Withdrawal ‚Äî –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ EFHC
# -----------------------------------------------------------------------------
class Withdrawal(Base):
    """
    –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ EFHC:
      ‚Ä¢ –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: —Å–ø–∏—Å—ã–≤–∞–µ–º EFHC user ‚Üí –ë–∞–Ω–∫ (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤), status='pending'.
      ‚Ä¢ –ê–¥–º–∏–Ω-–æ–ø–µ—Ä–∞—Ü–∏–∏: approve -> send (manual/webhook) -> sent | failed | rejected.
      ‚Ä¢ idempotency_key ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞—è–≤–∫–∏.
      ‚Ä¢ tx_hash ‚Äî –≤–Ω–µ—à–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–ª–∞—Ç—ã.
    """
    __tablename__ = "withdrawals"
    __table_args__ = (
        UniqueConstraint("idempotency_key", name=f"uq_{SCHEMA}_withdrawals_idempotency_key"),
        {"schema": SCHEMA},
    )

    id = Column(BigInteger, primary_key=True, autoincrement=True)
    telegram_id = Column(BigInteger, ForeignKey(f"{SCHEMA}.users.telegram_id", ondelete="CASCADE"), nullable=False)

    ton_address = Column(Text, nullable=False)
    amount_efhc = Column(Numeric(30, 8), nullable=False)
    asset = Column(String(length=16), nullable=False, server_default="TON")  # 'TON' | 'USDT'

    status = Column(
        String(length=16),
        nullable=False,
        server_default="pending"
    )  # 'pending','approved','rejected','sent','failed','canceled'

    idempotency_key = Column(String(length=128), nullable=True)
    tx_hash = Column(Text, nullable=True)

    admin_id = Column(BigInteger, nullable=True)
    comment = Column(Text, nullable=True)

    created_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())
    approved_at = Column(DateTime(timezone=True), nullable=True)
    sent_at = Column(DateTime(timezone=True), nullable=True)
    updated_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())

    def __repr__(self) -> str:
        return f"<Withdrawal id={self.id} tg={self.telegram_id} amt={self.amount_efhc} status={self.status}>"

Index("ix_efhc_core_withdrawals_tg", Withdrawal.telegram_id, schema=SCHEMA)
Index("ix_efhc_core_withdrawals_status", Withdrawal.status, schema=SCHEMA)

# -----------------------------------------------------------------------------
# –ú–æ–¥–µ–ª—å: ReferralLink ‚Äî —Å–≤—è–∑–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–∫—Ç–æ –∫–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª)
# -----------------------------------------------------------------------------
class ReferralLink(Base):
    """
    –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏:
      ‚Ä¢ referrer_id ‚Äî –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª (telegram_id).
      ‚Ä¢ referee_id ‚Äî –∫–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ (telegram_id).
      ‚Ä¢ activated ‚Äî —Å—Ç–∞–ª –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª ¬´–∞–∫—Ç–∏–≤–Ω—ã–º¬ª (–∫—É–ø–∏–ª —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–∞–Ω–µ–ª—å).
      ‚Ä¢ activated_at ‚Äî –∫–æ–≥–¥–∞ —Å—Ç–∞–ª –∞–∫—Ç–∏–≤–Ω—ã–º.
      ‚Ä¢ created_at ‚Äî –¥–∞—Ç–∞ —Å–≤—è–∑–∫–∏.

    –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—ã (referrer_id, referee_id).
    """
    __tablename__ = "referral_links"
    __table_args__ = (
        UniqueConstraint("referrer_id", "referee_id", name=f"uq_{SCHEMA}_referral_links_pair"),
        {"schema": SCHEMA},
    )

    id = Column(BigInteger, primary_key=True, autoincrement=True)
    referrer_id = Column(BigInteger, nullable=False)
    referee_id = Column(BigInteger, nullable=False)

    activated = Column(Boolean, nullable=False, server_default="false")
    activated_at = Column(DateTime(timezone=True), nullable=True)

    created_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())

    def __repr__(self) -> str:
        return f"<ReferralLink id={self.id} ref={self.referrer_id}->{self.referee_id} active={self.activated}>"

Index("ix_efhc_core_referral_links_referrer", ReferralLink.referrer_id, schema=SCHEMA)
Index("ix_efhc_core_referral_links_referee", ReferralLink.referee_id, schema=SCHEMA)

# -----------------------------------------------------------------------------
# –ú–æ–¥–µ–ª—å: ReferralBonusLog ‚Äî –ª–æ–≥ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
# -----------------------------------------------------------------------------
class ReferralBonusLog(Base):
    """
    –õ–æ–≥ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤:
      ‚Ä¢ referrer_id ‚Äî –∫–æ–º—É –Ω–∞—á–∏—Å–ª–∏–ª–∏ (—Ä–µ—Ñ–µ—Ä–µ—Ä—É).
      ‚Ä¢ referee_id ‚Äî –∑–∞ –∫–∞–∫–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞.
      ‚Ä¢ amount_efhc ‚Äî —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ (–≤ EFHC, NUMERIC(30,8)).
      ‚Ä¢ tier ‚Äî —É—Ä–æ–≤–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'activation', '10', '100', '1000', '3000', '10000').
      ‚Ä¢ idempotency_key ‚Äî –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–µ–π.
      ‚Ä¢ created_at ‚Äî –∫–æ–≥–¥–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–æ.
    """
    __tablename__ = "referral_bonus_log"
    __table_args__ = (
        UniqueConstraint("idempotency_key", name=f"uq_{SCHEMA}_referral_bonus_log_idempotency_key"),
        {"schema": SCHEMA},
    )

    id = Column(BigInteger, primary_key=True, autoincrement=True)
    referrer_id = Column(BigInteger, nullable=False)
    referee_id = Column(BigInteger, nullable=False)

    amount_efhc = Column(Numeric(30, 8), nullable=False)
    tier = Column(String(length=32), nullable=False)  # 'activation' or milestone level

    idempotency_key = Column(String(length=128), nullable=True)
    created_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())

    def __repr__(self) -> str:
        return f"<ReferralBonusLog id={self.id} rf={self.referrer_id} rfe={self.referee_id} amt={self.amount_efhc} tier={self.tier}>"

Index("ix_efhc_core_ref_bonus_log_referrer", ReferralBonusLog.referrer_id, schema=SCHEMA)

# -----------------------------------------------------------------------------
# –ú–æ–¥–µ–ª—å: DailyKwhLog ‚Äî –¥–Ω–µ–≤–Ω–æ–π –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è kWh (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤)
# -----------------------------------------------------------------------------
class DailyKwhLog(Base):
    """
    –î–Ω–µ–≤–Ω–æ–π –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è kWh –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏/–∏—Å—Ç–æ—Ä–∏–∏.
    –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è ¬´–∏—Å—Ç–∏–Ω—ã¬ª (–∏—Å—Ç–∏–Ω–∞ ‚Äî balances + last_generated_at).
    –ú–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –∏–ª–∏ –ø–æ –∏—Ç–æ–≥–∞–º –¥–Ω—è.

    –ü–æ–ª—è:
      ‚Ä¢ id ‚Äî PK.
      ‚Ä¢ telegram_id ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
      ‚Ä¢ date_utc ‚Äî –¥–∞—Ç–∞ (UTC) –∑–∞ –∫–æ—Ç–æ—Ä—É—é —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å—É–º–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-01-20).
      ‚Ä¢ kwh_amount ‚Äî —Å–∫–æ–ª—å–∫–æ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞–±–µ–∂–∞–ª–æ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å (NUMERIC(30,8)).
      ‚Ä¢ created_at ‚Äî –∫–æ–≥–¥–∞ –∑–∞–ø–∏—Å–∞–ª–∏ –∞–≥—Ä–µ–≥–∞—Ç.
    """
    __tablename__ = "daily_kwh_log"
    __table_args__ = (
        UniqueConstraint("telegram_id", "date_utc", name=f"uq_{SCHEMA}_daily_kwh_log_user_date"),
        {"schema": SCHEMA},
    )

    id = Column(BigInteger, primary_key=True, autoincrement=True)
    telegram_id = Column(BigInteger, ForeignKey(f"{SCHEMA}.users.telegram_id", ondelete="CASCADE"), nullable=False)

    date_utc = Column(DateTime(timezone=True), nullable=False)  # —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ –ø–æ–ª–Ω–æ—á—å UTC
    kwh_amount = Column(Numeric(30, 8), nullable=False, server_default="0.00000000")

    created_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())

    def __repr__(self) -> str:
        return f"<DailyKwhLog id={self.id} tg={self.telegram_id} date={self.date_utc} kwh={self.kwh_amount}>"

Index("ix_efhc_core_daily_kwh_log_tg_date", DailyKwhLog.telegram_id, DailyKwhLog.date_utc, schema=SCHEMA)

# -----------------------------------------------------------------------------
# –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –ø–æ –¥–∞–ª—å–Ω–µ–π—à–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:
# -----------------------------------------------------------------------------
# ‚Ä¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã/—Ç–∞–±–ª–∏—Ü –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ Alembic –º–∏–≥—Ä–∞—Ü–∏—è—Ö (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è).
#   –ù–∞ —Å—Ç–∞—Ä—Ç–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å on_startup_init_db() –¥–ª—è CREATE SCHEMA IF NOT EXISTS –∏ —Ç.–ø.
# ‚Ä¢ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π/—Å–ø–∏—Å–∞–Ω–∏–π EFHC ‚Äî —á–µ—Ä–µ–∑ efhc_transactions.py:
#     - debit_user_to_bank(db, user_id, amount)
#     - credit_user_from_bank(db, user_id, amount)
#   –û–Ω–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç Balance + –ø–∏—à—É—Ç EFHCTransfersLog (idempotent –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–∞).
# ‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–µ EFHC —Ç—Ä–∞—Ç—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–∞–Ω–µ–ª–∏. –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–∞–Ω–µ–ª–µ–π:
#     - bonus —Å–ø–∏—Å—ã–≤–∞–µ–º —É user ‚Üí –∑–∞—á–∏—Å–ª—è–µ–º –≤ bonus –ë–∞–Ω–∫–∞ (–∏ –ª–æ–≥).
#     - –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é —á–∞—Å—Ç—å ‚Äî efhc —Å–ø–∏—Å—ã–≤–∞–µ–º user ‚Üí –ë–∞–Ω–∫ (–∏ –ª–æ–≥).
# ‚Ä¢ VIP-—Å—Ç–∞—Ç—É—Å –≤–∫–ª—é—á–∞–µ—Ç—Å—è/–≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π NFT-–ø—Ä–æ–≤–µ—Ä–∫–∏.
#   –ü–æ–∫—É–ø–∫–∞ VIP NFT –≤ Shop —Å–æ–∑–¥–∞—ë—Ç manual-–∑–∞—è–≤–∫—É, –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç VIP –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
# ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è kWh —Å—Ç–∞—Ä—Ç—É–µ—Ç —Å—Ä–∞–∑—É —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–≤–æ–π –ø–∞–Ω–µ–ª–∏ (shop_routes: last_generated_at=NOW()).
# ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç—Å—è –≤ —Ä—É—á–∫–∞—Ö Shop/Admin (<=1000 –∞–∫—Ç–∏–≤–Ω—ã—Ö).
# -----------------------------------------------------------------------------
