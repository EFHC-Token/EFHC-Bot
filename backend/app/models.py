# üìÇ backend/app/models.py ‚Äî SQLAlchemy –º–æ–¥–µ–ª–∏ –±–∞–∑—ã EFHC
# –ó–¥–µ—Å—å –æ–ø–∏—Å–∞–Ω—ã –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ EFHC:
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–∞–Ω–µ–ª–∏, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Ä–µ—Ñ–µ—Ä–∞–ª—ã, –∑–∞–¥–∞–Ω–∏—è, —Ä–æ–∑—ã–≥—Ä—ã—à–∏, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø.

from sqlalchemy import Column, Integer, String, Boolean, Float, DateTime, ForeignKey, Text, JSON
from sqlalchemy.orm import relationship
from datetime import datetime
from .database import Base


# ======================
# üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
# ======================
class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)  # –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID
    telegram_id = Column(String, unique=True, index=True, nullable=False)  # Telegram ID
    username = Column(String, nullable=True)  # –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ton_wallet = Column(String, nullable=True)  # TON-–∫–æ—à–µ–ª–µ–∫
    created_at = Column(DateTime, default=datetime.utcnow)

    # –ë–∞–ª–∞–Ω—Å—ã
    balance_main = Column(Float, default=0.0)   # –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å EFHC
    balance_bonus = Column(Float, default=0.0)  # –±–æ–Ω—É—Å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã (–≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ü–∞–Ω–µ–ª—è—Ö –∏ –ó–∞–¥–∞–Ω–∏—è—Ö)
    balance_kwt = Column(Float, default=0.0)    # –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–í—Ç

    # VIP –∏ NFT
    is_vip = Column(Boolean, default=False)  # –µ—Å—Ç—å –ª–∏ VIP NFT
    vip_checked_at = Column(DateTime, default=datetime.utcnow)  # –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ NFT

    # –†–µ—Ñ–µ—Ä–∞–ª—ã
    referral_code = Column(String, unique=True, nullable=True)  # —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥
    invited_by = Column(Integer, ForeignKey("users.id"), nullable=True)  # –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª
    referrals = relationship("User", remote_side=[id])  # —Å–≤—è–∑—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    current_level = Column(Integer, default=1)  # —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    total_kwt_generated = Column(Float, default=0.0)  # –≤—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏

    # –ê–¥–º–∏–Ω-–ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ NFT)
    is_admin = Column(Boolean, default=False)

    # –°–≤—è–∑—å —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
    panels = relationship("Panel", back_populates="owner")
    transactions = relationship("Transaction", back_populates="user")
    tasks = relationship("UserTask", back_populates="user")
    lottery_tickets = relationship("LotteryTicket", back_populates="user")


# ======================
# üîã –ü–∞–Ω–µ–ª–∏
# ======================
class Panel(Base):
    __tablename__ = "panels"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"))
    created_at = Column(DateTime, default=datetime.utcnow)
    expires_at = Column(DateTime)  # –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã

    daily_generation = Column(Float, default=0.598)  # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–í—Ç/–¥–µ–Ω—å
    is_active = Column(Boolean, default=True)

    owner = relationship("User", back_populates="panels")


# ======================
# üí∏ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ EFHC
# ======================
class Transaction(Base):
    __tablename__ = "transactions"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"))

    amount = Column(Float, nullable=False)  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ EFHC
    type = Column(String, nullable=False)   # —Ç–∏–ø ("deposit", "withdraw", "bonus", "panel_purchase", "transfer")
    comment = Column(Text, nullable=True)   # –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–∑–∞ –ø–æ–∫—É–ø–∫—É VIP NFT")
    created_at = Column(DateTime, default=datetime.utcnow)

    user = relationship("User", back_populates="transactions")


# ======================
# üë• –†–µ—Ñ–µ—Ä–∞–ª—ã
# ======================
class ReferralBonus(Base):
    __tablename__ = "referral_bonus"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"))        # –∫–æ–º—É –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å
    invited_user_id = Column(Integer, ForeignKey("users.id"))  # –∫—Ç–æ —Å–æ–≤–µ—Ä—à–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ
    amount = Column(Float, default=0.0)
    created_at = Column(DateTime, default=datetime.utcnow)


# ======================
# üìå –ó–∞–¥–∞–Ω–∏—è
# ======================
class Task(Base):
    __tablename__ = "tasks"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, nullable=False)  # –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    reward = Column(Float, default=0.0)     # –Ω–∞–≥—Ä–∞–¥–∞ –≤ –±–æ–Ω—É—Å–Ω—ã—Ö EFHC
    link = Column(String, nullable=True)    # —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Telegram –∫–∞–Ω–∞–ª)
    is_active = Column(Boolean, default=True)  # –≤–∫–ª—é—á–µ–Ω–æ/–≤—ã–∫–ª—é—á–µ–Ω–æ
    created_at = Column(DateTime, default=datetime.utcnow)


class UserTask(Base):
    __tablename__ = "user_tasks"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"))
    task_id = Column(Integer, ForeignKey("tasks.id"))
    status = Column(String, default="pending")  # pending, completed, approved
    completed_at = Column(DateTime, nullable=True)

    user = relationship("User", back_populates="tasks")
    task = relationship("Task")


# ======================
# üé≤ –†–æ–∑—ã–≥—Ä—ã—à–∏
# ======================
class Lottery(Base):
    __tablename__ = "lotteries"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, nullable=False)  # –ù–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä "NFT VIP")
    required_tickets = Column(Integer, nullable=False)  # —Å–∫–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω—É–∂–Ω–æ
    reward_type = Column(String, nullable=False)  # "vip_nft" –∏–ª–∏ "panel"
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    winner_id = Column(Integer, ForeignKey("users.id"), nullable=True)

    tickets = relationship("LotteryTicket", back_populates="lottery")


class LotteryTicket(Base):
    __tablename__ = "lottery_tickets"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"))
    lottery_id = Column(Integer, ForeignKey("lotteries.id"))
    ticket_number = Column(Integer, nullable=False)  # –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user = relationship("User", back_populates="lottery_tickets")
    lottery = relationship("Lottery", back_populates="tickets")


# ======================
# üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
# ======================
class AchievementLog(Base):
    __tablename__ = "achievement_log"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"))
    level = Column(Integer, nullable=False)  # –∫–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—É—á–µ–Ω
    achieved_at = Column(DateTime, default=datetime.utcnow)


# ======================
# üîë –ê–¥–º–∏–Ω NFT-–¥–æ—Å—Ç—É–ø
# ======================
class AdminNFT(Base):
    __tablename__ = "admin_nft"

    id = Column(Integer, primary_key=True, index=True)
    nft_address = Column(String, unique=True, nullable=False)  # –∫–∞–∫–æ–π NFT –¥–∞—ë—Ç –ø—Ä–∞–≤–∞
    can_tasks = Column(Boolean, default=False)      # –¥–æ—Å—Ç—É–ø –∫ –∑–∞–¥–∞–Ω–∏—è–º
    can_shop = Column(Boolean, default=False)       # –¥–æ—Å—Ç—É–ø –∫ –º–∞–≥–∞–∑–∏–Ω—É
    can_lottery = Column(Boolean, default=False)    # –¥–æ—Å—Ç—É–ø –∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º
    can_all = Column(Boolean, default=False)        # –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
