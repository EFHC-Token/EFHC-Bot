# üìÇ backend/app/referral.py ‚Äî —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–±–æ–Ω—É—Å—ã, –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)
# -----------------------------------------------------------------------------
# –°–æ–≥–ª–∞—Å–Ω–æ –¢–ó:
# - –ø—Ä—è–º–æ–π –±–æ–Ω—É—Å 0.1 EFHC –∑–∞ –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É –ø–∞–Ω–µ–ª–∏),
# - –ø–æ—Ä–æ–≥–æ–≤—ã–µ –±–æ–Ω—É—Å—ã –∑–∞ 10/100/1000/3000/10000 –∞–∫—Ç–∏–≤–Ω—ã—Ö.
# - ¬´–ê–∫—Ç–∏–≤–Ω—ã–º¬ª —Å—á–∏—Ç–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–≤–æ–π –ø–∞–Ω–µ–ª–∏.
# - –ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –Ω–∞ main_balance (—Ä–µ–∞–ª—å–Ω—ã–π).
# - –ò—Å—Ç–æ—Ä–∏—è –æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ transaction_logs.
#
# –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –∑–¥–µ—Å—å –Ω–µ —Ö—Ä–∞–Ω–∏–º –¥–µ—Ä–µ–≤–æ/–º—É–ª—å—Ç–∏-—É—Ä–æ–≤–Ω–∏ ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã.

from __future__ import annotations
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, func
from decimal import Decimal
from .models import User, Referral, TransactionLog
from .config import get_settings
from .utils import q3, dec

settings = get_settings()

async def mark_user_active_and_reward_referrer(user_id: int, db: AsyncSession) -> None:
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏ –ø–∞–Ω–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º user_id:
    1) –ø–æ–º–µ—á–∞–µ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ (active_user = True),
    2) –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä ‚Äî –Ω–∞—á–∏—Å–ª—è–µ—Ç 0.1 EFHC —Ä–µ—Ñ–µ—Ä–µ—Ä—É,
    3) –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (10/100/...) –∞–∫—Ç–∏–≤–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ—Ä–æ–≥–æ–≤—ã–π –±–æ–Ω—É—Å.
    –í—Å—ë –≤ –µ–¥–∏–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    """
    async with db.begin():
        # –ù–∞–π–¥–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ —Å–≤—è–∑–µ–π
        res = await db.execute(select(Referral).where(Referral.user_id == user_id))
        ref = res.scalar_one_or_none()
        if not ref:
            # –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db.execute(update(User).where(User.id == user_id).values(active_user=True))
            return

        # –û–±–Ω–æ–≤–∏–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.execute(update(User).where(User.id == user_id).values(active_user=True))

        # –ù–∞—á–∏—Å–ª–∏–º –±–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        direct_bonus = q3(settings.REFERRAL_DIRECT_BONUS_EFHC)
        await _credit_main_balance(db, ref.referrer_user_id, direct_bonus, meta={"type": "referral_direct", "ref_user_id": user_id})

        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É referrer
        res2 = await db.execute(
            select(func.count(User.id))
            .select_from(User)
            .join(Referral, Referral.user_id == User.id)
            .where(Referral.referrer_user_id == ref.referrer_user_id)
            .where(User.active_user == True)
        )
        active_count = int(res2.scalar_one() or 0)

        # –ü–æ—Ä–æ–≥–æ–≤—ã–µ –±–æ–Ω—É—Å—ã
        for threshold, bonus in settings.REFERRAL_MILESTONES.items():
            if active_count == threshold:
                b = q3(dec(bonus))
                await _credit_main_balance(db, ref.referrer_user_id, b, meta={"type": "referral_milestone", "threshold": threshold})

async def _credit_main_balance(db: AsyncSession, user_id: int, amount: Decimal, meta: dict | None = None):
    # –£–≤–µ–ª–∏—á–∏–º –±–∞–ª–∞–Ω—Å –∏ –¥–æ–±–∞–≤–∏–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
    res_u = await db.execute(select(User).where(User.id == user_id).with_for_update())
    u = res_u.scalar_one_or_none()
    if not u:
        return
    new_main = q3(dec(u.main_balance) + amount)
    u.main_balance = new_main
    db.add(TransactionLog(
        user_id=user_id,
        op_type="referral_bonus",
        amount=amount,
        source="main",
        meta=meta or {}
    ))

