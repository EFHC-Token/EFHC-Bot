# üìÇ backend/app/scheduler.py ‚Äî –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π EFHC/kWh
# -----------------------------------------------------------------------------
# –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
#   ‚Ä¢ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–∞—á–∏—Å–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º kWh –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
#     –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π (efhc_core.panels).
#   ‚Ä¢ –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω VIP-—Ñ–ª–∞–≥ (efhc_core.user_vip),
#     –µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ settings.VIP_MULTIPLIER (–Ω–∞–ø—Ä–∏–º–µ—Ä, √ó1.07).
#   ‚Ä¢ –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤ efhc_core.daily_generation_log.
#   ‚Ä¢ –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –≤—Ä—É—á–Ω—É—é (python -m backend.app.scheduler).
#   ‚Ä¢ –í—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ FastAPI (app.add_event_handler("startup", ...)) –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.
#
# –í–∞–∂–Ω–æ:
#   ‚Ä¢ –ú—ã –Ω–µ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–¥, —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º.
#   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º Decimal –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.
#   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏–∑ config.py –∏ Vercel).
# -----------------------------------------------------------------------------

from __future__ import annotations

import asyncio
from datetime import datetime, date
from decimal import Decimal, ROUND_DOWN
from typing import Optional, List

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, func

from .database import AsyncSessionLocal
from .config import get_settings
from .models import (
    User,
    Balance,
    UserVIP,
    Panel,
    DailyGenerationLog,  # –¥–æ–±–∞–≤–∏–º –≤ models.py –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
)

settings = get_settings()

# ---------------------------------------------------------------------
# –£—Ç–∏–ª–∏—Ç—ã Decimal —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ 3 –∑–Ω–∞–∫–æ–≤
# ---------------------------------------------------------------------
DEC3 = Decimal("0.001")

def d3(x: Decimal) -> Decimal:
    """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ Decimal –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –≤–Ω–∏–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.0789 ‚Üí 1.078)."""
    return x.quantize(DEC3, rounding=ROUND_DOWN)


# ---------------------------------------------------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
# ---------------------------------------------------------------------
async def run_daily_generation(db: AsyncSession, run_date: Optional[date] = None) -> None:
    """
    –ù–∞—á–∏—Å–ª—è–µ—Ç kWh –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π.
    - run_date: –¥–∞—Ç–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è).
    - –ï—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ daily_generation_log —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è (telegram_id, run_date),
      —Ç–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ –¥–µ–ª–∞–µ—Ç—Å—è (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å).
    """

    run_date = run_date or date.today()

    print(f"[EFHC][Scheduler] –ó–∞–ø—É—Å–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∑–∞ {run_date.isoformat()}")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    q = await db.execute(select(User.telegram_id))
    users: List[int] = [row[0] for row in q.all()]

    if not users:
        print("[EFHC][Scheduler] –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è")
        return

    for tg in users:
        # –°–∫–æ–ª—å–∫–æ –ø–∞–Ω–µ–ª–µ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        q_panels = await db.execute(
            select(func.sum(Panel.count))
            .where(Panel.telegram_id == tg)
        )
        panels_count = q_panels.scalar() or 0

        if panels_count <= 0:
            continue  # –Ω–µ—Ç –ø–∞–Ω–µ–ª–µ–π, –Ω–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, VIP –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        q_vip = await db.execute(
            select(UserVIP).where(UserVIP.telegram_id == tg)
        )
        is_vip = q_vip.scalar_one_or_none() is not None

        # –ë–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.598 kWh –∑–∞ –ø–∞–Ω–µ–ª—å)
        base_gen_per_panel = Decimal(str(settings.DAILY_GEN_BASE_KWH))
        gen = base_gen_per_panel * Decimal(panels_count)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è VIP (–Ω–∞–ø—Ä–∏–º–µ—Ä, √ó1.07)
        if is_vip:
            gen *= Decimal(str(settings.VIP_MULTIPLIER))

        gen = d3(gen)

        # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –Ω–∞—á–∏—Å–ª—è–ª–∏ –ª–∏ —É–∂–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        q_log = await db.execute(
            select(DailyGenerationLog).where(
                DailyGenerationLog.telegram_id == tg,
                DailyGenerationLog.run_date == run_date
            )
        )
        if q_log.scalar_one_or_none():
            continue  # —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ

        # –û–±–Ω–æ–≤–∏–º –±–∞–ª–∞–Ω—Å (kWh)
        q_bal = await db.execute(select(Balance).where(Balance.telegram_id == tg))
        bal: Optional[Balance] = q_bal.scalar_one_or_none()
        if not bal:
            # —Å–æ–∑–¥–∞–¥–∏–º –±–∞–ª–∞–Ω—Å, –µ—Å–ª–∏ –Ω–µ—Ç
            bal = Balance(telegram_id=tg, efhc=Decimal("0.000"), bonus=Decimal("0.000"), kwh=Decimal("0.000"))
            db.add(bal)
            await db.flush()

        new_kwh = d3(Decimal(bal.kwh or 0) + gen)
        await db.execute(
            update(Balance)
            .where(Balance.telegram_id == tg)
            .values(kwh=str(new_kwh))
        )

        # –î–æ–±–∞–≤–∏–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
        log = DailyGenerationLog(
            telegram_id=tg,
            run_date=run_date,
            generated_kwh=gen,
            panels_count=panels_count,
            vip=is_vip,
            created_at=datetime.utcnow(),
        )
        db.add(log)

    await db.commit()
    print("[EFHC][Scheduler] –ù–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã")


# ---------------------------------------------------------------------
# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
# ---------------------------------------------------------------------
async def daily_job():
    """
    –£—Ç–∏–ª–∏—Ç–∞: –∑–∞–ø—É—Å–∫–∞–µ—Ç run_daily_generation –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏.
    """
    async with AsyncSessionLocal() as session:
        await run_daily_generation(session)


# ---------------------------------------------------------------------
# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
# ---------------------------------------------------------------------
if __name__ == "__main__":
    asyncio.run(daily_job())
