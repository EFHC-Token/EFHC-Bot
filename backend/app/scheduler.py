# üìÇ backend/app/scheduler.py ‚Äî –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á EFHC (–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø)
# -----------------------------------------------------------------------------
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
#   ‚Ä¢ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Ñ–æ–Ω–æ–≤–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ EFHC:
#       1) –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è VIP-—Å—Ç–∞—Ç—É—Å–∞ (–Ω–∞–ª–∏—á–∏–µ NFT –≤ –∫–æ—à–µ–ª—å–∫–µ) ‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å 00:00.
#       2) –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–í—Ç (kWh) –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–∞–Ω–µ–ª—è–º ‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å 00:30.
#       3) –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π —Å –∏—Å—Ç—ë–∫—à–∏–º —Å—Ä–æ–∫–æ–º ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–æ (–ø–µ—Ä–µ–¥ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º kWh).
#
# –ì–ª–∞–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
#   ‚Ä¢ VIP –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è/—Å–Ω–∏–º–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫—É NFT –≤ –∫–æ—à–µ–ª—å–∫–µ (–∫–æ–ª–ª–µ–∫—Ü–∏—è whitelist).
#   ‚Ä¢ –ü–æ–∫—É–ø–∫–∞ VIP/NFT –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ù–ï –≤–∫–ª—é—á–∞–µ—Ç VIP –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ‚Äî —Å–æ–∑–¥–∞—ë—Ç—Å—è –ª–∏—à—å –∑–∞—è–≤–∫–∞
#     –Ω–∞ –≤—ã–¥–∞—á—É NFT, VIP –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è NFT –≤ –∫–æ—à–µ–ª—å–∫–µ –ø—Ä–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ.
#   ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π: –Ω–µ –±–æ–ª–µ–µ 1000 –ê–ö–¢–ò–í–ù–´–• –ø–∞–Ω–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞ –û–î–ù–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     (–∞—Ä—Ö–∏–≤–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –≤ –ª–∏–º–∏—Ç 1000).
#   ‚Ä¢ –ù–∞—á–∏—Å–ª–µ–Ω–∏—è kWh ‚Äî —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è (1 EFHC = 1 kWh). –ù–∞—á–∏—Å–ª—è–µ–º —Ç–æ–ª—å–∫–æ kWh.
#   ‚Ä¢ –ë–æ–Ω—É—Å VIP/NFT +7% –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ —Å—É–º–º–∞—Ä–Ω–æ–π –¥–Ω–µ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ kWh –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
#
# –¢–∞–π–º–∏–Ω–≥–∏ (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º):
#   ‚Ä¢ 00:00 ‚Äî job_sync_vip_status: –ø—Ä–æ–≤–µ—Ä—è–µ–º NFT –∫–æ—à–µ–ª—å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º VIP.
#   ‚Ä¢ 00:30 ‚Äî job_daily_kwh_accrual: –Ω–∞—á–∏—Å–ª—è–µ–º kWh –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–∞–Ω–µ–ª—è–º (—Å —É—á—ë—Ç–æ–º VIP).
#
# –°–≤—è–∑–∏:
#   ‚Ä¢ database.py ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏ engine.
#   ‚Ä¢ config.py ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TonAPI, TIMEZONE, –±–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –ø—Ä.
#   ‚Ä¢ models.py ‚Äî ORM –º–æ–¥–µ–ª–∏: User, Balance, UserVIP, AdminNFTWhitelist.
#   ‚Ä¢ –ü–∞–Ω–µ–ª–∏: —Ç–∞–±–ª–∏—Ü–∞ efhc_core.panels (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è raw SQL).
#
# –í–∞–∂–Ω–æ:
#   ‚Ä¢ –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ù–ï —Å–ø–∏—Å—ã–≤–∞–µ—Ç/–Ω–∞—á–∏—Å–ª—è–µ—Ç EFHC ‚Äî —Ç–æ–ª—å–∫–æ kWh (–∏ VIP —Ñ–ª–∞–≥ –≤ UserVIP).
#   ‚Ä¢ –û–±–º–µ–Ω EFHC ‚Üî kWh, –≤—ã–≤–æ–¥ EFHC, Shop –∏ –ø—Ä–æ—á–µ–µ ‚Äî —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–æ—É—Ç—ã –∏ efhc_transactions.
#
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:
#   ‚Ä¢ –í app/main.py –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—ã–∑–æ–≤–∏—Ç–µ start_scheduler(app) (–ø–æ–¥ AsyncIO).
# -----------------------------------------------------------------------------

from __future__ import annotations

import asyncio
import logging
from datetime import datetime
from decimal import Decimal, ROUND_DOWN
from typing import Optional, List, Dict, Any, Tuple

import httpx
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from sqlalchemy import text, select, update, func
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker

from .database import get_engine, get_session
from .config import get_settings
from .models import (
    User,                 # ORM: efhc_core.users (telegram_id, wallet_address, ...)
    Balance,              # ORM: efhc_core.balances (telegram_id, efhc, bonus_efhc, kwh, ...)
    UserVIP,              # ORM: efhc_core.user_vip (telegram_id, since)
    AdminNFTWhitelist,    # ORM: efhc_admin.admin_nft_whitelist (nft_address, comment)
)

# -----------------------------------------------------------------------------
# –õ–æ–≥–≥–µ—Ä
# -----------------------------------------------------------------------------
logger = logging.getLogger("efhc.scheduler")
if not logger.handlers:
    handler = logging.StreamHandler()
    handler.setFormatter(logging.Formatter("[%(asctime)s][%(levelname)s] %(name)s: %(message)s"))
    logger.addHandler(handler)
logger.setLevel(logging.INFO)

# -----------------------------------------------------------------------------
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# -----------------------------------------------------------------------------
settings = get_settings()

# –¢–∞–π–º–∑–æ–Ω–∞ –¥–ª—è Cron
TIMEZONE = getattr(settings, "TIMEZONE", "UTC") or "UTC"

# –ë–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è kWh/—Å—É—Ç–∫–∏ –Ω–∞ –æ–¥–Ω—É –ø–∞–Ω–µ–ª—å (–±–µ–∑ VIP) ‚Äî –ø–æ –∑–∞—è–≤–ª–µ–Ω–∏—é (0.598 ‚Üí VIP +7% ‚âà 0.640)
BASE_KWH_PER_PANEL_PER_DAY = Decimal(str(getattr(settings, "BASE_KWH_PER_PANEL_PER_DAY", "0.598")))

# –ú–Ω–æ–∂–∏—Ç–µ–ª—å VIP (NFT)
VIP_MULTIPLIER = Decimal("1.07")  # +7% –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ kWh

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π –Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
MAX_ACTIVE_PANELS_PER_USER = 1000

# –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–ª—è kWh
DEC3 = Decimal("0.001")


def d3(x: Decimal) -> Decimal:
    """
    –û–∫—Ä—É–≥–ª—è–µ—Ç Decimal –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –≤–Ω–∏–∑ (ROUND_DOWN).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è kWh –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π.
    """
    return x.quantize(DEC3, rounding=ROUND_DOWN)


# -----------------------------------------------------------------------------
# DDL –ø–æ–º–æ—â–Ω–∏–∫–∏: kWh-–∂—É—Ä–Ω–∞–ª –∏ –∏–Ω–¥–µ–∫—Å—ã (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
# -----------------------------------------------------------------------------
KWH_LOG_CREATE_SQL = """
CREATE TABLE IF NOT EXISTS {schema}.kwh_daily_log (
    id BIGSERIAL PRIMARY KEY,
    ts_date DATE NOT NULL,
    telegram_id BIGINT NOT NULL,
    panels_count INTEGER NOT NULL,
    base_kwh NUMERIC(30, 3) NOT NULL,
    vip_multiplier NUMERIC(10, 3) NOT NULL,
    added_kwh NUMERIC(30, 3) NOT NULL,
    created_at TIMESTAMPTZ DEFAULT now()
);

-- –£—Å–∫–æ—Ä–∏–º –≤—ã–±–æ—Ä–∫–∏
CREATE INDEX IF NOT EXISTS idx_kwh_daily_log_by_date_user
    ON {schema}.kwh_daily_log (ts_date, telegram_id);
"""

PANELS_TABLE_CREATE_SQL = """
-- –¢–∞–±–ª–∏—Ü–∞ –ø–∞–Ω–µ–ª–µ–π (–µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç). –í —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ —É –≤–∞—Å ORM-–º–æ–¥–µ–ª—å.
-- –ó–¥–µ—Å—å –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π DDL –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
CREATE TABLE IF NOT EXISTS {schema}.panels (
    id BIGSERIAL PRIMARY KEY,
    telegram_id BIGINT NOT NULL,
    active BOOLEAN NOT NULL DEFAULT TRUE,
    activated_at TIMESTAMPTZ DEFAULT now(),
    expires_at TIMESTAMPTZ NULL,
    archived_at TIMESTAMPTZ NULL
);

-- –ò–Ω–¥–µ–∫—Å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é/–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
CREATE INDEX IF NOT EXISTS idx_panels_user_active
    ON {schema}.panels (telegram_id, active);
"""

async def ensure_aux_tables(db: AsyncSession) -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (kWh log, panels) –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    –ù–∏—á–µ–≥–æ –Ω–µ –ª–æ–º–∞–µ—Ç –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–∑–æ–≤–µ.
    """
    schema = settings.DB_SCHEMA_CORE
    await db.execute(text(KWH_LOG_CREATE_SQL.format(schema=schema)))
    await db.execute(text(PANELS_TABLE_CREATE_SQL.format(schema=schema)))
    await db.commit()


# -----------------------------------------------------------------------------
# NFT-–ø—Ä–æ–≤–µ—Ä–∫–∞ (TonAPI) –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ whitelist
# -----------------------------------------------------------------------------
async def fetch_account_nfts(owner: str) -> List[str]:
    """
    –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ NFT-–∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ owner (TON), –∏—Å–ø. TonAPI v2.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –∞–¥—Ä–µ—Å–æ–≤ NFT.
    """
    base = (settings.NFT_PROVIDER_BASE_URL or "https://tonapi.io").rstrip("/")
    url = f"{base}/v2/accounts/{owner}/nfts"
    headers: Dict[str, str] = {}
    if settings.NFT_PROVIDER_API_KEY:
        headers["Authorization"] = f"Bearer {settings.NFT_PROVIDER_API_KEY}"

    try:
        async with httpx.AsyncClient(timeout=20.0) as client:
            r = await client.get(url, headers=headers)
            r.raise_for_status()
            data = r.json()
    except httpx.HTTPError as e:
        logger.warning(f"[VIP][NFT] TonAPI request failed for owner={owner}: {e}")
        return []

    items = data.get("items") or data.get("nfts") or []
    out: List[str] = []
    for it in items:
        if not it:
            continue
        addr = it.get("address") or (it.get("nft") or {}).get("address")
        if addr:
            out.append(addr.strip())
    return out


async def get_whitelist_nfts(db: AsyncSession) -> List[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ NFT –∏–∑ whitelist (—Ç–∞–±–ª–∏—Ü–∞ efhc_admin.admin_nft_whitelist).
    """
    q = await db.execute(select(AdminNFTWhitelist.nft_address))
    return [row[0].strip() for row in q.fetchall() if row[0]]


# -----------------------------------------------------------------------------
# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è VIP-—Å—Ç–∞—Ç—É—Å–∞
# -----------------------------------------------------------------------------
async def set_user_vip(db: AsyncSession, tg_id: int, enable: bool) -> None:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç/—Å–Ω–∏–º–∞–µ—Ç VIP-—Ñ–ª–∞–≥ (—Ç–∞–±–ª–∏—Ü–∞ efhc_core.user_vip).
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è: –ø—Ä–∏ enable=True ‚Äî –≤—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏; –ø—Ä–∏ False ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏.
    –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—ã–∑–æ–≤—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã.
    """
    q = await db.execute(select(UserVIP).where(UserVIP.telegram_id == tg_id))
    row: Optional[UserVIP] = q.scalar_one_or_none()

    if enable:
        if not row:
            db.add(UserVIP(telegram_id=tg_id, since=datetime.utcnow()))
            await db.commit()
    else:
        if row:
            await db.delete(row)
            await db.commit()


async def is_user_vip(db: AsyncSession, tg_id: int) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª—é—á—ë–Ω VIP (–∑–∞–ø–∏—Å—å –≤ user_vip).
    """
    q = await db.execute(select(UserVIP).where(UserVIP.telegram_id == tg_id))
    return q.scalar_one_or_none() is not None


# -----------------------------------------------------------------------------
# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏
# -----------------------------------------------------------------------------
async def fetch_all_users_with_wallets(db: AsyncSession) -> List[Tuple[int, str]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (telegram_id, wallet_address) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,
    —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–¥–∞–Ω wallet_address (TON). –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –∫–æ–ª–æ–Ω–∫–∞ users.wallet_address.
    """
    q = await db.execute(
        text(f"""
            SELECT telegram_id, wallet_address
            FROM {settings.DB_SCHEMA_CORE}.users
            WHERE wallet_address IS NOT NULL AND length(wallet_address) > 0
        """)
    )
    rows = q.fetchall()
    return [(int(r[0]), str(r[1])) for r in rows]


# -----------------------------------------------------------------------------
# –ü–∞–Ω–µ–ª–∏: –≤—ã–±–æ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π –∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------------------------------------------------------
async def archive_expired_panels(db: AsyncSession) -> int:
    """
    –ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ –ø–∞–Ω–µ–ª–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö expires_at < NOW() –∏ active=TRUE.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –ø–∞–Ω–µ–ª–µ–π –±—ã–ª–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.
    """
    q = await db.execute(
        text(f"""
            UPDATE {settings.DB_SCHEMA_CORE}.panels
            SET active=FALSE, archived_at=NOW()
            WHERE active=TRUE AND expires_at IS NOT NULL AND expires_at < NOW()
            RETURNING id
        """)
    )
    rows = q.fetchall() or []
    count = len(rows)
    if count:
        await db.commit()
    return count


async def count_active_panels(db: AsyncSession, tg_id: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ê–ö–¢–ò–í–ù–´–• –ø–∞–Ω–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (active=TRUE, archived=FALSE).
    """
    q = await db.execute(
        text(f"""
            SELECT COUNT(*) FROM {settings.DB_SCHEMA_CORE}.panels
            WHERE telegram_id=:tg AND active=TRUE
        """),
        {"tg": tg_id},
    )
    row = q.first()
    return int(row[0] if row else 0)


# -----------------------------------------------------------------------------
# –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ kWh –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –±–∞–ª–∞–Ω—Å (bonus –∏ EFHC –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ–º)
# -----------------------------------------------------------------------------
async def add_kwh_to_user(db: AsyncSession, tg_id: int, amount_kwh: Decimal, panels_count: int, vip_multiplier: Decimal) -> None:
    """
    –ù–∞—á–∏—Å–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é amount_kwh kWh –Ω–∞ –±–∞–ª–∞–Ω—Å. –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ–≥ efhc_core.kwh_daily_log.
    –ù–µ —Ç—Ä–æ–≥–∞–µ—Ç EFHC/bonus, VIP.
    """
    # ensure balance row
    await db.execute(
        text(f"""
            INSERT INTO {settings.DB_SCHEMA_CORE}.balances (telegram_id)
            VALUES (:tg)
            ON CONFLICT (telegram_id) DO NOTHING
        """),
        {"tg": tg_id},
    )

    # fetch current balance
    q = await db.execute(select(Balance).where(Balance.telegram_id == tg_id))
    bal: Optional[Balance] = q.scalar_one_or_none()
    cur_kwh = Decimal(bal.kwh or 0) if bal else Decimal("0")

    new_kwh = d3(cur_kwh + amount_kwh)
    await db.execute(
        update(Balance)
        .where(Balance.telegram_id == tg_id)
        .values(kwh=str(new_kwh))
    )

    # log
    await db.execute(
        text(f"""
            INSERT INTO {settings.DB_SCHEMA_CORE}.kwh_daily_log
            (ts_date, telegram_id, panels_count, base_kwh, vip_multiplier, added_kwh)
            VALUES (CURRENT_DATE, :tg, :pcount, :base, :mult, :added)
        """),
        {
            "tg": tg_id,
            "pcount": panels_count,
            "base": str(d3(BASE_KWH_PER_PANEL_PER_DAY * Decimal(panels_count))),
            "mult": str(vip_multiplier),
            "added": str(d3(amount_kwh)),
        },
    )


# -----------------------------------------------------------------------------
# –ó–∞–¥–∞—á–∞ 1: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è VIP —Å—Ç–∞—Ç—É—Å–∞ (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00)
# -----------------------------------------------------------------------------
async def job_sync_vip_status() -> None:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç VIP-—Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –° –ö–û–®–ï–õ–¨–ö–ê–ú–ò:
      ‚Ä¢ –ï—Å–ª–∏ –∫–æ—à–µ–ª—ë–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω NFT –∏–∑ whitelist ‚Üí –≤–∫–ª—é—á–∞–µ–º VIP.
      ‚Ä¢ –ò–Ω–∞—á–µ ‚Üí —Å–Ω–∏–º–∞–µ–º VIP.
    VIP –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è/—Å–Ω–∏–º–∞–µ—Ç—Å—è –Ω–∏–∫–∞–∫–∏–º –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º.
    """
    logger.info("[VIP][SYNC] started")
    async_session: async_sessionmaker[AsyncSession] = get_session()
    async with async_session() as db:
        await ensure_aux_tables(db)  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –Ω–æ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏—à–Ω–∏–º

        whitelist = set([a.strip() for a in (await get_whitelist_nfts(db))])
        if not whitelist:
            logger.warning("[VIP][SYNC] whitelist is empty ‚Äî nobody will be VIP")
        users = await fetch_all_users_with_wallets(db)
        if not users:
            logger.info("[VIP][SYNC] no users with wallets")
            return

        processed = 0
        vip_on = 0
        vip_off = 0

        for tg_id, wallet in users:
            processed += 1
            try:
                user_nfts = set([a.strip() for a in (await fetch_account_nfts(wallet))])
                has = len(whitelist.intersection(user_nfts)) > 0
                current = await is_user_vip(db, tg_id)
                if has and not current:
                    await set_user_vip(db, tg_id, True)
                    vip_on += 1
                    logger.info(f"[VIP][SYNC] user={tg_id} VIP ON")
                elif (not has) and current:
                    await set_user_vip(db, tg_id, False)
                    vip_off += 1
                    logger.info(f"[VIP][SYNC] user={tg_id} VIP OFF")
                # –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            except Exception as e:
                logger.error(f"[VIP][SYNC] user={tg_id} error: {e}")

        logger.info(f"[VIP][SYNC] done: processed={processed}, vip_on={vip_on}, vip_off={vip_off}")


# -----------------------------------------------------------------------------
# –ó–∞–¥–∞—á–∞ 2: –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö kWh (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:30)
# -----------------------------------------------------------------------------
async def job_daily_kwh_accrual() -> None:
    """
    –ù–∞—á–∏—Å–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ kWh:
      ‚Ä¢ –í—ã—á–∏—Å–ª—è–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∏—Å–ª–æ –ê–ö–¢–ò–í–ù–´–• –ø–∞–Ω–µ–ª–µ–π.
      ‚Ä¢ base = panels_count * BASE_KWH_PER_PANEL_PER_DAY;
      ‚Ä¢ –µ—Å–ª–∏ VIP ‚Äî –º–Ω–æ–∂–∏—Ç–µ–ª—å 1.07;
      ‚Ä¢ –Ω–∞—á–∏—Å–ª—è–µ–º kWh = d3(base * multiplier), –ø–∏—à–µ–º –ª–æ–≥.
    –ü–µ—Ä–µ–¥ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–∏.
    """
    logger.info("[KWH][ACCRUAL] started")
    async_session: async_sessionmaker[AsyncSession] = get_session()
    async with async_session() as db:
        await ensure_aux_tables(db)

        # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∏—Å—Ç—ë–∫—à–∏–µ
        try:
            archived_cnt = await archive_expired_panels(db)
            if archived_cnt:
                logger.info(f"[KWH][ACCRUAL] archived expired panels: {archived_cnt}")
        except Exception as e:
            logger.error(f"[KWH][ACCRUAL] archive expired panels error: {e}")

        # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ panels (—É –∫–æ–≥–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞–Ω–µ–ª–∏)
        q = await db.execute(
            text(f"""
                SELECT DISTINCT telegram_id
                FROM {settings.DB_SCHEMA_CORE}.panels
                WHERE active=TRUE
            """)
        )
        user_rows = q.fetchall()
        if not user_rows:
            logger.info("[KWH][ACCRUAL] no users with active panels")
            return

        total_users = 0
        total_kwh = Decimal("0.000")

        for row in user_rows:
            tg_id = int(row[0])
            try:
                # –°–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π
                pcount = await count_active_panels(db, tg_id)
                if pcount <= 0:
                    continue
                # –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –Ω–µ –Ω–∞—Ä—É—à–µ–Ω –ª–∏–º–∏—Ç 1000
                if pcount > MAX_ACTIVE_PANELS_PER_USER:
                    logger.warning(f"[KWH][ACCRUAL][WARN] user={tg_id} active panels={pcount} > limit={MAX_ACTIVE_PANELS_PER_USER}")
                    # –¢—É—Ç –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º/–≤ –ª–æ–≥. –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤—Å—ë —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º –ø–æ —Ñ–∞–∫—Ç—É.

                # VIP?
                vip_flag = await is_user_vip(db, tg_id)
                mult = VIP_MULTIPLIER if vip_flag else Decimal("1.00")

                # –°—á–∏—Ç–∞–µ–º kWh
                base = d3(BASE_KWH_PER_PANEL_PER_DAY * Decimal(pcount))
                add_kwh = d3(base * mult)

                if add_kwh <= 0:
                    continue

                await add_kwh_to_user(db, tg_id, add_kwh, panels_count=pcount, vip_multiplier=mult)
                total_users += 1
                total_kwh += add_kwh

                logger.info(f"[KWH][ACCRUAL] user={tg_id} panels={pcount} vip={vip_flag} added={str(add_kwh)} kWh")
            except Exception as e:
                logger.error(f"[KWH][ACCRUAL] user={tg_id} error: {e}")

        await db.commit()
        logger.info(f"[KWH][ACCRUAL] done: users={total_users}, total_kwh={str(d3(total_kwh))}")


# -----------------------------------------------------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
# -----------------------------------------------------------------------------
_scheduler: Optional[AsyncIOScheduler] = None

def _get_scheduler() -> AsyncIOScheduler:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç) AsyncIOScheduler, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –Ω–∞ TIMEZONE.
    """
    global _scheduler
    if _scheduler is None:
        _scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    return _scheduler


def start_scheduler(app=None) -> AsyncIOScheduler:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –¥–≤—É–º—è –∑–∞–¥–∞—á–∞–º–∏:
      ‚Ä¢ VIP —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 00:00.
      ‚Ä¢ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ kWh ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 00:30.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ app/main.py –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    scheduler = _get_scheduler()

    # –£–¥–∞–ª–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º–∏ id (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)
    for job_id in ("vip_sync_daily", "kwh_accrual_daily"):
        job = scheduler.get_job(job_id)
        if job:
            scheduler.remove_job(job_id)

    # VIP sync ‚Äî 00:00 –ø–æ —Ç–∞–π–º–∑–æ–Ω–µ
    scheduler.add_job(
        lambda: asyncio.create_task(job_sync_vip_status()),
        trigger=CronTrigger(hour=0, minute=0, timezone=TIMEZONE),
        id="vip_sync_daily",
        replace_existing=True,
        name="Daily VIP NFT Sync (00:00)",
    )

    # kWh accrual ‚Äî 00:30 –ø–æ —Ç–∞–π–º–∑–æ–Ω–µ
    scheduler.add_job(
        lambda: asyncio.create_task(job_daily_kwh_accrual()),
        trigger=CronTrigger(hour=0, minute=30, timezone=TIMEZONE),
        id="kwh_accrual_daily",
        replace_existing=True,
        name="Daily kWh Accrual (00:30)",
    )

    # –°—Ç–∞—Ä—Ç—É–µ–º, –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω
    if not scheduler.running:
        scheduler.start()
        logger.info(f"[SCHEDULER] started with TIMEZONE={TIMEZONE}")

    return scheduler


# -----------------------------------------------------------------------------
# –†—É—á–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã (–ø–æ –∂–µ–ª–∞–Ω–∏—é) ‚Äî –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É:
# -----------------------------------------------------------------------------
async def run_vip_sync_now() -> None:
    """
    –í—ã–ø–æ–ª–Ω–∏—Ç—å VIP —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–º–æ–∂–Ω–æ –¥–µ—Ä–≥–∞—Ç—å –∏–∑ –∞–¥–º–∏–Ω–∫–∏).
    """
    await job_sync_vip_status()


async def run_kwh_accrual_now() -> None:
    """
    –í—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ kWh –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–º–æ–∂–Ω–æ –¥–µ—Ä–≥–∞—Ç—å –∏–∑ –∞–¥–º–∏–Ω–∫–∏).
    """
    await job_daily_kwh_accrual()


# -----------------------------------------------------------------------------
# –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:
# -----------------------------------------------------------------------------
# 1) –í app/main.py:
#       from .scheduler import start_scheduler
#       @app.on_event("startup")
#       async def on_startup():
#           start_scheduler(app)
#
# 2) –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:
#       ‚Ä¢ config.TIMEZONE –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–¥–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Europe/Kyiv" –∏–ª–∏ "UTC").
#       ‚Ä¢ –í –±–∞–∑–µ –µ—Å—Ç—å schema efhc_core –∏ —Ç–∞–±–ª–∏—Ü—ã users/balances/user_vip/admin_nft_whitelist/panels.
#       ‚Ä¢ –ü–∞–Ω–µ–ª–∏: –ø–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ Shop –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏–º–∏—Ç <= 1000 active –ø–∞–Ω–µ–ª–µ–π (–Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è),
#         –∏ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É–∫–∞–∑—ã–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å/—Å—Ä–æ–∫/–∞—Ä—Ö–∏–≤ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ ‚Äî —á—Ç–æ–±—ã job_daily_kwh_accrual
#         –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å—á–∏—Ç–∞–ª–∞ —ç–Ω–µ—Ä–≥–∏—é –∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–ª–∞.
#
# 3) –í–ù–ò–ú–ê–ù–ò–ï:
#       ‚Ä¢ –ó–¥–µ—Å—å –º—ã –ù–ï —Ç—Ä–æ–≥–∞–µ–º EFHC-–±–∞–ª–∞–Ω—Å, —Ç–æ–ª—å–∫–æ kWh. –õ—é–±—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ EFHC ‚Äî —á–µ—Ä–µ–∑ efhc_transactions
#         –∏ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ë–∞–Ω–∫ (ID = 362746228). –ö—É—Ä—Å EFHC = 1 kWh, –Ω–æ –Ω–µ –¥–µ–ª–∞–π—Ç–µ –ø—Ä—è–º–æ–π –∑–∞–ø–∏—Å–∏ EFHC –∑–¥–µ—Å—å.
#       ‚Ä¢ VIP-—Ñ–ª–∞–≥ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫—É NFT (–ø—Ä–∞–≤–∏–ª–æ –ø—Ä–æ–µ–∫—Ç–∞). –õ—é–±—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Ä—É—á–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è VIP
#         –≤–Ω–µ —ç—Ç–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π.
#
# 4) –õ–æ–≥–∏:
#       ‚Ä¢ kWh –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –≤ efhc_core.kwh_daily_log (ts_date, telegram_id, panels_count, base_kwh, vip_multiplier, added_kwh).
#       ‚Ä¢ VIP –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –ª–æ–≥–∞—Ö INFO.
#
# -----------------------------------------------------------------------------
