# üìÇ backend/app/scheduler.py ‚Äî —Ñ–æ–Ω–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á EFHC (—ç–Ω–µ—Ä–≥–∏—è, VIP, –ª–æ—Ç–µ—Ä–µ–∏)
# -----------------------------------------------------------------------------
# –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –º–æ–¥—É–ª—å:
#   ‚Ä¢ –ù–∞—á–∏—Å–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é (–∫–í—Ç) –ø–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º "–ø–∞–Ω–µ–ª—è–º" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
#       - –û—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–∞–Ω–µ–ª–µ–π: efhc_core.panel_catalog (level -> daily_kwh)
#       - –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞–Ω–µ–ª–µ–π: efhc_core.user_panels (telegram_id, level, count)
#       - –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π-–ª–æ–≥–æ–≤: efhc_core.panel_accrual_log (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–æ–≤ –≤ –æ–¥–∏–Ω –¥–µ–Ω—å)
#       - VIP –º–Ω–æ–∂–∏—Ç–µ–ª—å = +7% (1.07), –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å user_vip –∏–ª–∏ –∞–¥–º–∏–Ω-NFT (–Ω–µ –ø—É—Ç–∞—Ç—å —Å SUP admin).
#   ‚Ä¢ –ü–µ—Ä–µ–æ–¥–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç VIP —Ñ–ª–∞–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ NFT (—á–µ—Ä–µ–∑ nft_checker.py):
#       - –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ EFHC ‚Üí –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π VIP-—Ñ–ª–∞–≥ (user_vip).
#       - –≠—Ç–æ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞; –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ (admin_routes).
#   ‚Ä¢ –û–±—Å–ª—É–∂–∏–≤–∞–µ—Ç –ª–æ—Ç–µ—Ä–µ–∏:
#       - –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, –µ—Å–ª–∏ —á–∏—Å–ª–æ –±–∏–ª–µ—Ç–æ–≤ –¥–æ—Å—Ç–∏–≥–ª–æ –ø–æ—Ä–æ–≥–∞ –≤ –ª–æ—Ç–µ—Ä–µ–µ –∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞.
#       - –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ª–æ—Ç–µ—Ä–µ—é.
#
# –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:
#   ‚Ä¢ –í main.py –∑–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ (–ø—Ä–∏–º–µ—Ä):
#         asyncio.create_task(scheduler_loop(accrual_hour_utc=0, poll_interval=60))
#
# –ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏:
#   ‚Ä¢ –ú–æ–¥—É–ª–∏:
#       - database.get_session() ‚Äî —Ñ–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π.
#       - config.get_settings() ‚Äî –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —Å—Ö–µ–º–∞ –ë–î –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
#       - nft_checker.is_vip_by_nft(db, telegram_id) ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è NFT –≤ whitelist –∫–æ–ª–ª–µ–∫—Ü–∏–∏.
#       - models.py ‚Äî –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ SQLAlchemy (–ø—Ä–∏–≥–æ–¥—è—Ç—Å—è –≤ –±—É–¥—É—â–µ–º; –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º SQL).
#   ‚Ä¢ –¢–∞–±–ª–∏—Ü—ã (—Å–æ–∑–¥–∞—ë–º idempotent):
#       efhc_core.users(telegram_id), efhc_core.balances (efhc, bonus, kwh),
#       efhc_core.user_vip (vip —Ñ–ª–∞–≥),
#       efhc_core.panel_catalog (–æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –ø–∞–Ω–µ–ª–µ–π –∏ –¥–Ω–µ–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è),
#       efhc_core.user_panels (—Å–∫–æ–ª—å–∫–æ –ø–∞–Ω–µ–ª–µ–π –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è),
#       efhc_core.panel_accrual_log (–ª–æ–≥ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –Ω–∞ –¥–∞—Ç—É),
#       efhc_lottery.lotteries, efhc_lottery.lottery_tickets (—Ä–∞–±–æ—Ç–∞ —Å –ª–æ—Ç–µ—Ä–µ—è–º–∏).
#
# –í–∞–∂–Ω–æ:
#   ‚Ä¢ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ 00:00 UTC).
#     –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è, –º—ã –≤–µ–¥—ë–º log efhc_core.panel_accrual_log
#     —Å –∫–ª—é—á–æ–º (accrual_date, telegram_id).
#   ‚Ä¢ VIP –º–Ω–æ–∂–∏—Ç–µ–ª—å 1.07 (–ù–ï 2.0!). –í –ø—Ä–æ–µ–∫—Ç–µ –±—ã–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: +7%.
#   ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 1000 –ø–∞–Ω–µ–ª–µ–π ‚Äî —Å–æ–±–ª—é–¥–∞–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ API /user/panels/buy; –∑–¥–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ñ–∞–∫—Ç—É.
#   ‚Ä¢ –£—Ä–æ–≤–Ω–∏ –ø–∞–Ω–µ–ª–µ–π –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (daily_kwh):
#       - –í –∏–¥–µ–∞–ª–µ –±–µ—Ä—ë–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã efhc_core.panel_catalog (level INT UNIQUE, daily_kwh NUMERIC).
#       - –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è ‚Äî –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –¥–æ–ø—É—â–µ–Ω–∏–π.
#       - ‚á® –¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç –≤–∞—Å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è "daily_kwh" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è (1..N).
# -----------------------------------------------------------------------------

from __future__ import annotations

import asyncio
from datetime import date, datetime, timedelta, timezone
from decimal import Decimal, ROUND_DOWN
from typing import Any, Dict, List, Optional, Tuple

from sqlalchemy import text, select
from sqlalchemy.ext.asyncio import AsyncSession

from .config import get_settings
from .database import get_session
from .nft_checker import is_vip_by_nft  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è: –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ NFT-–≤–ª–∞–¥–µ–Ω–∏—è
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –µ—Å–ª–∏ nft_checker –∏–º–µ–µ—Ç –∏–Ω—ã–µ –∏–º–µ–Ω–∞/–∞—Ä–≥—É–º–µ–Ω—Ç—ã ‚Äî –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º–ø–æ—Ä—Ç/–≤—ã–∑–æ–≤.

# -----------------------------------------------------------------------------
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# -----------------------------------------------------------------------------
settings = get_settings()

# –°—Ö–µ–º—ã –ë–î ‚Äî –±–µ—Ä—É—Ç—Å—è –∏–∑ config, —á—Ç–æ–±—ã –±—ã—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º–∏ —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π:
SCHEMA_CORE = settings.DB_SCHEMA_CORE or "efhc_core"
SCHEMA_LOTTERY = settings.DB_SCHEMA_LOTTERY or "efhc_lottery"
SCHEMA_TASKS = settings.DB_SCHEMA_TASKS or "efhc_tasks"
SCHEMA_ADMIN = settings.DB_SCHEMA_ADMIN or "efhc_admin"
SCHEMA_REFERRAL = settings.DB_SCHEMA_REFERRAL or "efhc_referrals"

# –§–ª–∞–≥: VIP –º–Ω–æ–∂–∏—Ç–µ–ª—å (–≤—Å–µ–≥–¥–∞ +7%), –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Ä–∞–Ω–µ–µ
VIP_MULTIPLIER = Decimal("1.07")

# –û–∫—Ä—É–≥–ª–µ–Ω–∏—è:
DEC3 = Decimal("0.001")  # kWh/EFHC/bonus
def d3(x: Decimal) -> Decimal:
    """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π (–¥–ª—è kWh, EFHC, bonus)."""
    return x.quantize(DEC3, rounding=ROUND_DOWN)


# -----------------------------------------------------------------------------
# SQL ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (idempotent)
# -----------------------------------------------------------------------------
CREATE_SCHEMA_CORE_SQL = f"""
CREATE SCHEMA IF NOT EXISTS {SCHEMA_CORE};
"""

CREATE_PANEL_CATALOG_SQL = f"""
-- –ö–∞—Ç–∞–ª–æ–≥ —É—Ä–æ–≤–Ω–µ–π –ø–∞–Ω–µ–ª–µ–π, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –¥–Ω–µ–≤–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (kWh) –ø–æ —É—Ä–æ–≤–Ω—é
CREATE TABLE IF NOT EXISTS {SCHEMA_CORE}.panel_catalog (
    id SERIAL PRIMARY KEY,
    level INT UNIQUE NOT NULL,
    title TEXT NULL,
    daily_kwh NUMERIC(30, 3) NOT NULL CHECK (daily_kwh >= 0),
    created_at TIMESTAMPTZ DEFAULT now()
);
"""

CREATE_USER_PANELS_SQL = f"""
-- –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞–Ω–µ–ª–µ–π —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
CREATE TABLE IF NOT EXISTS {SCHEMA_CORE}.user_panels (
    telegram_id BIGINT NOT NULL,
    level INT NOT NULL,
    count INT NOT NULL CHECK (count >= 0),
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now(),
    PRIMARY KEY (telegram_id, level),
    FOREIGN KEY (telegram_id) REFERENCES {SCHEMA_CORE}.users(telegram_id) ON DELETE CASCADE
);
"""

CREATE_PANEL_ACCRUAL_LOG_SQL = f"""
-- –õ–æ–≥ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π (—á—Ç–æ–±—ã –Ω–µ –Ω–∞—á–∏—Å–ª–∏—Ç—å –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ –∑–∞ –æ–¥–Ω—É –¥–∞—Ç—É)
CREATE TABLE IF NOT EXISTS {SCHEMA_CORE}.panel_accrual_log (
    accrual_date DATE NOT NULL,
    telegram_id BIGINT NOT NULL,
    total_kwh NUMERIC(30, 3) NOT NULL DEFAULT 0,
    vip_applied BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT now(),
    PRIMARY KEY (accrual_date, telegram_id),
    FOREIGN KEY (telegram_id) REFERENCES {SCHEMA_CORE}.users(telegram_id) ON DELETE CASCADE
);
"""

CREATE_USER_VIP_SQL = f"""
-- –¢–∞–±–ª–∏—Ü–∞ VIP-—Ñ–ª–∞–≥–æ–≤ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π VIP –¥–ª—è +7%)
CREATE TABLE IF NOT EXISTS {SCHEMA_CORE}.user_vip (
    telegram_id BIGINT PRIMARY KEY REFERENCES {SCHEMA_CORE}.users(telegram_id) ON DELETE CASCADE,
    since TIMESTAMPTZ DEFAULT now()
);
"""

CREATE_BALANCES_SQL = f"""
-- –ë–∞–ª–∞–Ω—Å—ã EFHC/bonus/kWh
CREATE TABLE IF NOT EXISTS {SCHEMA_CORE}.balances (
    telegram_id BIGINT PRIMARY KEY REFERENCES {SCHEMA_CORE}.users(telegram_id) ON DELETE CASCADE,
    efhc NUMERIC(30, 3) DEFAULT 0,
    bonus NUMERIC(30, 3) DEFAULT 0,
    kwh  NUMERIC(30, 3) DEFAULT 0
);
"""

CREATE_USERS_SQL = f"""
-- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ EFHC: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–æ—Ç—É –∏–ª–∏ –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
CREATE TABLE IF NOT EXISTS {SCHEMA_CORE}.users (
    telegram_id BIGINT PRIMARY KEY,
    username TEXT NULL,
    created_at TIMESTAMPTZ DEFAULT now()
);
"""

CREATE_LOTTERY_TABLES_SQL = f"""
-- –õ–æ—Ç–µ—Ä–µ–π–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Å—Ö–µ–º–∞)
CREATE SCHEMA IF NOT EXISTS {SCHEMA_LOTTERY};

CREATE TABLE IF NOT EXISTS {SCHEMA_LOTTERY}.lotteries (
    id SERIAL PRIMARY KEY,
    code TEXT UNIQUE NOT NULL,        -- —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ª–æ—Ç–µ—Ä–µ–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'lottery_vip')
    title TEXT NOT NULL,              -- –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
    prize_type TEXT NOT NULL,         -- 'VIP_NFT', 'PANEL', 'EFHC', 'OTHER'
    target_participants INT NOT NULL DEFAULT 100,
    tickets_sold INT NOT NULL DEFAULT 0,
    active BOOLEAN NOT NULL DEFAULT TRUE,
    winner_telegram_id BIGINT NULL,
    created_at TIMESTAMPTZ DEFAULT now(),
    closed_at TIMESTAMPTZ NULL
);

CREATE TABLE IF NOT EXISTS {SCHEMA_LOTTERY}.lottery_tickets (
    id SERIAL PRIMARY KEY,
    lottery_code TEXT NOT NULL REFERENCES {SCHEMA_LOTTERY}.lotteries(code) ON DELETE CASCADE,
    telegram_id BIGINT NOT NULL,
    purchased_at TIMESTAMPTZ DEFAULT now()
);
"""


async def ensure_scheduler_tables(db: AsyncSession) -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç —Å—Ö–µ–º—ã/—Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π, VIP, –ª–æ—Ç–µ—Ä–µ–π ‚Äî –µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã (idempotent).
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ scheduler_loop() –∏ –ª—é–±—ã—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á.
    """
    # –ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω: —Å–Ω–∞—á–∞–ª–∞ —Å—Ö–µ–º–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏/–±–∞–ª–∞–Ω—Å—ã/VIP, –∑–∞—Ç–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞–Ω–µ–ª–∏/–ª–æ–≥
    await db.execute(text(CREATE_SCHEMA_CORE_SQL))
    await db.execute(text(CREATE_USERS_SQL))
    await db.execute(text(CREATE_BALANCES_SQL))
    await db.execute(text(CREATE_USER_VIP_SQL))
    await db.execute(text(CREATE_PANEL_CATALOG_SQL))
    await db.execute(text(CREATE_USER_PANELS_SQL))
    await db.execute(text(CREATE_PANEL_ACCRUAL_LOG_SQL))
    await db.execute(text(CREATE_LOTTERY_TABLES_SQL))
    await db.commit()


# -----------------------------------------------------------------------------
# –ü–æ–º–æ—â–Ω–∏–∫–∏: –ø—Ä–æ–≤–µ—Ä–∫–∞/–ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ VIP, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# -----------------------------------------------------------------------------
async def _ensure_user_exists(db: AsyncSession, telegram_id: int) -> None:
    """
    –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —é–∑–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –≤ balances.
    –≠—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –ª—é–±–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π –∑–∞—á–∏—Å–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, kWh).
    """
    await db.execute(
        text(f"""
            INSERT INTO {SCHEMA_CORE}.users (telegram_id)
            VALUES (:tg)
            ON CONFLICT (telegram_id) DO NOTHING
        """),
        {"tg": telegram_id},
    )
    await db.execute(
        text(f"""
            INSERT INTO {SCHEMA_CORE}.balances (telegram_id)
            VALUES (:tg)
            ON CONFLICT (telegram_id) DO NOTHING
        """),
        {"tg": telegram_id},
    )

async def _set_vip(db: AsyncSession, telegram_id: int) -> None:
    """
    –ü—Ä–æ—Å—Ç–∞–≤–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π VIP-—Ñ–ª–∞–≥ (user_vip), –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç.
    """
    await _ensure_user_exists(db, telegram_id)
    await db.execute(
        text(f"""
            INSERT INTO {SCHEMA_CORE}.user_vip (telegram_id)
            VALUES (:tg)
            ON CONFLICT (telegram_id) DO NOTHING
        """),
        {"tg": telegram_id},
    )

async def _unset_vip(db: AsyncSession, telegram_id: int) -> None:
    """
    –°–Ω—è—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π VIP-—Ñ–ª–∞–≥ (user_vip) —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await db.execute(
        text(f"""
            DELETE FROM {SCHEMA_CORE}.user_vip
             WHERE telegram_id = :tg
        """),
        {"tg": telegram_id},
    )


async def _has_internal_vip(db: AsyncSession, telegram_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π VIP-—Ñ–ª–∞–≥ (user_vip).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True/False.
    """
    q = await db.execute(
        text(f"""
            SELECT 1 FROM {SCHEMA_CORE}.user_vip
             WHERE telegram_id = :tg
        """),
        {"tg": telegram_id},
    )
    return q.scalar() is not None


# -----------------------------------------------------------------------------
# VIP —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ NFT (nft_checker.is_vip_by_nft)
# -----------------------------------------------------------------------------
async def sync_vip_by_nft(db: AsyncSession, telegram_id: int, wallet_address: Optional[str]) -> bool:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å VIP –ø–æ NFT:
      - –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ wallet_address –µ—Å—Ç—å NFT –∏–∑ –Ω—É–∂–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (nft_checker),
        –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º user_vip (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ).
      - –ï—Å–ª–∏ NFT –Ω–µ—Ç ‚Äî —Å–Ω–∏–º–∞–µ–º user_vip (–µ—Å–ª–∏ —Ö–æ—Ç–∏–º —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –≤–ª–∞–¥–µ–Ω–∏—é NFT).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: True (–µ—Å—Ç—å VIP —Å–µ–π—á–∞—Å) / False (–Ω–µ—Ç VIP).
    """
    # –ï—Å–ª–∏ –∫–æ—à–µ–ª—ë–∫ –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî —Å—á–∏—Ç–∞–µ–º —á—Ç–æ NFT –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º (VIP —Ç–æ–ª—å–∫–æ –≤—Ä—É—á–Ω—É—é/—á–µ—Ä–µ–∑ –æ–ø–ª–∞—Ç—É).
    if not wallet_address:
        # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º. –í–æ–∑–≤—Ä–∞—â–∞–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π VIP
        return await _has_internal_vip(db, telegram_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ nft_checker (–≤–Ω—É—Ç—Ä–∏ –æ–Ω –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ TonAPI, whitelist –≤ admin_nft_whitelist)
    vip_now = await is_vip_by_nft(db, owner=wallet_address)
    if vip_now:
        await _set_vip(db, telegram_id)
        return True
    else:
        # –ü–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –º–æ–∂–Ω–æ –ª–∏–±–æ —Å–Ω–∏–º–∞—Ç—å VIP, –ª–∏–±–æ –æ—Å—Ç–∞–≤–ª—è—Ç—å (–≤–æ–ø—Ä–æ—Å –∫ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–µ).
        # –ó–¥–µ—Å—å ‚Äî —Å–Ω–∏–º–∞–µ–º, —á—Ç–æ–±—ã VIP —á–µ—Ç–∫–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –≤–ª–∞–¥–µ–Ω–∏—é NFT.
        await _unset_vip(db, telegram_id)
        return False


# -----------------------------------------------------------------------------
# –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ –ø–∞–Ω–µ–ª—è–º
# -----------------------------------------------------------------------------
async def _fetch_panel_catalog(db: AsyncSession) -> Dict[int, Decimal]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {level -> daily_kwh} –∏–∑ efhc_core.panel_catalog.
    –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.
    –í–Ω–∏–º–∞–Ω–∏–µ: –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã/–∑–∞–≤–µ–¥–µ–Ω—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É –∏–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—é.
    """
    q = await db.execute(
        text(f"""
            SELECT level, daily_kwh
              FROM {SCHEMA_CORE}.panel_catalog
             ORDER BY level ASC
        """)
    )
    out: Dict[int, Decimal] = {}
    for level, daily_kwh in q.all() or []:
        try:
            out[int(level)] = d3(Decimal(daily_kwh or 0))
        except Exception:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            continue
    return out

async def _fetch_all_user_panels(db: AsyncSession) -> List[Dict[str, Any]]:
    """
    –í—ã–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π user_panels:
      [{telegram_id, level, count}, ...]
    """
    q = await db.execute(
        text(f"""
            SELECT telegram_id, level, count
              FROM {SCHEMA_CORE}.user_panels
             WHERE count > 0
             ORDER BY telegram_id ASC, level ASC
        """)
    )
    rows = []
    for tg, level, count in q.all() or []:
        rows.append({"telegram_id": int(tg), "level": int(level), "count": int(count)})
    return rows

async def _was_accrued_for_date(db: AsyncSession, tg: int, accrual_date: date) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞ –¥–∞—Ç—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    q = await db.execute(
        text(f"""
            SELECT 1
              FROM {SCHEMA_CORE}.panel_accrual_log
             WHERE accrual_date = :ad AND telegram_id = :tg
        """),
        {"ad": accrual_date, "tg": tg},
    )
    return q.scalar() is not None

async def _log_accrual(db: AsyncSession, tg: int, accrual_date: date, total_kwh: Decimal, vip_applied: bool) -> None:
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–∫—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ –≤ panel_accrual_log.
    """
    await db.execute(
        text(f"""
            INSERT INTO {SCHEMA_CORE}.panel_accrual_log (accrual_date, telegram_id, total_kwh, vip_applied)
            VALUES (:ad, :tg, :k, :vip)
            ON CONFLICT (accrual_date, telegram_id) DO NOTHING
        """),
        {"ad": accrual_date, "tg": tg, "k": str(d3(total_kwh)), "vip": vip_applied},
    )

async def _credit_kwh(db: AsyncSession, tg: int, kwh_amount: Decimal) -> None:
    """
    –ù–∞—á–∏—Å–ª—è–µ—Ç kWh –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤ balances.kwh).
    """
    await _ensure_user_exists(db, tg)
    await db.execute(
        text(f"""
            UPDATE {SCHEMA_CORE}.balances
               SET kwh = COALESCE(kwh, 0) + :k
             WHERE telegram_id = :tg
        """),
        {"k": str(d3(kwh_amount)), "tg": tg},
    )

async def accrue_daily_energy(db: AsyncSession, accrual_date: Optional[date] = None) -> Dict[str, Any]:
    """
    –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ (kWh) –ø–æ –ø–∞–Ω–µ–ª—è–º.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç efhc_core.panel_catalog –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 'daily_kwh' –ø–∞–Ω–µ–ª–µ–π –ø–æ —É—Ä–æ–≤–Ω—è–º.
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç VIP –º–Ω–æ–∂–∏—Ç–µ–ª—å 1.07 (–µ—Å–ª–∏ –µ—Å—Ç—å user_vip).
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ–≥ (panel_accrual_log) –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –¥–≤–æ–π–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:
      {
        "ok": True,
        "processed_users": N,
        "total_kwh": "..." (—Å—Ç—Ä–æ–∫–∞, 3 –∑–Ω–∞–∫–∞)
      }
    """
    # –î–∞—Ç–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è ‚Äî –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–æ UTC
    if accrual_date is None:
        accrual_date = datetime.now(timezone.utc).date()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –ø–∞–Ω–µ–ª–µ–π (—É—Ä–æ–≤–Ω–∏ ‚Üí daily_kwh)
    catalog = await _fetch_panel_catalog(db)
    if not catalog:
        # –ù–µ –Ω–∞–π–¥–µ–Ω –∫–∞—Ç–∞–ª–æ–≥ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ–º, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        print("[EFHC][SCHEDULER] WARNING: panel_catalog is empty ‚Äî daily accrual skipped.")
        return {"ok": False, "processed_users": 0, "total_kwh": "0.000"}

    rows = await _fetch_all_user_panels(db)
    processed_users = 0
    total_kwh_sum = Decimal("0.000")

    # –°–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ telegram_id, —á—Ç–æ–±—ã –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ä–∞–∑–æ–º
    by_user: Dict[int, List[Dict[str, int]]] = {}
    for r in rows:
        tg = r["telegram_id"]
        by_user.setdefault(tg, []).append(r)

    for tg, items in by_user.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å–ª–∏ —É–∂–µ –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –∑–∞ –¥–∞—Ç—É ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if await _was_accrued_for_date(db, tg, accrual_date):
            continue

        # –°—É–º–º–∏—Ä—É–µ–º kWh –ø–æ –≤—Å–µ–º —É—Ä–æ–≤–Ω—è–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        base_kwh = Decimal("0.000")
        for it in items:
            lvl = it["level"]
            cnt = it["count"]
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 1000 –ø–∞–Ω–µ–ª–µ–π —Å–æ–±–ª—é–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–∫—É–ø–∫–∞—Ö; –∑–¥–µ—Å—å —ç—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞,
            # –Ω–æ –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞—â–∏—Ç–∏—Ç—å—Å—è:
            if cnt < 0:
                cnt = 0
            if cnt > 1000:
                cnt = 1000
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º daily_kwh –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
            daily_kwh = catalog.get(lvl, Decimal("0.000"))
            base_kwh += Decimal(cnt) * daily_kwh

        # VIP –º–Ω–æ–∂–∏—Ç–µ–ª—å ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ–ª–∞–≥ user_vip
        vip_flag = await _has_internal_vip(db, tg)
        if vip_flag:
            base_kwh = d3(base_kwh * VIP_MULTIPLIER)

        # –ù–∞—á–∏—Å–ª—è–µ–º kWh, –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –Ω–∞—á–∏—Å–ª—è—Ç—å
        if base_kwh > 0:
            await _credit_kwh(db, tg, base_kwh)
            await _log_accrual(db, tg, accrual_date, base_kwh, vip_flag)
            processed_users += 1
            total_kwh_sum += base_kwh

    # –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ—Å–ª–µ –ø–∞—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await db.commit()

    return {"ok": True, "processed_users": processed_users, "total_kwh": f"{d3(total_kwh_sum):.3f}"}


# -----------------------------------------------------------------------------
# –õ–æ—Ç–µ—Ä–µ–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
# -----------------------------------------------------------------------------
async def _fetch_active_lotteries(db: AsyncSession) -> List[Dict[str, Any]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π (–∏–∑ efhc_lottery.lotteries).
    """
    q = await db.execute(
        text(f"""
            SELECT code, title, prize_type, target_participants, tickets_sold, active, winner_telegram_id
              FROM {SCHEMA_LOTTERY}.lotteries
             WHERE active = TRUE
        """)
    )
    rows = []
    for code, title, prize_type, target_participants, tickets_sold, active, winner_tid in q.all() or []:
        rows.append({
            "code": code,
            "title": title,
            "prize_type": prize_type,
            "target_participants": int(target_participants or 0),
            "tickets_sold": int(tickets_sold or 0),
            "active": bool(active),
            "winner_telegram_id": winner_tid
        })
    return rows

async def _get_lottery_tickets(db: AsyncSession, code: str) -> List[int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ telegram_id –≤—Å–µ—Ö –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –ª–æ—Ç–µ—Ä–µ–∏ code.
    –ö–∞–∂–¥—ã–π –±–∏–ª–µ—Ç ‚Äî –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç (–º–æ–≥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è).
    """
    q = await db.execute(
        text(f"""
            SELECT telegram_id
              FROM {SCHEMA_LOTTERY}.lottery_tickets
             WHERE lottery_code = :code
             ORDER BY id ASC
        """),
        {"code": code},
    )
    return [int(row[0]) for row in q.all() or []]

async def _set_lottery_winner(db: AsyncSession, code: str, winner_tid: int) -> None:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ –ª–æ—Ç–µ—Ä–µ–µ –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –µ—ë.
    """
    await db.execute(
        text(f"""
            UPDATE {SCHEMA_LOTTERY}.lotteries
               SET winner_telegram_id = :tid,
                   active = FALSE,
                   closed_at = now()
             WHERE code = :code
        """),
        {"tid": winner_tid, "code": code},
    )

async def draw_lotteries(db: AsyncSession) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏ –∏, –µ—Å–ª–∏ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ—Å—Ç–∏–≥–ª–æ target_participants,
    –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è –±–∏–ª–µ—Ç–æ–≤. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ª–æ—Ç–µ—Ä–µ—é (active = FALSE) –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç winner_telegram_id.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:
    {
      "ok": True,
      "lotteries_closed": N
    }
    """
    import random

    active_list = await _fetch_active_lotteries(db)
    closed_count = 0

    for lot in active_list:
        code = lot["code"]
        target = lot["target_participants"]
        sold = lot["tickets_sold"]

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏—Ö –±–∏–ª–µ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if sold < target:
            continue

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–∏–ª–µ—Ç—ã –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        tickets = await _get_lottery_tickets(db, code)
        if not tickets:
            continue

        winner = random.choice(tickets)
        await _set_lottery_winner(db, code, winner)
        closed_count += 1

    await db.commit()
    return {"ok": True, "lotteries_closed": closed_count}


# -----------------------------------------------------------------------------
# –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: —Å—É—Ç–æ—á–Ω–∞—è —Å–µ—Å—Å–∏—è –∏ —Ç–∏–∫–µ—Ä
# -----------------------------------------------------------------------------
async def run_daily_energy_accrual(accrual_date: Optional[date] = None) -> Dict[str, Any]:
    """
    –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏ (–≤–Ω–µ FastAPI –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞).
    –ü–æ–ª–µ–∑–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ –∫—Ä–æ–Ω-–¥–∂–æ–±–∞ (schedule) –∏–ª–∏ –∏–∑ main.py –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ —á–∞—Å–∞ X (–Ω–∞–ø—Ä–∏–º–µ—Ä 00:00 UTC).
    """
    async with get_session() as db:
        await ensure_scheduler_tables(db)
        result = await accrue_daily_energy(db, accrual_date=accrual_date)
        # –ö–æ–º–º–∏—Ç –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤–Ω—É—Ç—Ä–∏ accrue_daily_energy (–Ω–∞ —Å–ª—É—á–∞–π –ø–æ—ç—Ç–∞–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π).
    return result

async def run_lottery_draw() -> Dict[str, Any]:
    """
    –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ –ª–æ—Ç–µ—Ä–µ—è–º (–≥–¥–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤).
    """
    async with get_session() as db:
        await ensure_scheduler_tables(db)
        result = await draw_lotteries(db)
        # –ö–æ–º–º–∏—Ç –≤–Ω—É—Ç—Ä–∏ draw_lotteries
    return result


# -----------------------------------------------------------------------------
# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è VIP –ø–æ NFT (–ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º –∫–æ—à–µ–ª—å–∫–æ–º)
# -----------------------------------------------------------------------------
async def _fetch_users_with_wallets(db: AsyncSession) -> List[Tuple[int, Optional[str]]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤.
    –í–∞–∂–Ω–æ: –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –º—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ efhc_core.users –∏–º–µ–µ—Ç –¥–æ–ø. –ø–æ–ª–µ wallet_address,
    –∫–æ—Ç–æ—Ä–æ–µ —Ö—Ä–∞–Ω–∏—Ç TON –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é.
    –ï—Å–ª–∏ —É –≤–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–≤—è–∑–∫–∏ user->wallet, –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ [(telegram_id, wallet_address), ...].
    """
    # –í–ù–ò–ú–ê–ù–ò–ï: –ï—Å–ª–∏ –≤ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ users –Ω–µ—Ç –ø–æ–ª—è wallet_address, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é.
    # –ó–¥–µ—Å—å –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–∞–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ.
    try:
        q = await db.execute(
            text(f"""
                SELECT telegram_id, wallet_address
                  FROM {SCHEMA_CORE}.users
                 WHERE wallet_address IS NOT NULL
            """)
        )
        return [(int(tid), str(w)) for tid, w in q.all() or []]
    except Exception:
        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç wallet_address ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ
        return []

async def sync_all_vip_from_nft() -> Dict[str, Any]:
    """
    –ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∫–æ—à–µ–ª—å–∫–∞–º–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç VIP –ø–æ NFT.
    –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å NFT –∏–∑ whitelist –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ‚Äî –≤—ã–¥–∞—ë–º user_vip,
    –∏–Ω–∞—á–µ (–ø–æ —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ) —Å–Ω–∏–º–∞–µ–º VIP.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:
    {
      "ok": True,
      "processed": N,
      "vip_on": K,     # —É —Å–∫–æ–ª—å–∫–∏—Ö VIP –≤–∫–ª—é—á—ë–Ω –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      "vip_off": M,    # —É —Å–∫–æ–ª—å–∫–∏—Ö VIP –≤—ã–∫–ª—é—á–µ–Ω –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    }
    """
    on, off = 0, 0
    processed = 0

    async with get_session() as db:
        await ensure_scheduler_tables(db)
        pairs = await _fetch_users_with_wallets(db)
        for (tg, wa) in pairs:
            processed += 1
            vip_now = await sync_vip_by_nft(db, telegram_id=tg, wallet_address=wa)
            if vip_now:
                on += 1
            else:
                off += 1
        await db.commit()

    return {"ok": True, "processed": processed, "vip_on": on, "vip_off": off}


# -----------------------------------------------------------------------------
# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (loop): –≤—ã–∑–æ–≤—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
# -----------------------------------------------------------------------------
async def scheduler_loop(
    accrual_hour_utc: int = 0,
    poll_interval: int = 60,
    run_vip_sync_each_hours: int = 6,
    run_lottery_check_each_minutes: int = 10,
) -> None:
    """
    –§–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:
      - –†–∞–∑ –≤ —Å—É—Ç–∫–∏ (–≤ accrual_hour_utc –ø–æ UTC) –Ω–∞—á–∏—Å–ª—è–µ—Ç —ç–Ω–µ—Ä–≥–∏—é –ø–æ –ø–∞–Ω–µ–ª—è–º.
      - –ö–∞–∂–¥—ã–µ run_vip_sync_each_hours ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç VIP –ø–æ NFT (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ—à–µ–ª—å–∫–∏).
      - –ö–∞–∂–¥—ã–µ run_lottery_check_each_minutes ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≥–¥–µ –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ª–æ—Ç–µ—Ä–µ–∏.
      - –¶–∏–∫–ª —É—Å—Ç–æ–π—á–∏–≤ –∫ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º: –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
      - accrual_hour_utc: —á–∞—Å (0‚Äì23), –∫–æ–≥–¥–∞ –¥–µ–ª–∞–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ kWh. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 0 ‚Äî –ø–æ–ª–Ω–æ—á—å UTC.
      - poll_interval: –ø–µ—Ä–∏–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 60 —Å–µ–∫—É–Ω–¥).
      - run_vip_sync_each_hours: –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ VIP –ø–æ NFT, –∫–∞–∂–¥—ã–µ N —á–∞—Å–æ–≤.
      - run_lottery_check_each_minutes: –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ—Ç–µ—Ä–µ–π, –∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç.

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
      - –≤ main.py:
            asyncio.create_task(scheduler_loop(accrual_hour_utc=0, poll_interval=60))
    """
    # –¢–µ–∫—É—â–∏–µ —Å—á—ë—Ç—á–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è VIP –∏ –ª–æ—Ç–µ—Ä–µ–π
    vip_sync_timer = 0
    lottery_timer = 0

    print(
        f"[EFHC][SCHEDULER] Loop started: "
        f"accrual_hour_utc={accrual_hour_utc}, poll_interval={poll_interval}s, "
        f"vip_sync_each={run_vip_sync_each_hours}h, lottery_check_each={run_lottery_check_each_minutes}m"
    )

    # –ù–µ–±–æ–ª—å—à–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
    await asyncio.sleep(3)

    while True:
        try:
            now = datetime.now(timezone.utc)

            # 1) –ï—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª —á–∞—Å –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (–∏ –≤ —Ç–µ–∫—É—â–∏–µ —Å—É—Ç–∫–∏ –Ω–µ –Ω–∞—á–∏—Å–ª—è–ª–∏)
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—ã: –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Å.
            # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–æ–≤, accrue_daily_energy –ø—Ä–æ–≤–µ—Ä—è–µ—Ç log –ø–æ –¥–∞—Ç–µ.
            if now.hour == accrual_hour_utc:
                try:
                    # –ù–∞—á–∏—Å–ª—è–µ–º –∑–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É (UTC)
                    res = await run_daily_energy_accrual(accrual_date=now.date())
                    print(f"[EFHC][SCHEDULER] Daily accrual: {res}")
                except Exception as e:
                    print(f"[EFHC][SCHEDULER] ERROR in daily accrual: {e}")

            # 2) –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è VIP –ø–æ NFT (–∫–∞–∂–¥—ã–µ N —á–∞—Å–æ–≤)
            vip_sync_timer += poll_interval
            if vip_sync_timer >= run_vip_sync_each_hours * 3600:
                vip_sync_timer = 0
                try:
                    res = await sync_all_vip_from_nft()
                    print(f"[EFHC][SCHEDULER] VIP sync result: {res}")
                except Exception as e:
                    print(f"[EFHC][SCHEDULER] ERROR in VIP sync: {e}")

            # 3) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ—Ç–µ—Ä–µ–π (–∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç)
            lottery_timer += poll_interval
            if lottery_timer >= run_lottery_check_each_minutes * 60:
                lottery_timer = 0
                try:
                    res = await run_lottery_draw()
                    print(f"[EFHC][SCHEDULER] Lottery draw: {res}")
                except Exception as e:
                    print(f"[EFHC][SCHEDULER] ERROR in lottery draw: {e}")

        except Exception as e:
            # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –∏–∑-–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            print(f"[EFHC][SCHEDULER] Unexpected error in loop: {e}")
        finally:
            await asyncio.sleep(poll_interval)


# -----------------------------------------------------------------------------
# –†—É—á–Ω–æ–π –≤—ã–∑–æ–≤ –∑–∞–¥–∞—á (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏ / –æ—Ç–ª–∞–¥–∫–∏)
# -----------------------------------------------------------------------------
async def manual_accrual_for_date(accrual_date: Optional[date] = None) -> Dict[str, Any]:
    """
    –†—É—á–Ω–æ–π —Ç—Ä–∏–≥–≥–µ—Ä –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è kWh –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç accrue_daily_energy.
    """
    return await run_daily_energy_accrual(accrual_date=accrual_date)

async def manual_lottery_check() -> Dict[str, Any]:
    """
    –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ—Ç–µ—Ä–µ–π (–∑–∞–∫—Ä—ã—Ç–∏–µ –∏ –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É draw_lotteries().
    """
    return await run_lottery_draw()

async def manual_vip_sync() -> Dict[str, Any]:
    """
    –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è VIP –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏ (–µ–∂–µ—á–∞—Å–Ω–æ/–ø–æ –∫–Ω–æ–ø–∫–µ).
    """
    return await sync_all_vip_from_nft()
