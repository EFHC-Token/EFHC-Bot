# üìÇ backend/app/scheduler.py ‚Äî –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤—Å–µ—Ö –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á EFHC
# -----------------------------------------------------------------------------
# –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –º–æ–¥—É–ª—å:
#   ‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è kWh –ø–æ –ø–∞–Ω–µ–ª—è–º (–∞–∫—Ç–∏–≤–Ω—ã–º), —Å —É—á—ë—Ç–æ–º VIP-–º–Ω–æ–∂–∏—Ç–µ–ª—è (+7%).
#   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–∞–Ω–µ–ª–µ–π –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ 180 –¥–Ω–µ–π ("–ø–∞–Ω–µ–ª–∏ –≤ –∞—Ä—Ö–∏–≤"), –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ 1000.
#   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ NFT-–≤–ª–∞–¥–µ–Ω–∏—è (—á–µ—Ä–µ–∑ nft_checker): –¥–æ–±–∞–≤–ª—è–µ—Ç/—Å–Ω–∏–º–∞–µ—Ç —Å—Ç–∞—Ç—É—Å VIP –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø–µ—Ä–µ–¥ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º kWh.
#   ‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –ª–æ—Ç–µ—Ä–µ—è–º–∏:
#       - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (target_participants).
#       - –í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (—Å–ª—É—á–∞–π–Ω–æ –∏–∑ –∫—É–ø–∏–≤—à–∏—Ö –±–∏–ª–µ—Ç—ã).
#   ‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (—É—Ä–æ–≤–Ω–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è):
#       - –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–∫—É–ø–∏–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∞–∫—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å).
#       - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: 0, 1, 2, 3, 4, 5 (—Å –ø–æ—Ä–æ–≥–∞–º–∏ 0,10,100,1000,3000,10000).
#       - –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è ‚Äî —Ä–∞–∑–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ EFHC –∑–∞ —É—Ä–æ–≤–µ–Ω—å (1/10/100/300/1000 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ).
#
# –ì–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:
#   ‚Ä¢ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ main.py –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—á–µ—Ä–µ–∑ asyncio loop).
#   ‚Ä¢ –ú–µ—Ç–æ–¥—ã –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–¥–º–∏–Ω–æ–º —á–µ—Ä–µ–∑ admin_routes).
#
# –í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:
#   ‚Ä¢ –ü–∞–Ω–µ–ª–∏ —Ö—Ä–∞–Ω–∏–º –≤ efhc_core.user_panel_lots (–ª–æ—Ç—ã –ø–æ–∫—É–ø–æ–∫ —Å –¥–∞—Ç–æ–π),
#     –∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ efhc_core.user_panels –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã.
#     - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ—á–µ–Ω–∏–µ 180 –¥–Ω–µ–π (DEACTIVATION_DAYS),
#       –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –ª–æ—Ç—ã –≤ –∞—Ä—Ö–∏–≤ efhc_core.user_panel_lots_archive –∏ —É–º–µ–Ω—å—à–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω–æ–µ count –≤ user_panels.
#   ‚Ä¢ –í–∞–ª—é—Ç–∞ EFHC –∏ kWh –æ–∫—Ä—É–≥–ª—è–µ—Ç—Å—è –¥–æ 3 –∑–Ω–∞–∫–æ–≤.
#   ‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∏ –±–æ–Ω—É—Å—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã (–Ω–∏–∂–µ).
#
# –¢—Ä–µ–±—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∏–∑:
#   ‚Ä¢ user_routes.py ‚Üí ensure_user_routes_tables() —Å–æ–∑–¥–∞–µ—Ç —á–∞—Å—Ç—å.
#   ‚Ä¢ –ó–¥–µ—Å—å —Å–æ–∑–¥–∞–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ (user_panel_lots / archive / referral_levels) idempotent.
#
# -----------------------------------------------------------------------------

from __future__ import annotations

import asyncio
import random
from datetime import datetime, timedelta, timezone
from decimal import Decimal, ROUND_DOWN
from typing import Any, Dict, List, Optional

from sqlalchemy import text
from sqlalchemy.ext.asyncio import AsyncSession

from .config import get_settings
from .database import async_session
from .nft_checker import user_has_efhc_nft  # –ü—Ä–æ–≤–µ—Ä–∫–∞ NFT —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–ª–∞–¥–µ–Ω–∏—è (tonapi)
# from .ton_integration import process_incoming_payments  # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø—Ä–æ—Å TON —Å–æ–±—ã—Ç–∏–π (–≤—ã–Ω–µ—Å–µ–Ω–æ –≤ main)

# -----------------------------------------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# -----------------------------------------------------------------------------
settings = get_settings()

SCHEMA_CORE = settings.DB_SCHEMA_CORE or "efhc_core"
SCHEMA_TASKS = settings.DB_SCHEMA_TASKS or "efhc_tasks"
SCHEMA_LOTTERY = settings.DB_SCHEMA_LOTTERY or "efhc_lottery"
SCHEMA_REFERRAL = settings.DB_SCHEMA_REFERRAL or "efhc_referrals"

PANEL_PRICE_EFHC = Decimal(str(settings.PANEL_PRICE_EFHC or "100"))      # 100 EFHC –∑–∞ –ø–∞–Ω–µ–ª—å
PANEL_DAILY_KWH = Decimal(str(settings.PANEL_DAILY_KWH or "0.598"))      # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è kWh/—Å—É—Ç–∫–∏ –Ω–∞ 1 –ø–∞–Ω–µ–ª—å
PANEL_MAX_COUNT = int(settings.PANEL_MAX_COUNT or 1000)                   # –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π

DEACTIVATION_DAYS = int(settings.PANEL_DEACTIVATION_DAYS or 180)         # —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ –ø–∞–Ω–µ–ª–∏ (–¥–Ω–µ–π)

VIP_MULTIPLIER = Decimal("1.07")   # VIP –Ω–∞—á–∏—Å–ª—è–µ—Ç +7%

DEC3 = Decimal("0.001")
def d3(x: Decimal) -> Decimal:
    """–û–∫—Ä—É–≥–ª—è–µ—Ç Decimal –¥–æ 3 –∑–Ω–∞–∫–æ–≤ (–¥–ª—è EFHC/kWh)."""
    return x.quantize(DEC3, rounding=ROUND_DOWN)

# –õ–æ—Ç–µ—Ä–µ—è ‚Äî —Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–∞ ‚Äî 1 EFHC (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –¢–ó)
LOTTERY_TICKET_PRICE_EFHC = Decimal("1.000")

# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∏ –±–æ–Ω—É—Å—ã (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¢–ó)
# –£—Ä–æ–≤–µ–Ω—å: (–ø–æ—Ä–æ–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, —Ä–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å EFHC –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏)
REF_LEVELS = [
    (0, Decimal("0.000")),      # 0 -> +0 EFHC
    (10, Decimal("1.000")),     # 10 –∞–∫—Ç–∏–≤–Ω—ã—Ö -> +1 EFHC
    (100, Decimal("10.000")),   # 100 -> +10 EFHC
    (1000, Decimal("100.000")), # 1000 -> +100 EFHC
    (3000, Decimal("300.000")), # 3000 -> +300 EFHC
    (10000, Decimal("1000.000"))# 10000 -> +1000 EFHC
]

# -----------------------------------------------------------------------------
# SQL –¥–ª—è —Ç–∞–±–ª–∏—Ü, –∫–æ—Ç–æ—Ä—ã–µ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) —Å–æ–∑–¥–∞—ë—Ç
# -----------------------------------------------------------------------------
CREATE_CORE_TABLES_SCHEDULER = f"""
-- –õ–æ—Ç—ã –ø–æ–∫—É–ø–æ–∫ –ø–∞–Ω–µ–ª–µ–π: –∫–∞–∂–¥—ã–π –ª–æ—Ç ("–∫–æ—Ä–∑–∏–Ω–∞" –∏–∑ N –ø–∞–Ω–µ–ª–µ–π —Å –æ–±—â–µ–π –¥–∞—Ç–æ–π –ø–æ–∫—É–ø–∫–∏)
CREATE TABLE IF NOT EXISTS {SCHEMA_CORE}.user_panel_lots (
    id SERIAL PRIMARY KEY,
    telegram_id BIGINT NOT NULL REFERENCES {SCHEMA_CORE}.users(telegram_id) ON DELETE CASCADE,
    count INT NOT NULL DEFAULT 0,         -- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π –≤ —ç—Ç–æ–º –ª–æ—Ç–µ
    purchased_at TIMESTAMPTZ NOT NULL DEFAULT now(),  -- –¥–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ –ª–æ—Ç–∞
    active BOOLEAN NOT NULL DEFAULT TRUE, -- –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ª–æ—Ç (–ø–æ–∫–∞ –Ω–µ –∏—Å—Ç–µ–∫–ª–∏ 180 –¥–Ω–µ–π)
    deactivated_at TIMESTAMPTZ NULL
);

-- –ê—Ä—Ö–∏–≤ –ª–æ—Ç–æ–≤ (–¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π)
CREATE TABLE IF NOT EXISTS {SCHEMA_CORE}.user_panel_lots_archive (
    id SERIAL PRIMARY KEY,
    lot_id INT NOT NULL,
    telegram_id BIGINT NOT NULL,
    count INT NOT NULL DEFAULT 0,
    purchased_at TIMESTAMPTZ NOT NULL,
    archived_at TIMESTAMPTZ NOT NULL
);

-- –°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
CREATE TABLE IF NOT EXISTS {SCHEMA_CORE}.user_panels (
    telegram_id BIGINT NOT NULL REFERENCES {SCHEMA_CORE}.users(telegram_id) ON DELETE CASCADE,
    level INT NOT NULL DEFAULT 1,
    count INT NOT NULL DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now(),
    PRIMARY KEY (telegram_id, level)
);

-- –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ç–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π, —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
-- –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤—ã–¥–∞—á–∏ –±–æ–Ω—É—Å–æ–≤
CREATE TABLE IF NOT EXISTS {SCHEMA_REFERRAL}.user_referral_levels (
    telegram_id BIGINT PRIMARY KEY,
    current_level INT NOT NULL DEFAULT 0,
    updated_at TIMESTAMPTZ DEFAULT now()
);
"""

async def ensure_scheduler_tables(db: AsyncSession) -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã (idempotent):
      - efhc_core.user_panel_lots
      - efhc_core.user_panel_lots_archive
      - efhc_core.user_panels (–∞–≥–≥—Ä–µ–≥–∞—Ç)
      - efhc_referrals.user_referral_levels
    """
    await db.execute(text(CREATE_CORE_TABLES_SCHEDULER))
    await db.commit()

# -----------------------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π, –ø–∞–Ω–µ–ª–µ–π, —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ VIP
# -----------------------------------------------------------------------------
async def _get_all_users(db: AsyncSession) -> List[int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (telegram_id) –∏–∑ —è–¥—Ä–∞."""
    q = await db.execute(text(f"SELECT telegram_id FROM {SCHEMA_CORE}.users"))
    return [int(r[0]) for r in q.all() or []]

async def _get_active_panel_count(db: AsyncSession, telegram_id: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ –ª–æ—Ç–∞–º).
    """
    q = await db.execute(
        text(f"""
            SELECT COALESCE(SUM(count), 0)
              FROM {SCHEMA_CORE}.user_panel_lots 
             WHERE telegram_id = :tg AND active = TRUE
        """),
        {"tg": telegram_id},
    )
    return int(q.scalar() or 0)

async def _set_user_panels_aggregate(db: AsyncSession, telegram_id: int, count: int) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–≥—Ä–µ–≥–∞—Ç–Ω—É—é –∑–∞–ø–∏—Å—å {SCHEMA_CORE}.user_panels (level=1) –ø–æ —Å—É–º–º–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤.
    """
    await db.execute(
        text(f"""
            INSERT INTO {SCHEMA_CORE}.user_panels(telegram_id, level, count)
            VALUES (:tg, 1, :c)
            ON CONFLICT(telegram_id, level) DO UPDATE SET count = :c, updated_at = now()
        """),
        {"tg": telegram_id, "c": count},
    )

async def _credit_kwh(db: AsyncSession, telegram_id: int, amount_kwh: Decimal) -> None:
    """
    –ù–∞—á–∏—Å–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é kWh –Ω–∞ –±–∞–ª–∞–Ω—Å.
    """
    await db.execute(
        text(f"""
            UPDATE {SCHEMA_CORE}.balances
               SET kwh = COALESCE(kwh, 0) + :amt
             WHERE telegram_id = :tg
        """),
        {"tg": telegram_id, "amt": str(d3(amount_kwh))},
    )

async def _set_user_vip(db: AsyncSession, telegram_id: int) -> None:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ—Ç).
    """
    await db.execute(
        text(f"""
            INSERT INTO {SCHEMA_CORE}.user_vip (telegram_id)
            VALUES (:tg)
            ON CONFLICT (telegram_id) DO NOTHING
        """),
        {"tg": telegram_id},
    )

async def _unset_user_vip(db: AsyncSession, telegram_id: int) -> None:
    """
    –°–Ω–∏–º–∞–µ—Ç VIP —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await db.execute(
        text(f"DELETE FROM {SCHEMA_CORE}.user_vip WHERE telegram_id = :tg"),
        {"tg": telegram_id},
    )

async def _user_is_vip(db: AsyncSession, telegram_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ VIP —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    q = await db.execute(
        text(f"SELECT 1 FROM {SCHEMA_CORE}.user_vip WHERE telegram_id = :tg"),
        {"tg": telegram_id},
    )
    return q.scalar() is not None

async def _deactivate_expired_panels(db: AsyncSession) -> int:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã –ø–∞–Ω–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å –º–æ–º–µ–Ω—Ç–∞ purchase –ø—Ä–æ—à–ª–æ >= 180 –¥–Ω–µ–π,
    –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –∏—Ö –≤ –∞—Ä—Ö–∏–≤ –∏ —É–º–µ–Ω—å—à–∞–µ—Ç –∞–≥—Ä–µ–≥–∞—Ç {SCHEMA_CORE}.user_panels –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤.
    """
    now = datetime.now(timezone.utc)
    cutoff = now - timedelta(days=DEACTIVATION_DAYS)

    # –í—ã–±–µ—Ä–µ–º –≤—Å–µ –∏—Å—Ç—ë–∫—à–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã
    q = await db.execute(
        text(f"""
            SELECT id, telegram_id, count, purchased_at
              FROM {SCHEMA_CORE}.user_panel_lots
             WHERE active = TRUE
               AND purchased_at <= :cutoff
        """),
        {"cutoff": cutoff},
    )
    lots = q.all() or []
    deactivated = 0

    for lot in lots:
        lot_id, telegram_id, cnt, purchased_at = int(lot[0]), int(lot[1]), int(lot[2]), lot[3]
        # 1) –°–¥–µ–ª–∞–µ–º active=FALSE, –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –¥–∞—Ç—É
        await db.execute(
            text(f"""
                UPDATE {SCHEMA_CORE}.user_panel_lots
                   SET active = FALSE, deactivated_at = now()
                 WHERE id = :lot
            """),
            {"lot": lot_id},
        )
        # 2) –ü–µ—Ä–µ–Ω–µ—Å—ë–º –≤ –∞—Ä—Ö–∏–≤
        await db.execute(
            text(f"""
                INSERT INTO {SCHEMA_CORE}.user_panel_lots_archive(lot_id, telegram_id, count, purchased_at, archived_at)
                VALUES (:lot, :tg, :cnt, :pa, now())
            """),
            {"lot": lot_id, "tg": telegram_id, "cnt": cnt, "pa": purchased_at},
        )
        # 3) –û–±–Ω–æ–≤–∏–º –∞–≥—Ä–µ–≥–∞—Ç (—É–º–µ–Ω—å—à–∏—Ç—Å—è –Ω–∞ cnt)
        active_total = await _get_active_panel_count(db, telegram_id)
        await _set_user_panels_aggregate(db, telegram_id, active_total)

        deactivated += 1

    await db.commit()
    return deactivated

async def _sync_vip_by_nft(db: AsyncSession) -> int:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å VIP —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ñ–∞–∫—Ç—É –≤–ª–∞–¥–µ–Ω–∏—è NFT.
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å NFT ‚Üí VIP —Å—Ç–∞–≤–∏–º, –∏–Ω–∞—á–µ —Å–Ω–∏–º–∞–µ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º.
    """
    users = await _get_all_users(db)
    changed = 0

    # –ù–∞–º –Ω—É–∂–µ–Ω –∫–æ—à–µ–ª—ë–∫ (wallet_address) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –≤—ã —Ö—Ä–∞–Ω–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ ‚Äî –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ.
    for tg in users:
        q = await db.execute(
            text(f"SELECT wallet_address FROM {SCHEMA_CORE}.users WHERE telegram_id = :tg"),
            {"tg": tg},
        )
        row = q.fetchone()
        wallet = row[0] if row else None

        # –ï—Å–ª–∏ –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–∑–∂–µ –ø–æ–¥—Ç—è–Ω–µ—Ç—Å—è –∏–∑ —Ñ—Ä–æ–Ω—Ç–∞)
        if not wallet:
            # –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏, –±–µ–∑ –∫–æ—à–µ–ª—å–∫–∞ –º—ã VIP –Ω–µ –º–æ–∂–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚Äî —Å–Ω–∏–º–∞–µ–º VIP
            prev_vip = await _user_is_vip(db, tg)
            if prev_vip:
                await _unset_user_vip(db, tg)
                changed += 1
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º NFT (–≤–ª–∞–¥–µ–Ω–∏–µ)
        has_nft = await user_has_efhc_nft(wallet)
        prev_vip = await _user_is_vip(db, tg)
        if has_nft and (not prev_vip):
            await _set_user_vip(db, tg)
            changed += 1
        elif (not has_nft) and prev_vip:
            await _unset_user_vip(db, tg)
            changed += 1

    await db.commit()
    return changed

async def _daily_accrual_kwh(db: AsyncSession) -> int:
    """
    –ù–∞—á–∏—Å–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é kWh –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–∞–Ω–µ–ª—è–º:
      kWh_add = PANEL_DAILY_KWH * count
    –ï—Å–ª–∏ VIP ‚Üí —É–º–Ω–æ–∂–∞–µ–º —Å—É–º–º—É –Ω–∞ 1.07.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ.
    """
    users = await _get_all_users(db)
    affected = 0

    for tg in users:
        # –°—É–º–º–∞—Ä–Ω–æ–µ —á–∏—Å–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π
        cnt = await _get_active_panel_count(db, tg)
        if cnt <= 0:
            # –î–ª—è —á–∏—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–∏–º –∞–≥—Ä–µ–≥–∞—Ç (–º–æ–≥ —Ä–∞–Ω–µ–µ –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–º)
            await _set_user_panels_aggregate(db, tg, 0)
            continue

        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ
        base = PANEL_DAILY_KWH * Decimal(cnt)

        # VIP?
        vip = await _user_is_vip(db, tg)
        if vip:
            base = base * VIP_MULTIPLIER

        amount_add = d3(base)
        if amount_add > 0:
            await _credit_kwh(db, tg, amount_add)
            # –æ–±–Ω–æ–≤–∏–º –∞–≥—Ä–µ–≥–∞—Ç just to be consistent
            await _set_user_panels_aggregate(db, tg, cnt)
            affected += 1

    await db.commit()
    return affected

async def _lotteries_check_and_close(db: AsyncSession) -> int:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏: –µ—Å–ª–∏ tickets_sold >= target_participants ‚Üí –∑–∞–∫—Ä—ã–≤–∞–µ–º,
    –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å–ª—É—á–∞–π–Ω–æ –∏–∑ –≤—Å–µ—Ö –∫—É–ø–∏–≤—à–∏—Ö –±–∏–ª–µ—Ç—ã (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö –ª–æ—Ç–µ—Ä–µ–π.
    """
    q = await db.execute(
        text(f"""
            SELECT code, title, tickets_sold, target_participants
              FROM {SCHEMA_LOTTERY}.lotteries
             WHERE active = TRUE
        """)
    )
    items = q.all() or []
    closed = 0

    for r in items:
        code, title, sold, target = r[0], r[1], int(r[2] or 0), int(r[3] or 0)
        if sold < target:
            continue

        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:
        # –í–≤–µ–¥—ë–º —Å—Ö–µ–º—É: —É –∫–æ–≥–æ –±–æ–ª—å—à–µ –∫—É–ø–ª–µ–Ω–æ –±–∏–ª–µ—Ç–æ–≤, —É —Ç–æ–≥–æ –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤. 
        # –ó–∞—Ç–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –≤—ã–∏–≥—Ä—ã—à–∞ Tickets Weighted.
        q_tickets = await db.execute(
            text(f"""
                SELECT telegram_id
                  FROM {SCHEMA_LOTTERY}.lottery_tickets
                 WHERE lottery_code = :code
            """),
            {"code": code},
        )
        rows_tk = q_tickets.all() or []
        if not rows_tk:
            # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –±–µ–∑ –±–∏–ª–µ—Ç–æ–≤ –Ω–∏–∫–æ–≥–æ –Ω–µ –≤—ã–±–∏—Ä–∞–µ–º, –∑–∞–∫—Ä—ã–≤–∞–µ–º –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            await db.execute(
                text(f"""
                    UPDATE {SCHEMA_LOTTERY}.lotteries
                       SET active = FALSE, closed_at = now(), winner_telegram_id = NULL
                     WHERE code = :code
                """),
                {"code": code},
            )
            closed += 1
            continue

        # –°–ø–∏—Å–æ–∫ telegram_id –≤—Å–µ—Ö –±–∏–ª–µ—Ç–æ–≤ (–º–æ–≥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫—É–ø–ª–µ–Ω–Ω—ã—Ö)
        ids = [int(rr[0]) for rr in rows_tk]
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ
        winner = random.choice(ids)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ—Ç–µ—Ä–µ—é, —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        await db.execute(
            text(f"""
                UPDATE {SCHEMA_LOTTERY}.lotteries
                   SET active = FALSE, closed_at = now(), winner_telegram_id = :win
                 WHERE code = :code
            """),
            {"code": code, "win": winner},
        )
        closed += 1

    await db.commit()
    return closed

async def _referral_achievement_calc(db: AsyncSession) -> int:
    """
    –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–Ω–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º. –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã ‚Äî —ç—Ç–æ —Ç–µ, —É –∫–æ–≥–æ –µ—Å—Ç—å >=1 –∞–∫—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å.
    –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ ‚Äî 1 —Ä–∞–∑ –Ω–∞—á–∏—Å–ª—è–µ—Ç –ø—Ä–∏–∑ EFHC.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –æ–±–Ω–æ–≤–∏–ª—Å—è —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –±—ã–ª –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å.
    """
    changed = 0

    # –ü–æ–ª—É—á–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ã
    q = await db.execute(
        text(f"""
            SELECT DISTINCT referred_by
              FROM {SCHEMA_REFERRAL}.referrals
             WHERE referred_by IS NOT NULL
        """)
    )
    referrers = [int(r[0]) for r in q.all() or []]
    if not referrers:
        return 0

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—Ä–æ–≤–Ω–∏
    q_levels = await db.execute(
        text(f"""
            SELECT telegram_id, current_level 
              FROM {SCHEMA_REFERRAL}.user_referral_levels
        """)
    )
    level_map = {int(r[0]): int(r[1]) for r in q_levels.all() or []}

    for referrer in referrers:
        # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        q_ref = await db.execute(
            text(f"""
                SELECT r.telegram_id
                  FROM {SCHEMA_REFERRAL}.referrals r
                 WHERE r.referred_by = :ref
            """),
            {"ref": referrer},
        )
        refs = [int(rr[0]) for rr in q_ref.all() or []]
        if not refs:
            # –£ referrer –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏
            # –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–µ–Ω—å, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å
            prev = level_map.get(referrer, 0)
            if prev != 0:
                await db.execute(
                    text(f"""
                        INSERT INTO {SCHEMA_REFERRAL}.user_referral_levels(telegram_id, current_level, updated_at)
                        VALUES (:tg, 0, now())
                        ON CONFLICT(telegram_id) DO UPDATE SET current_level = 0, updated_at = now()
                    """),
                    {"tg": referrer}
                )
                changed += 1
            continue

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é: —Å—É–º–º–∞—Ä–Ω–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π >0 (–ø–æ –ª–æ—Ç–∞–º)
        active_count = 0
        for r_tg in refs:
            ac = await _get_active_panel_count(db, r_tg)
            if ac > 0:
                active_count += 1

        # –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–æ–≥–ª–∞—Å–Ω–æ REF_LEVELS
        new_level = 0
        for i, (threshold, bonus) in enumerate(REF_LEVELS):
            if active_count >= threshold:
                new_level = i
            else:
                break

        prev_level = level_map.get(referrer, 0)

        # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ –ø—Ä–µ–∂–Ω–µ–≥–æ ‚Äî –Ω–∞—á–∏—Å–ª—è–µ–º —Ä–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å –∑–∞ –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å
        if new_level > prev_level:
            # –°—É–º–º–∞—Ä–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥ —Å–æ —Å—Ç–∞—Ä–æ–≥–æ –Ω–∞ –Ω–æ–≤—ã–π
            total_bonus = Decimal("0.000")
            for j in range(prev_level + 1, new_level + 1):
                _, b = REF_LEVELS[j]
                total_bonus += b

            if total_bonus > 0:
                await db.execute(
                    text(f"""
                        UPDATE {SCHEMA_CORE}.balances
                           SET efhc = COALESCE(efhc, 0) + :b
                         WHERE telegram_id = :tg
                    """),
                    {"tg": referrer, "b": str(d3(total_bonus))},
                )

            # –û–±–Ω–æ–≤–∏–º —É—Ä–æ–≤–µ–Ω—å
            await db.execute(
                text(f"""
                    INSERT INTO {SCHEMA_REFERRAL}.user_referral_levels(telegram_id, current_level, updated_at)
                    VALUES (:tg, :lvl, now())
                    ON CONFLICT(telegram_id) DO UPDATE SET current_level = :lvl, updated_at = now()
                """),
                {"tg": referrer, "lvl": new_level},
            )
            changed += 1
        elif new_level < prev_level:
            # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ ‚Äî –ø–æ –¢–ó –º–æ–∂–Ω–æ –ø–æ–Ω–∏–∂–∞—Ç—å –∏–ª–∏ –Ω–µ—Ç. 
            # –ó–¥–µ—Å—å –ø–æ–Ω–∏–∂–∞–µ–º —É—Ä–æ–≤–µ–Ω—å (–±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–∞–Ω–µ–µ –≤—ã–¥–∞–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤).
            await db.execute(
                text(f"""
                    INSERT INTO {SCHEMA_REFERRAL}.user_referral_levels(telegram_id, current_level, updated_at)
                    VALUES (:tg, :lvl, now())
                    ON CONFLICT(telegram_id) DO UPDATE SET current_level = :lvl, updated_at = now()
                """),
                {"tg": referrer, "lvl": new_level},
            )
            changed += 1
        else:
            # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            pass

    await db.commit()
    return changed

# -----------------------------------------------------------------------------
# –ü—É–±–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
# -----------------------------------------------------------------------------
async def daily_vip_and_kwh_job(db: AsyncSession) -> Dict[str, int]:
    """
    –ö–æ–º–ø–æ–∑–∏—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞:
      1) –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å VIP –ø–æ NFT (–¥–æ–±–∞–≤–∏—Ç—å/—Å–Ω—è—Ç—å —É –∫–æ–≥–æ –µ—Å—Ç—å/–Ω–µ—Ç NFT).
      2) –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ (180 –¥–Ω–µ–π) –∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –∞—Ä—Ö–∏–≤.
      3) –ù–∞—á–∏—Å–ª–∏—Ç—å kWh –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–∞–Ω–µ–ª—è–º —Å —É—á–µ—Ç–æ–º VIP=1.07.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ { "vip_changed": ..., "panels_deactivated": ..., "users_accrued": ... }
    """
    await ensure_scheduler_tables(db)

    # 1) VIP ‚Üí NFT
    vip_changed = await _sync_vip_by_nft(db)

    # 2) –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–∞–Ω–µ–ª–µ–π
    panels_deactivated = await _deactivate_expired_panels(db)

    # 3) –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ kWh
    users_accrued = await _daily_accrual_kwh(db)

    return {
        "vip_changed": vip_changed,
        "panels_deactivated": panels_deactivated,
        "users_accrued": users_accrued,
    }

async def lotteries_job(db: AsyncSession) -> Dict[str, int]:
    """
    –ó–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {"lotteries_closed": int}
    """
    await ensure_scheduler_tables(db)
    closed = await _lotteries_check_and_close(db)
    return {"lotteries_closed": closed}

async def referral_achievements_job(db: AsyncSession) -> Dict[str, int]:
    """
    –ó–∞–¥–∞—á–∞: –ø–µ—Ä–µ—Å—á—ë—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–∑–æ–≤—ã—Ö –±–æ–Ω—É—Å–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {"users_changed": int}
    """
    await ensure_scheduler_tables(db)
    changed = await _referral_achievement_calc(db)
    return {"users_changed": changed}

# -----------------------------------------------------------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ main.py)
# -----------------------------------------------------------------------------
async def scheduler_loop() -> None:
    """
    –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
    –í –ø—Ä–æ–¥–∞–∫—à–Ω –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ APScheduler cron trigger —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 13:00 UTC).
    –ó–¥–µ—Å—å ‚Äî –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:
      - –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:50 UTC: VIP/NFT sync + –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è + –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ kWh.
      - –ö–∞–∂–¥—ã–π —á–∞—Å: –ª–æ—Ç–µ—Ä–µ–∏ (–∏–ª–∏ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç ‚Äî –Ω–∞ –≤–∞—à –≤–∫—É—Å).
      - –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 13:00 UTC: –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∏ –±–æ–Ω—É—Å—ã.
    –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–≥—Ä—É–∑–∫–µ.
    """
    print("[SCHED] Scheduler started")
    while True:
        try:
            now = datetime.now(timezone.utc)
            hour = now.hour
            minute = now.minute

            # –ë–ª–æ–∫ 1: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –±–ª–∏–∑–∫–æ –∫ 12:50 UTC ‚Äî VIP + –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è + –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è kWh
            # –í—ã –º–æ–∂–µ—Ç–µ –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –∑–¥–µ—Å—å ‚Äî –ø—Ä–∏–º–µ—Ä.
            if hour == 12 and minute in (50, 51, 52):  # 12:50-12:52 UTC ‚Äî —Ç—Ä–∏ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                async with async_session() as db:
                    metrics = await daily_vip_and_kwh_job(db)
                    print(f"[SCHED] daily_vip_and_kwh_job: {metrics}")

            # –ë–ª–æ–∫ 2: –ª–æ—Ç–µ—Ä–µ–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            if (minute % 10) == 0:
                async with async_session() as db:
                    l_metrics = await lotteries_job(db)
                    if l_metrics.get("lotteries_closed", 0) > 0:
                        print(f"[SCHED] lotteries_job: {l_metrics}")

            # –ë–ª–æ–∫ 3: —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∏ –±–æ–Ω—É—Å—ã ‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 13:00 UTC
            if hour == 13 and minute in (0, 1, 2):
                async with async_session() as db:
                    r_metrics = await referral_achievements_job(db)
                    print(f"[SCHED] referral_achievements_job: {r_metrics}")

        except Exception as e:
            print(f"[SCHED] Error in scheduler loop: {e}")

        # –°–ø–∏–º –º–∏–Ω—É—Ç—É (60 —Å–µ–∫)
        await asyncio.sleep(60)

# -----------------------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–æ–≤–æ–π —Ä—É—á–Ω–æ–π –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á (–¥–ª—è —Ç–µ—Å—Ç–æ–≤/–∞–¥–º–∏–Ω–æ–≤)
# -----------------------------------------------------------------------------
async def run_all_jobs_once() -> Dict[str, Any]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.
    –£–¥–æ–±–Ω–æ –¥–ª—è —Ä—É—á–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    async with async_session() as db:
        await ensure_scheduler_tables(db)
        a = await daily_vip_and_kwh_job(db)
        b = await lotteries_job(db)
        c = await referral_achievements_job(db)

    return {"daily_vip_kwh": a, "lotteries": b, "referrals": c}
