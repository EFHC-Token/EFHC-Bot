# üìÇ backend/app/scheduler.py ‚Äî –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á EFHC (–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø)
# -----------------------------------------------------------------------------
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
#   ‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ NFT ‚Üí –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã VIP-—Å—Ç–∞—Ç—É—Å–æ–≤ (00:00).
#   ‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ kWh –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–∞–Ω–µ–ª—è–º (00:30).
#   ‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 180 –¥–Ω–µ–π (00:15).
#
# –ë–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞ (—É—á—Ç–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é):
#   ‚Ä¢ VIP-—Å—Ç–∞—Ç—É—Å: –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —É —Ç–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ–≥–æ —Å–µ–π—á–∞—Å –µ—Å—Ç—å NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ EFHC
#     –≤ –∏—Ö TON-–∫–æ—à–µ–ª—å–∫–µ. –í–∫–ª—é—á–∞–µ—Ç—Å—è/–æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –∑–∞–¥–∞—á–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ NFT (00:00).
#     –õ—é–±–∞—è –ø–æ–∫—É–ø–∫–∞ VIP/NFT –≤ Shop –ù–ï –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ ‚Äî –ª–∏—à—å —Å–æ–∑–¥–∞—ë—Ç –∑–∞—è–≤–∫—É (–¥–ª—è NFT)
#     –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–ø–ª–∞—Ç—ã. –°—Ç–∞—Ç—É—Å VIP –ø–æ—è–≤–∏—Ç—Å—è/–ø—Ä–æ–ø–∞–¥—ë—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ.
#   ‚Ä¢ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—É—Ç–æ—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ kWh –≤ 00:30:
#       - –ë–ê–ó–ê: 0.598 kWh –Ω–∞ 1 –ø–∞–Ω–µ–ª—å (–æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å).
#       - VIP:  0.640 kWh –Ω–∞ 1 –ø–∞–Ω–µ–ª—å (‚âà +7% ‚Üí –º–Ω–æ–∂–∏—Ç–µ–ª—å 1.07).
#       - –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 0.001 –≤–Ω–∏–∑ (ROUND_DOWN).
#       - kWh –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –≤ balances.kwh (—Ä–∞—Å—Ö–æ–¥—É–µ–º—ã–π –ø—É–ª) –∏ –≤ balances.kwh_total (–Ω–µ—É–±—ã–≤–∞—é—â–∞—è
#         –º–µ—Ç—Ä–∏–∫–∞ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞).
#       - –ù–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–≥–æ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã –ø–æ –¥–Ω—é: —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª–µ efhc_core.kwh_generation_log
#         (user_id + accrual_date).
#   ‚Ä¢ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π: –∞–∫—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å (active = TRUE) —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π (active = FALSE),
#     –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ >= 180 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ activated_at. –ü–æ–ª–µ archived_at –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è.
#
# –¢–∞–±–ª–∏—Ü—ã (DDL –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π ensure_scheduler_tables):
#
#   efhc_core.user_wallets:        (TON-–∫–æ—à–µ–ª—å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
#     - telegram_id BIGINT NOT NULL
#     - ton_address TEXT NOT NULL
#     - is_primary BOOL DEFAULT TRUE
#     - added_at TIMESTAMPTZ DEFAULT now()
#     - UNIQUE(telegram_id, ton_address)
#
#   efhc_core.user_vip_status:     (—Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å–µ–π—á–∞—Å –¥–µ–π—Å—Ç–≤—É—é—â–∏–π VIP)
#     - telegram_id BIGINT PRIMARY KEY
#     - since TIMESTAMPTZ NOT NULL
#     - last_checked TIMESTAMPTZ
#     - has_nft BOOLEAN NOT NULL DEFAULT TRUE
#
#   efhc_core.kwh_generation_log:  (–∂—É—Ä–Ω–∞–ª –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ kWh)
#     - id BIGSERIAL PRIMARY KEY
#     - telegram_id BIGINT NOT NULL
#     - accrual_date DATE NOT NULL  -- –¥–∞—Ç–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (YYYY-MM-DD)
#     - panels_count INT NOT NULL
#     - is_vip BOOLEAN NOT NULL
#     - amount_kwh NUMERIC(30,3) NOT NULL
#     - created_at TIMESTAMPTZ DEFAULT now()
#     - UNIQUE(telegram_id, accrual_date)
#
# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
#   ‚Ä¢ database.py ‚Äî async_session_maker (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏), engine.
#   ‚Ä¢ config.py ‚Äî get_settings() (—Å—Ö–µ–º—ã, –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã, –∫–æ–ª–ª–µ–∫—Ü–∏—è NFT –∏ —Ç. –¥.).
#   ‚Ä¢ models.py ‚Äî Balances, Panels, Users (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–µ—Ä–µ–∑ raw SQL).
#   ‚Ä¢ nft_checker.py ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è EFHC NFT –ø–æ TON-–∞–¥—Ä–µ—Å—É.
#   ‚Ä¢ efhc_transactions.py ‚Äî –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–¥–µ—Å—å (—Ç–∫ —ç—Ç–æ kWh, –∞ –Ω–µ EFHC).
#
# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
#   ‚Ä¢ –í app/main.py –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –≤—ã–∑–≤–∞—Ç—å setup_scheduler(app) –∏ scheduler.start().
#   ‚Ä¢ –ó–∞–¥–∞—á–∏ –ø–æ –∫—Ä–æ–Ω—É:
#       - 00:00 ‚Äî run_nft_vip_check()
#       - 00:15 ‚Äî archive_expired_panels()
#       - 00:30 ‚Äî run_daily_kwh_accrual()
#
# –í–∞–∂–Ω–æ:
#   ‚Ä¢ –í—Å–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –¥–æ 3 –∑–Ω–∞–∫–æ–≤ (ROUND_DOWN).
#   ‚Ä¢ –í—Å–µ SELECT/UPDATE –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å—Ö–µ–º—É settings.DB_SCHEMA_CORE.
#   ‚Ä¢ –ö—É—Ä—Å "1 EFHC = 1 kWh" –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∑–¥–µ—Å—å ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ EFHC –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è
#     —Ç–æ–ª—å–∫–æ –≤ –æ–±–º–µ–Ω–Ω–∏–∫–µ (–æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å /exchange).
# -----------------------------------------------------------------------------

from __future__ import annotations

import asyncio
import logging
from datetime import datetime, timedelta, date
from decimal import Decimal, ROUND_DOWN
from typing import Optional, Dict, List, Tuple, Set

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy import text, select
from sqlalchemy.ext.asyncio import AsyncSession

from .config import get_settings
from .database import async_session_maker  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ database.py —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è async_session_maker
# –ï—Å–ª–∏ —É –≤–∞—Å –¥—Ä—É–≥–æ–µ –∏–º—è, —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –∏–º–ø–æ—Ä—Ç. –í–∞—Ä–∏–∞–Ω—Ç:
# from .database import async_session as async_session_maker

# nft_checker –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è EFHC NFT:
#   - async def has_efhc_nft(address: str) -> bool
#   (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –±–∞—Ç—á-–≤–µ—Ä—Å–∏—è:
#   - async def batch_has_efhc_nft(addresses: List[str]) -> Dict[str, bool]
try:
    from . import nft_checker
except Exception:  # fallback, –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    nft_checker = None

# -----------------------------------------------------------------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã/–æ–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
# -----------------------------------------------------------------------------
log = logging.getLogger("efhc")
settings = get_settings()

DEC3 = Decimal("0.001")

# –°—É—Ç–æ—á–Ω–∞—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ 1 –ø–∞–Ω–µ–ª—å
BASE_KWH_PER_PANEL = Decimal("0.598")  # –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
VIP_KWH_PER_PANEL = Decimal("0.640")   # VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (‚âà +7%)

# –°—Ä–æ–∫ –∂–∏–∑–Ω–∏ –ø–∞–Ω–µ–ª–∏ (–∞–∫—Ç–∏–≤–Ω–æ–π) ‚Äî —Å—Ç—Ä–æ–≥–æ 180 –¥–Ω–µ–π
PANEL_LIFETIME_DAYS = 180

def d3(x: Decimal) -> Decimal:
    """
    –û–∫—Ä—É–≥–ª—è–µ—Ç Decimal –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –≤–Ω–∏–∑ (ROUND_DOWN).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è kWh –∏ –ª—é–±—ã—Ö –ø—Ä–æ—á–∏—Ö –≤–µ–ª–∏—á–∏–Ω –≤–Ω—É—Ç—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è.
    """
    return x.quantize(DEC3, rounding=ROUND_DOWN)

# -----------------------------------------------------------------------------
# DDL: —Å–æ–∑–¥–∞—ë–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (idempotent)
# -----------------------------------------------------------------------------
DDL_USER_WALLETS = f"""
CREATE TABLE IF NOT EXISTS {settings.DB_SCHEMA_CORE}.user_wallets (
    telegram_id BIGINT NOT NULL,
    ton_address TEXT NOT NULL,
    is_primary BOOLEAN NOT NULL DEFAULT TRUE,
    added_at TIMESTAMPTZ DEFAULT now(),
    UNIQUE(telegram_id, ton_address)
);
"""

DDL_USER_VIP_STATUS = f"""
CREATE TABLE IF NOT EXISTS {settings.DB_SCHEMA_CORE}.user_vip_status (
    telegram_id BIGINT PRIMARY KEY,
    since TIMESTAMPTZ NOT NULL,
    last_checked TIMESTAMPTZ,
    has_nft BOOLEAN NOT NULL DEFAULT TRUE
);
"""

DDL_KWH_GENERATION_LOG = f"""
CREATE TABLE IF NOT EXISTS {settings.DB_SCHEMA_CORE}.kwh_generation_log (
    id BIGSERIAL PRIMARY KEY,
    telegram_id BIGINT NOT NULL,
    accrual_date DATE NOT NULL,
    panels_count INT NOT NULL,
    is_vip BOOLEAN NOT NULL,
    amount_kwh NUMERIC(30,3) NOT NULL,
    created_at TIMESTAMPTZ DEFAULT now(),
    UNIQUE(telegram_id, accrual_date)
);
"""

async def ensure_scheduler_tables(db: AsyncSession) -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã user_wallets, user_vip_status –∏ kwh_generation_log.
    –í—ã–∑–æ–≤ –±–µ–∑–æ–ø–∞—Å–µ–Ω –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ.
    """
    await db.execute(text(DDL_USER_WALLETS))
    await db.execute(text(DDL_USER_VIP_STATUS))
    await db.execute(text(DDL_KWH_GENERATION_LOG))
    await db.commit()

# -----------------------------------------------------------------------------
# –ù–∞–≥—Ä—É–∑–∫–∞ VIP-—Å—Ç–∞—Ç—É—Å–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è EFHC NFT –≤ TON-–∫–æ—à–µ–ª—å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# -----------------------------------------------------------------------------
async def fetch_all_wallets(db: AsyncSession) -> Dict[int, List[str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å: { telegram_id: [ton_address1, ton_address2, ...] }
    –ë–µ—Ä—ë–º –∏–∑ efhc_core.user_wallets –≤—Å–µ –∑–∞–ø–∏—Å–∏.
    """
    q = await db.execute(
        text(f"""
            SELECT telegram_id, ton_address
            FROM {settings.DB_SCHEMA_CORE}.user_wallets
        """)
    )
    rows = q.fetchall()

    result: Dict[int, List[str]] = {}
    for tg, addr in rows:
        tg = int(tg)
        if tg not in result:
            result[tg] = []
        result[tg].append(addr)
    return result

async def fetch_current_vip_set(db: AsyncSession) -> Set[int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ telegram_id, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ efhc_core.user_vip_status.
    """
    q = await db.execute(
        text(f"SELECT telegram_id FROM {settings.DB_SCHEMA_CORE}.user_vip_status")
    )
    rows = q.fetchall()
    return {int(r[0]) for r in rows}

async def upsert_vip_status(db: AsyncSession, user_id: int, is_vip: bool) -> None:
    """
    –í—Å—Ç–∞–≤–ª—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç VIP-—Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
      ‚Ä¢ –ï—Å–ª–∏ is_vip=True ‚Äî upsert (–≤—Å—Ç–∞–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ last_checked).
      ‚Ä¢ –ï—Å–ª–∏ is_vip=False ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ user_vip_status.
    """
    if is_vip:
        await db.execute(
            text(f"""
                INSERT INTO {settings.DB_SCHEMA_CORE}.user_vip_status (telegram_id, since, last_checked, has_nft)
                VALUES (:tg, NOW(), NOW(), TRUE)
                ON CONFLICT (telegram_id)
                DO UPDATE SET last_checked=NOW(), has_nft=TRUE
            """),
            {"tg": user_id}
        )
    else:
        # –°–Ω–∏–º–∞–µ–º VIP: —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        await db.execute(
            text(f"DELETE FROM {settings.DB_SCHEMA_CORE}.user_vip_status WHERE telegram_id=:tg"),
            {"tg": user_id}
        )

async def check_wallet_has_nft(addresses: List[str]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è EFHC NFT —Å—Ä–µ–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –ø–æ –æ–¥–Ω–æ–º—É –∞–¥—Ä–µ—Å—É –µ—Å—Ç—å NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ EFHC.

    –û–∂–∏–¥–∞–Ω–∏–µ: –í –º–æ–¥—É–ª–µ nft_checker –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ NFT
    –∫–æ–ª–ª–µ–∫—Ü–∏–∏ EFHC. –ó–¥–µ—Å—å –¥–µ–ª–∞–µ–º –æ–±—ë—Ä—Ç–∫—É: –µ—Å–ª–∏ –µ—Å—Ç—å batch, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ ‚Äî –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.
    """
    if not addresses:
        return False

    # –ï—Å–ª–∏ –µ—Å—Ç—å –±–∞—Ç—á-—Ñ—É–Ω–∫—Ü–∏—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë (—ç–∫–æ–Ω–æ–º–∏—Ç –∑–∞–ø—Ä–æ—Å—ã)
    if nft_checker and hasattr(nft_checker, "batch_has_efhc_nft"):
        try:
            result_map: Dict[str, bool] = await nft_checker.batch_has_efhc_nft(addresses)
            return any(result_map.get(a, False) for a in addresses)
        except Exception as e:
            log.warning("batch_has_efhc_nft failed, fallback to single checks: %s", e)

    # –ò–Ω–∞—á–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—Ö–æ–¥
    if nft_checker and hasattr(nft_checker, "has_efhc_nft"):
        for addr in addresses:
            try:
                if await nft_checker.has_efhc_nft(addr):
                    return True
            except Exception as e:
                log.warning("has_efhc_nft error for %s: %s", addr, e)
    else:
        log.warning("nft_checker module is missing; assuming VIP=FALSE for all users")
    return False

async def run_nft_vip_check() -> None:
    """
    –ì–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ NFT ‚Üí VIP-—Å—Ç–∞—Ç—É—Å–æ–≤.
    –ê–ª–≥–æ—Ä–∏—Ç–º:
      1) –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ user_wallets.
      2) –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ EFHC NFT –Ω–∞ –ª—é–±–æ–º –∏–∑ –µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤.
      3) –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º —Å–ø–∏—Å–∫–æ–º user_vip_status:
           - –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω NFT (is_vip=True):
                 –≤—Å—Ç–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ user_vip_status (since ‚Äî –ø–µ—Ä–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞)
           - –ò–Ω–∞—á–µ: —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ user_vip_status (–µ—Å–ª–∏ –±—ã–ª–∞).
      4) last_checked –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ –º–µ—Ä–µ –∞–ø–¥–µ–π—Ç–∞.
    """
    log.info("[Scheduler] NFT/VIP check started")
    async with async_session_maker() as db:
        await ensure_scheduler_tables(db)

        wallets_map = await fetch_all_wallets(db)
        current_vip = await fetch_current_vip_set(db)

        cnt_true = 0
        cnt_false = 0
        processed = 0

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ (–µ—Å–ª–∏ –±–∞—Ç—á –≤ nft_checker –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
        user_ids = list(wallets_map.keys())
        # –ú–æ–∂–Ω–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ N –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é
        BATCH_SIZE = 200

        for i in range(0, len(user_ids), BATCH_SIZE):
            batch_ids = user_ids[i:i + BATCH_SIZE]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ
            for uid in batch_ids:
                addresses = wallets_map.get(uid, [])
                is_vip = await check_wallet_has_nft(addresses)
                if is_vip:
                    await upsert_vip_status(db, uid, True)
                    cnt_true += 1
                else:
                    # –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ –±—ã–ª VIP ‚Äî —É–±–∏—Ä–∞–µ–º
                    if uid in current_vip:
                        await upsert_vip_status(db, uid, False)
                    cnt_false += 1
                processed += 1

            # –ö–æ–º–º–∏—Ç –ø–∞–∫–µ—Ç–Ω–æ
            await db.commit()

        log.info("[Scheduler] NFT/VIP check done: processed=%d, vip=%d, non_vip=%d", processed, cnt_true, cnt_false)

# -----------------------------------------------------------------------------
# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è kWh –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–∞–Ω–µ–ª—è–º (00:30)
# -----------------------------------------------------------------------------
async def fetch_active_panels_count_per_user(db: AsyncSession) -> Dict[int, int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:
      { telegram_id: active_count }
    """
    q = await db.execute(
        text(f"""
            SELECT telegram_id, COUNT(*) AS cnt
            FROM {settings.DB_SCHEMA_CORE}.panels
            WHERE active = TRUE
            GROUP BY telegram_id
        """)
    )
    rows = q.fetchall()
    return {int(tg): int(cnt) for tg, cnt in rows}

async def fetch_vip_set(db: AsyncSession) -> Set[int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ telegram_id —Å –¥–µ–π—Å—Ç–≤—É—é—â–∏–º VIP (user_vip_status).
    """
    q = await db.execute(text(f"SELECT telegram_id FROM {settings.DB_SCHEMA_CORE}.user_vip_status"))
    rows = q.fetchall()
    return {int(r[0]) for r in rows}

async def log_kwh_generation(db: AsyncSession, user_id: int, accrual_date: date,
                             panels_count: int, is_vip: bool, amount_kwh: Decimal) -> bool:
    """
    –ü–∏—à–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª efhc_core.kwh_generation_log —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º (telegram_id, accrual_date).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å), False ‚Äî –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –±—ã–ª–∞ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å).
    """
    try:
        await db.execute(
            text(f"""
                INSERT INTO {settings.DB_SCHEMA_CORE}.kwh_generation_log
                    (telegram_id, accrual_date, panels_count, is_vip, amount_kwh, created_at)
                VALUES (:tg, :ad, :pc, :vip, :amt, NOW())
                ON CONFLICT (telegram_id, accrual_date) DO NOTHING
            """),
            {"tg": user_id, "ad": accrual_date, "pc": panels_count, "vip": is_vip, "amt": str(d3(amount_kwh))}
        )
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–∏–ª–æ—Å—å –ª–∏:
        q = await db.execute(
            text(f"""
                SELECT 1 FROM {settings.DB_SCHEMA_CORE}.kwh_generation_log
                WHERE telegram_id=:tg AND accrual_date=:ad
            """),
            {"tg": user_id, "ad": accrual_date}
        )
        row = q.first()
        return bool(row)
    except Exception as e:
        log.error("log_kwh_generation error for user=%s date=%s: %s", user_id, accrual_date, e)
        raise

async def add_kwh_to_balance(db: AsyncSession, user_id: int, amount_kwh: Decimal) -> None:
    """
    –ù–∞—á–∏—Å–ª—è–µ—Ç kWh –≤ balances:
      ‚Ä¢ kwh       += amount_kwh
      ‚Ä¢ kwh_total += amount_kwh (–Ω–µ—É–±—ã–≤–∞—é—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥-–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å)
    –°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    """
    await db.execute(
        text(f"""
            INSERT INTO {settings.DB_SCHEMA_CORE}.balances (telegram_id, efhc, bonus, kwh, kwh_total)
            VALUES (:tg, '0', '0', '0', '0')
            ON CONFLICT (telegram_id) DO NOTHING
        """),
        {"tg": user_id}
    )
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è (–∫–∞–∫ NUMERIC –≤ –ë–î, –Ω–æ —Ö—Ä–∞–Ω–∏–º –≤ TEXT –≤ ORM ‚Äî –∑–¥–µ—Å—å raw SQL)
    await db.execute(
        text(f"""
            UPDATE {settings.DB_SCHEMA_CORE}.balances
            SET
                kwh = (COALESCE(kwh,'0')::numeric + :amt)::text,
                kwh_total = (COALESCE(kwh_total,'0')::numeric + :amt)::text
            WHERE telegram_id = :tg
        """),
        {"tg": user_id, "amt": str(d3(amount_kwh))}
    )

async def run_daily_kwh_accrual(target_date: Optional[date] = None) -> None:
    """
    –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è kWh –≤ 00:30:
      1) –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–∞–Ω–µ–ª—è–º–∏.
      2) –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ VIP (–ø–æ user_vip_status).
      3) –°—á–∏—Ç–∞–µ—Ç amount_kwh = panels_count * (0.598 –∏–ª–∏ 0.640) –∏ –æ–∫—Ä—É–≥–ª—è–µ—Ç –≤–Ω–∏–∑ –¥–æ 0.001.
      4) –ò–¥—ë–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –≤ kwh_generation_log –Ω–∞ target_date –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º,
         –∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª—è–µ–º balances.kwh –∏ balances.kwh_total.
    –ü–∞—Ä–∞–º–µ—Ç—Ä target_date –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å (–¥–ª—è –∞–¥–º–∏–Ω–∞).
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞—á–∏—Å–ª—è–µ–º –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å (–µ—Å–ª–∏ —Ö–æ—Ç–∏–º –≤ 00:30 –Ω–∞—á–∏—Å–ª—è—Ç—å –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ —Å—É—Ç–∫–∏),
    –ª–∏–±–æ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å ‚Äî –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–π –ø–æ–ª–∏—Ç–∏–∫–∏. –ù–∏–∂–µ ‚Äî –Ω–∞—á–∏—Å–ª—è–µ–º –∑–∞ —Ç–µ–∫—É—â—É—é –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—É—é –¥–∞—Ç—É.
    """
    # –ü–æ —É—Å–ª–æ–≤–∏—é –Ω–∞—á–∏—Å–ª—è–µ–º –≤ 00:30 "–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–í—Ç"; —á–∞—â–µ –≤—Å–µ–≥–æ —Ç—Ä–∞–∫—Ç—É—é—Ç –∫–∞–∫ —Å—É—Ç–æ—á–Ω—É—é –≤—ã—Ä–∞–±–æ—Ç–∫—É –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—É—Ç–∫–∏.
    # –ß—Ç–æ–±—ã –±—ã—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º–∏, –º–æ–∂–Ω–æ –Ω–∞—á–∏—Å–ª—è—Ç—å –∑–∞ "–≤—á–µ—Ä–∞". –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–º–µ–Ω–∏—Ç–µ –Ω–∞ date.today().
    accrual_date = target_date or date.today()  # –∏–ª–∏ (date.today() - timedelta(days=1))

    log.info("[Scheduler] Daily kWh accrual started for date=%s", accrual_date)
    async with async_session_maker() as db:
        await ensure_scheduler_tables(db)

        # 1) –ö–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        panels_map = await fetch_active_panels_count_per_user(db)
        if not panels_map:
            log.info("[Scheduler] No active panels found, nothing to accrue.")
            return

        # 2) –°–µ—Ç VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        vip_set = await fetch_vip_set(db)

        processed = 0
        added   = 0
        total_amount = Decimal("0.000")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –±–∞—Ç—á–∞—Ö –Ω–∞ —Å–ª—É—á–∞–π –±–æ–ª—å—à–∏—Ö –æ–±—ä—ë–º–æ–≤
        user_ids = list(panels_map.keys())
        BATCH_SIZE = 500

        for i in range(0, len(user_ids), BATCH_SIZE):
            batch_ids = user_ids[i:i + BATCH_SIZE]
            for uid in batch_ids:
                cnt = panels_map.get(uid, 0)
                if cnt <= 0:
                    continue
                is_vip = uid in vip_set
                per_panel = VIP_KWH_PER_PANEL if is_vip else BASE_KWH_PER_PANEL
                amount = d3(per_panel * Decimal(cnt))

                # 3) –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
                try:
                    inserted = await log_kwh_generation(
                        db=db,
                        user_id=uid,
                        accrual_date=accrual_date,
                        panels_count=cnt,
                        is_vip=is_vip,
                        amount_kwh=amount,
                    )
                    if inserted:
                        # 4) –ù–∞—á–∏—Å–ª—è–µ–º –≤ –±–∞–ª–∞–Ω—Å
                        await add_kwh_to_balance(db, uid, amount)
                        added += 1
                        total_amount += amount
                except Exception as e:
                    await db.rollback()
                    log.error("Accrual failed for user=%s: %s", uid, e)
                    continue

                processed += 1

            # –ö–æ–º–º–∏—Ç–∏–º –±–∞—Ç—á
            await db.commit()

        log.info("[Scheduler] Daily kWh accrual done: users_processed=%d, new_accruals=%d, total_kwh=%s",
                 processed, added, str(d3(total_amount)))

# -----------------------------------------------------------------------------
# –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π –ø–æ —Å—Ä–æ–∫—É (00:15)
# -----------------------------------------------------------------------------
async def archive_expired_panels() -> None:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ (active=TRUE) –≤ –∞—Ä—Ö–∏–≤, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ >= 180 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ activated_at.
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç active=FALSE, archived_at=NOW().
    """
    log.info("[Scheduler] Archive expired panels started")
    async with async_session_maker() as db:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        try:
            await db.execute(
                text(f"""
                    UPDATE {settings.DB_SCHEMA_CORE}.panels
                    SET active = FALSE,
                        archived_at = NOW()
                    WHERE active = TRUE
                      AND activated_at < (NOW() - INTERVAL '{PANEL_LIFETIME_DAYS} days')
                      AND (archived_at IS NULL)
                """)
            )
            await db.commit()
        except Exception as e:
            await db.rollback()
            log.error("Archive panels failed: %s", e)
            return
    log.info("[Scheduler] Archive expired panels done")

# -----------------------------------------------------------------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ APScheduler
# -----------------------------------------------------------------------------
def setup_scheduler() -> AsyncIOScheduler:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç AsyncIOScheduler —Å –∫—Ä–æ–Ω-–∑–∞–¥–∞—á–∞–º–∏:
      ‚Ä¢ 00:00 ‚Äî NFT/VIP check
      ‚Ä¢ 00:15 ‚Äî Archive expired panels
      ‚Ä¢ 00:30 ‚Äî Daily kWh accrual
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π scheduler (–Ω–æ –ù–ï –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–≥–æ).
    """
    scheduler = AsyncIOScheduler(timezone="UTC")  # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ—é TZ
    # NFT-–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ 00:00
    scheduler.add_job(run_nft_vip_check, "cron", hour=0, minute=0, id="vip_nft_check")
    # –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π –≤ 00:15
    scheduler.add_job(archive_expired_panels, "cron", hour=0, minute=15, id="archive_panels")
    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ kWh –≤ 00:30
    scheduler.add_job(run_daily_kwh_accrual, "cron", hour=0, minute=30, id="kwh_accrual")
    return scheduler

# -----------------------------------------------------------------------------
# –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏/—Å–∫—Ä–∏–ø—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# -----------------------------------------------------------------------------
async def _debug_run_all_now() -> None:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏: –≤—ã–ø–æ–ª–Ω–∏—Ç –≤—Å–µ —Ç—Ä–∏ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.
    –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ–¥–µ, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.
    """
    await run_nft_vip_check()
    await archive_expired_panels()
    await run_daily_kwh_accrual()

# –ü—Ä–∏–º–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:
# if __name__ == "__main__":
#     import asyncio
#     asyncio.run(_debug_run_all_now())
#
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ (FastAPI) –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
#   from .scheduler import setup_scheduler
#   scheduler = setup_scheduler()
#   scheduler.start()
# –∏ –≤—ã–∑—ã–≤–∞–π—Ç–µ —ç—Ç–æ –≤ —Å–æ–±—ã—Ç–∏–∏ on_startup –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
# -----------------------------------------------------------------------------
