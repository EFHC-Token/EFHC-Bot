# üìÇ backend/app/schemas.py ‚Äî Pydantic-—Å—Ö–µ–º—ã –¥–ª—è API EFHC
# --------------------------------------------------------
# –í—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã API (FastAPI):
# - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–∞–Ω–µ–ª–∏, –∑–∞–¥–∞–Ω–∏—è, –ª–æ—Ç–µ—Ä–µ–∏, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, NFT-–¥–æ—Å—Ç—É–ø
# - –í—Ö–æ–¥–Ω—ã–µ payload‚Äô—ã (—Å–æ–∑–¥–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–∫—É–ø–∫–∞, –≤—ã–≤–æ–¥)
# - –û—Ç–≤–µ—Ç—ã –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞, –±–æ—Ç–∞ –∏ –∞–¥–º–∏–Ω–∫–∏

from __future__ import annotations
from pydantic import BaseModel, Field
from typing import Optional, List
from decimal import Decimal
from datetime import datetime


# ======================
# ‚öñÔ∏è –ë–∞–ª–∞–Ω—Å—ã
# ======================
class Balance(BaseModel):
    main_balance: Decimal = Field(..., description="–û—Å–Ω–æ–≤–Ω–æ–π EFHC")
    bonus_balance: Decimal = Field(..., description="–ë–æ–Ω—É—Å–Ω—ã–µ EFHC")
    kwh_balance: Decimal = Field(..., description="–≠–Ω–µ—Ä–≥–∏—è –∫–í—Ç")
    total_generated_kwh: Decimal = Field(..., description="–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è")


# ======================
# üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
# ======================
class UserBase(BaseModel):
    telegram_id: str
    username: Optional[str] = None
    ton_wallet: Optional[str] = None


class UserCreate(UserBase):
    pass


class UserUpdate(BaseModel):
    username: Optional[str] = None
    ton_wallet: Optional[str] = None


class UserResponse(UserBase):
    id: int
    created_at: datetime
    is_vip: bool = False
    vip_checked_at: Optional[datetime] = None
    referral_code: Optional[str]
    invited_by: Optional[int]
    current_level: int = 1
    is_admin: bool = False

    balance_main: Decimal
    balance_bonus: Decimal
    balance_kwt: Decimal
    total_kwt_generated: Decimal

    class Config:
        orm_mode = True


class UserPublic(BaseModel):
    id: int
    telegram_id: int
    username: Optional[str]
    is_vip: bool = False
    language: Optional[str] = "RU"
    balance: Balance


# ======================
# üîã –ü–∞–Ω–µ–ª–∏
# ======================
class PanelBase(BaseModel):
    daily_generation: Decimal = Decimal("0.598")
    expires_at: datetime


class PanelCreate(PanelBase):
    pass


class PanelResponse(PanelBase):
    id: int
    user_id: int
    created_at: datetime
    is_active: bool

    class Config:
        orm_mode = True


class PanelOut(BaseModel):
    id: int
    purchase_date: str
    lifespan_days: int
    daily_generation: Decimal
    active: bool


# ======================
# üë• –†–µ—Ñ–µ—Ä–∞–ª—ã
# ======================
class ReferralStats(BaseModel):
    direct_count: int = 0
    active_direct_count: int = 0
    bonuses_total_efhc: Decimal = Decimal("0.000")


class ReferralBonusBase(BaseModel):
    user_id: int
    invited_user_id: int
    amount: Decimal


class ReferralBonusResponse(ReferralBonusBase):
    id: int
    created_at: datetime

    class Config:
        orm_mode = True


# ======================
# üí∏ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ EFHC
# ======================
class TransactionBase(BaseModel):
    amount: Decimal
    type: str
    comment: Optional[str] = None


class TransactionCreate(TransactionBase):
    user_id: int


class TransactionResponse(TransactionBase):
    id: int
    user_id: int
    created_at: datetime

    class Config:
        orm_mode = True


# ======================
# üìå –ó–∞–¥–∞–Ω–∏—è
# ======================
class TaskBase(BaseModel):
    title: str
    reward: Decimal
    link: Optional[str] = None
    is_active: bool = True


class TaskCreate(TaskBase):
    available: int = Field(..., ge=1)


class TaskResponse(TaskBase):
    id: int
    created_at: datetime

    class Config:
        orm_mode = True


class TaskOut(BaseModel):
    id: int
    type: str
    title: str
    url: Optional[str]
    available_left: int
    reward_bonus_efhc: Decimal
    is_active: bool


class TaskCompleteRequest(BaseModel):
    task_id: int
    proof: Optional[str] = Field(None, description="–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ (—Å–∫—Ä–∏–Ω/—Ö–µ—à/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)")


class UserTaskBase(BaseModel):
    user_id: int
    task_id: int
    status: str = "pending"


class UserTaskResponse(UserTaskBase):
    id: int
    completed_at: Optional[datetime] = None

    class Config:
        orm_mode = True


# ======================
# üé≤ –õ–æ—Ç–µ—Ä–µ–∏
# ======================
class LotteryBase(BaseModel):
    title: str
    required_tickets: int
    reward_type: str
    is_active: bool = True


class LotteryCreate(LotteryBase):
    pass


class LotteryResponse(LotteryBase):
    id: int
    created_at: datetime
    winner_id: Optional[int] = None

    class Config:
        orm_mode = True


class LotteryOut(BaseModel):
    id: int
    code: str
    title: str
    is_active: bool
    target_participants: int
    current_participants: int
    prize_type: str
    winner_user_id: Optional[int]


class LotteryTicketBase(BaseModel):
    user_id: int
    lottery_id: int


class LotteryTicketResponse(LotteryTicketBase):
    id: int
    ticket_number: int

    class Config:
        orm_mode = True


class TicketPurchaseRequest(BaseModel):
    lottery_id: int
    tickets: int = Field(..., ge=1, le=10)


# ======================
# üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
# ======================
class AchievementLogBase(BaseModel):
    user_id: int
    level: int


class AchievementLogResponse(AchievementLogBase):
    id: int
    achieved_at: datetime

    class Config:
        orm_mode = True


# ======================
# üõí –ú–∞–≥–∞–∑–∏–Ω
# ======================
class ShopItemOut(BaseModel):
    id: int
    code: str
    label: str
    pay_asset: str
    price: Decimal
    is_active: bool


# ======================
# ‚ÜîÔ∏è –û–±–º–µ–Ω –∏ –≤—ã–≤–æ–¥
# ======================
class ExchangeRequest(BaseModel):
    kwh_amount: Decimal = Field(..., gt=Decimal("0.000"))


class PanelBuyResponse(BaseModel):
    success: bool
    panel_id: Optional[int]
    charged_bonus: Decimal = Decimal("0.000")
    charged_main: Decimal = Decimal("0.000")
    balances_after: Balance


class WithdrawRequestIn(BaseModel):
    amount_efhc: Decimal = Field(..., gt=Decimal("0.000"))
    to_wallet: str


# ======================
# üîë –ê–¥–º–∏–Ω–∫–∞
# ======================
class ToggleIn(BaseModel):
    id: int
    active: bool


class AdminVipConfirmIn(BaseModel):
    request_id: int
    tx: Optional[str] = None


class AdminNFTBase(BaseModel):
    nft_address: str
    can_tasks: bool = False
    can_shop: bool = False
    can_lottery: bool = False
    can_all: bool = False


class AdminNFTCreate(AdminNFTBase):
    pass


class AdminNFTResponse(AdminNFTBase):
    id: int

    class Config:
        orm_mode = True
