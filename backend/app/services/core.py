# üìÇ backend/app/services/core.py ‚Äî –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ EFHC Bot
# =============================================================================
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
#   –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ —Å—É—â–Ω–æ—Å—Ç—è–º–∏:
#     ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–æ—Ñ–∏–ª–∏)
#     ‚Ä¢ –ë–∞–ª–∞–Ω—Å—ã (EFHC / –±–æ–Ω—É—Å—ã / kWh)
#     ‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –ø–∞–Ω–µ–ª–µ–π (100 EFHC, —Ä–∞–∑–¥–µ–ª—å–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –±–æ–Ω—É—Å‚Üí–æ—Å–Ω–æ–≤–Ω–æ–π)
#     ‚Ä¢ –û–±–º–µ–Ω–Ω–∏–∫ (kWh ‚Üí EFHC 1:1)
#     ‚Ä¢ –†–æ–∑—ã–≥—Ä—ã—à–∏ (—Å–ø–∏—Å–æ–∫, –ø–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤)
#     ‚Ä¢ –ó–∞–¥–∞–Ω–∏—è (—Å–ø–∏—Å–æ–∫, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤)
#     ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω-–ø—Ä–∞–≤ (–±–∞–∑–æ–≤–æ –ø–æ ADMIN_TELEGRAM_ID + —Ç–æ—á–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø–æ–¥ NFT)
#
# –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
#   –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ FastAPI-—Ä–æ—É—Ç–µ—Ä–æ–≤ (user_routes.py/admin_routes.py) –∏/–∏–ª–∏ –∏–∑ Telegram-–±–æ—Ç–∞.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
#   ‚Ä¢ –í—Å–µ –¥–µ–Ω–µ–∂–Ω—ã–µ –≤–µ–ª–∏—á–∏–Ω—ã ‚Äî Decimal (NUMERIC). –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–æ–∫—Ä—É–≥–ª–µ–Ω–∏—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ quantize().
#   ‚Ä¢ –°—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å VIP = 1.07 (—Å–º. config.py), –ª–æ–≥–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –≤ scheduler.py.
#   ‚Ä¢ –õ–æ—Ç–µ—Ä–µ–∏/–ó–∞–¥–∞–Ω–∏—è –∏–º–µ—é—Ç "–ª–µ–Ω–∏–≤—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é" ‚Äî –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã–µ, —Å–æ–∑–¥–∞—ë–º –¥–µ—Ñ–æ–ª—Ç—ã –∏–∑ settings.
# =============================================================================

from __future__ import annotations

from datetime import datetime, timedelta, date
from decimal import Decimal, ROUND_DOWN
from typing import Optional, List, Dict, Tuple

from sqlalchemy import select, func, and_
from sqlalchemy.ext.asyncio import AsyncSession

from ..config import get_settings
from ..models import (
    User,
    Balance,
    Panel,
    UserVIP,
    DailyGenerationLog,
    AdminNFTWhitelist,
    Referral,
    LotteryRound,
    LotteryTicket,
    Task,
    TaskUserProgress,
)

settings = get_settings()

# –£–¥–æ–±–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
PANEL_PRICE = Decimal(f"{settings.PANEL_PRICE_EFHC:.3f}")          # 100.000 EFHC
EFHC_Q = Decimal("0." + "0"*(settings.EFHC_DECIMALS-1) + "1")      # —à–∞–≥ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è EFHC (–Ω–∞–ø—Ä. 0.001)
KWH_Q  = Decimal("0." + "0"*(settings.KWH_DECIMALS-1) + "1")       # —à–∞–≥ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è kWh  (–Ω–∞–ø—Ä. 0.001)


# =============================================================================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
# =============================================================================

def fmt_e(d: Decimal) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç Decimal –≤ —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é EFHC_DECIMALS (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 –∑–Ω–∞–∫–∞).
    """
    return str(d.quantize(EFHC_Q, rounding=ROUND_DOWN))


def fmt_k(d: Decimal) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç Decimal –≤ —Å—Ç—Ä–æ–∫—É —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é KWH_DECIMALS (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 –∑–Ω–∞–∫–∞).
    """
    return str(d.quantize(KWH_Q, rounding=ROUND_DOWN))


# =============================================================================
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ / —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è / –±–∞–ª–∞–Ω—Å
# =============================================================================

async def get_or_create_user(db: AsyncSession, telegram_id: int, username: Optional[str] = None) -> User:
    """
    –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
      ‚Ä¢ —Å–æ–∑–¥–∞—ë—Ç User –∏ Balance, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç,
      ‚Ä¢ –æ–±–Ω–æ–≤–ª—è–µ—Ç username, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç User.
    """
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
    res = await db.execute(select(User).where(User.telegram_id == telegram_id))
    user = res.scalar_one_or_none()

    if user is None:
        # –°–æ–∑–¥–∞—ë–º User –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–π Balance
        user = User(telegram_id=telegram_id, username=username or None, lang=settings.DEFAULT_LANG)
        balance = Balance(telegram_id=telegram_id)
        db.add(user)
        db.add(balance)
        await db.flush()  # –ø–æ–ª—É—á–∞–µ–º id –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤
    else:
        # –û–±–Ω–æ–≤–∏–º username –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        new_username = (username or "").strip() or None
        if new_username != user.username:
            user.username = new_username
            await db.flush()

    return user


async def get_balance(db: AsyncSession, telegram_id: int) -> Dict[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è —Å—Ç—Ä–æ–∫ (–¥–ª—è UI):
      {
        "efhc":  "100.000",
        "bonus": "10.000",
        "kwh":   "5.000"
      }
    """
    res = await db.execute(select(Balance).where(Balance.telegram_id == telegram_id))
    bal = res.scalar_one_or_none()
    if bal is None:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω —Ä–∞–Ω–µ–µ)
        bal = Balance(telegram_id=telegram_id)
        db.add(bal)
        await db.flush()

    return {
        "efhc":  fmt_e(Decimal(bal.efhc or 0)),
        "bonus": fmt_e(Decimal(bal.bonus or 0)),
        "kwh":   fmt_k(Decimal(bal.kwh or 0)),
    }


# =============================================================================
# –ü–∞–Ω–µ–ª–∏ / –ü–æ–∫—É–ø–∫–∞ / –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞–Ω–µ–ª–∏
# =============================================================================

async def get_active_panels_count(db: AsyncSession, telegram_id: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
      ‚Ä¢ "–ê–∫—Ç–∏–≤–Ω–∞—è" = expires_at is NULL (–±–µ—Å—Å—Ä–æ—á–Ω–æ) –ò–õ–ò expires_at > now().
    """
    now = datetime.utcnow()
    res = await db.execute(
        select(func.coalesce(func.sum(Panel.count), 0))
        .where(
            and_(
                Panel.telegram_id == telegram_id,
                # expires_at –º–æ–∂–µ—Ç –±—ã—Ç—å NULL (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å—á–∏—Ç–∞–µ–º —Ç–∞–∫–∏–µ –ø–∞–Ω–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏)
                or_(Panel.expires_at.is_(None), Panel.expires_at > now)
            )
        )
    )
    total = res.scalar_one()
    return int(total or 0)


async def purchase_panel(db: AsyncSession, telegram_id: int) -> Dict[str, str]:
    """
    –ü–æ–∫—É–ø–∫–∞ –û–î–ù–û–ô –ø–∞–Ω–µ–ª–∏ –∑–∞ 100 EFHC —Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∞–Ω–∏–µ–º:
      ‚Ä¢ –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Ö–æ–¥—É—é—Ç—Å—è –±–æ–Ω—É—Å–Ω—ã–µ EFHC,
      ‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ ‚Äî –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞.
    –ü—Ä–æ–≤–µ—Ä–∫–∏:
      ‚Ä¢ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ (bonus + efhc >= 100)
      ‚Ä¢ –ù–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π (MAX_ACTIVE_PANELS_PER_USER)

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      {
        "bonus_used": "X.XXX",
        "main_used":  "Y.YYY"
      }
    """
    # –ü–æ–ª—É—á–∏–º –±–∞–ª–∞–Ω—Å
    res = await db.execute(select(Balance).where(Balance.telegram_id == telegram_id))
    bal = res.scalar_one_or_none()
    if bal is None:
        raise RuntimeError("–ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ /start.")

    # –ü—Ä–æ–≤–µ—Ä–∏–º –ª–∏–º–∏—Ç –ø–∞–Ω–µ–ª–µ–π
    now = datetime.utcnow()
    res_panels = await db.execute(
        select(func.coalesce(func.sum(Panel.count), 0)).where(
            and_(
                Panel.telegram_id == telegram_id,
                or_(Panel.expires_at.is_(None), Panel.expires_at > now)
            )
        )
    )
    active_count = int(res_panels.scalar_one() or 0)
    if active_count + 1 > settings.MAX_ACTIVE_PANELS_PER_USER:
        raise RuntimeError(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π: {settings.MAX_ACTIVE_PANELS_PER_USER}")

    # –°–∫–æ–ª—å–∫–æ —Å–ø–∏—Å–∞—Ç—å –±–æ–Ω—É—Å–æ–≤
    bonus_avail = Decimal(bal.bonus or 0)
    efhc_avail  = Decimal(bal.efhc or 0)

    total_avail = bonus_avail + efhc_avail
    if total_avail < PANEL_PRICE:
        raise RuntimeError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ EFHC: —Ç—Ä–µ–±—É–µ—Ç—Å—è {fmt_e(PANEL_PRICE)}, –¥–æ—Å—Ç—É–ø–Ω–æ {fmt_e(total_avail)}")

    bonus_used = min(PANEL_PRICE, bonus_avail)
    main_needed = (PANEL_PRICE - bonus_used)
    main_used  = min(main_needed, efhc_avail)

    # –†–µ–∑–µ—Ä–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º (–Ω–µ –¥–æ–ª–∂–Ω–æ —Å–ª—É—á–∏—Ç—å—Å—è)
    if bonus_used + main_used < PANEL_PRICE:
        raise RuntimeError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ EFHC –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–∞–Ω–µ–ª–∏.")

    # –°–ø–∏—Å—ã–≤–∞–µ–º
    bal.bonus = (bonus_avail - bonus_used).quantize(EFHC_Q, rounding=ROUND_DOWN)
    bal.efhc  = (efhc_avail - main_used).quantize(EFHC_Q, rounding=ROUND_DOWN)

    # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ –ø–∞–Ω–µ–ª–∏
    expires = now + timedelta(days=settings.PANEL_LIFESPAN_DAYS)
    p = Panel(telegram_id=telegram_id, count=1, purchased_at=now, expires_at=expires)
    db.add(p)

    await db.flush()

    return {
        "bonus_used": fmt_e(bonus_used),
        "main_used":  fmt_e(main_used),
    }


# =============================================================================
# –û–±–º–µ–Ω–Ω–∏–∫: kWh ‚Üí EFHC (1:1)
# =============================================================================

async def exchange_kwh_to_efhc(db: AsyncSession, telegram_id: int, amount_kwh: Decimal) -> Dict[str, str]:
    """
    –û–±–º–µ–Ω kWh –Ω–∞ EFHC –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∫—É—Ä—Å—É 1:1, —É—á–∏—Ç—ã–≤–∞—è –º–∏–Ω–∏–º—É–º EXCHANGE_MIN_KWH.
    –ú—É—Ç–∏—Ä—É–µ—Ç –±–∞–ª–∞–Ω—Å:
      ‚Ä¢ kWh —É–º–µ–Ω—å—à–∞—é—Ç—Å—è,
      ‚Ä¢ efhc —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Ç—É –∂–µ –≤–µ–ª–∏—á–∏–Ω—É.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      {
        "exchanged": "X.XXX",
        "efhc":      "new_efhc_balance",
        "kwh":       "new_kwh_balance"
      }
    """
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º amount_kwh
    if amount_kwh is None:
        raise RuntimeError("–ù–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ kWh –¥–ª—è –æ–±–º–µ–Ω–∞.")
    try:
        amt = Decimal(str(amount_kwh)).quantize(KWH_Q, rounding=ROUND_DOWN)
    except Exception:
        raise RuntimeError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã kWh.")

    if amt <= Decimal("0"):
        raise RuntimeError("–°—É–º–º–∞ –æ–±–º–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0.")
    if amt < Decimal(str(settings.EXCHANGE_MIN_KWH)):
        raise RuntimeError(f"–ú–∏–Ω–∏–º—É–º –¥–ª—è –æ–±–º–µ–Ω–∞ ‚Äî {fmt_k(Decimal(str(settings.EXCHANGE_MIN_KWH)))} kWh.")

    # –ë–∞–ª–∞–Ω—Å
    res = await db.execute(select(Balance).where(Balance.telegram_id == telegram_id))
    bal = res.scalar_one_or_none()
    if bal is None:
        raise RuntimeError("–ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    kwh_avail = Decimal(bal.kwh or 0).quantize(KWH_Q, rounding=ROUND_DOWN)
    if amt > kwh_avail:
        raise RuntimeError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ kWh: –¥–æ—Å—Ç—É–ø–Ω–æ {fmt_k(kwh_avail)}.")

    # –†–∞–≤–Ω—ã–π –æ–±–º–µ–Ω 1:1 ‚Üí EFHC
    efhc_new = (Decimal(bal.efhc or 0) + amt).quantize(EFHC_Q, rounding=ROUND_DOWN)
    kwh_new  = (kwh_avail - amt).quantize(KWH_Q, rounding=ROUND_DOWN)

    bal.efhc = efhc_new
    bal.kwh  = kwh_new

    await db.flush()

    return {
        "exchanged": fmt_k(amt),
        "efhc":      fmt_e(efhc_new),
        "kwh":       fmt_k(kwh_new),
    }


# =============================================================================
# –†–æ–∑—ã–≥—Ä—ã—à–∏ (–õ–û–¢–ï–†–ï–ò) ‚Äî —Å–ø–∏—Å–æ–∫ –∏ –ø–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤
# =============================================================================

async def _ensure_default_lotteries(db: AsyncSession) -> None:
    """
    –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —Å–æ–∑–¥–∞—ë–º –¥–µ—Ñ–æ–ª—Ç—ã –∏–∑ settings.LOTTERY_DEFAULTS.
    """
    res = await db.execute(select(func.count(LotteryRound.id)))
    cnt = int(res.scalar_one() or 0)
    if cnt > 0:
        return

    for l in settings.LOTTERY_DEFAULTS:
        obj = LotteryRound(
            title=l.get("title") or "–†–æ–∑—ã–≥—Ä—ã—à",
            prize_type=l.get("prize_type") or "PANEL",
            target_participants=int(l.get("target_participants") or 0),
            finished=False,
        )
        db.add(obj)
    await db.flush()


async def list_lotteries(db: AsyncSession) -> List[Dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π (finished=False) –≤ –≤–∏–¥–µ DTO –¥–ª—è UI.
    –ü—Ä–∏–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞:
      {
         "id": 1,
         "title": "NFT VIP",
         "target": 500,
         "tickets_sold": 123
      }
    """
    await _ensure_default_lotteries(db)

    # –í—ã–±–µ—Ä–µ–º –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
    res = await db.execute(select(LotteryRound).where(LotteryRound.finished.is_(False)).order_by(LotteryRound.id.asc()))
    rounds = res.scalars().all()

    items: List[Dict] = []
    for r in rounds:
        # –ü–æ—Å—á–∏—Ç–∞–µ–º —á–∏—Å–ª–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤
        res_count = await db.execute(select(func.count(LotteryTicket.id)).where(LotteryTicket.lottery_id == r.id))
        sold = int(res_count.scalar_one() or 0)
        items.append({
            "id": r.id,
            "title": r.title,
            "target": r.target_participants,
            "tickets_sold": sold,
            "prize_type": r.prize_type,
        })
    return items


async def buy_lottery_tickets(db: AsyncSession, telegram_id: int, lottery_id: int, count: int) -> Dict[str, str]:
    """
    –ü–æ–∫—É–ø–∫–∞ N –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:
      ‚Ä¢ –¶–µ–Ω–∞ 1 –±–∏–ª–µ—Ç–∞ = settings.LOTTERY_TICKET_PRICE_EFHC (–≤ EFHC).
      ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: max settings.LOTTERY_MAX_TICKETS_PER_USER –∑–∞ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é.
      ‚Ä¢ –°–ø–∏—Å–∞–Ω–∏–µ EFHC —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞.
    """
    if not settings.LOTTERY_ENABLED:
        raise RuntimeError("–†–æ–∑—ã–≥—Ä—ã—à–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

    if count <= 0:
        raise RuntimeError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0.")
    if count > settings.LOTTERY_MAX_TICKETS_PER_USER:
        raise RuntimeError(f"–ó–∞ –æ–¥–∏–Ω —Ä–∞–∑ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –º–∞–∫—Å–∏–º—É–º {settings.LOTTERY_MAX_TICKETS_PER_USER} –±–∏–ª–µ—Ç–æ–≤.")

    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–æ–∑—ã–≥—Ä—ã—à
    res = await db.execute(select(LotteryRound).where(LotteryRound.id == lottery_id, LotteryRound.finished.is_(False)))
    round_ = res.scalar_one_or_none()
    if round_ is None:
        raise RuntimeError("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.")

    # –ë–∞–ª–∞–Ω—Å
    resb = await db.execute(select(Balance).where(Balance.telegram_id == telegram_id))
    bal = resb.scalar_one_or_none()
    if bal is None:
        raise RuntimeError("–ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    price_per_ticket = Decimal(str(settings.LOTTERY_TICKET_PRICE_EFHC)).quantize(EFHC_Q, rounding=ROUND_DOWN)
    total_price      = (price_per_ticket * Decimal(count)).quantize(EFHC_Q, rounding=ROUND_DOWN)

    efhc_avail = Decimal(bal.efhc or 0)
    if efhc_avail < total_price:
        raise RuntimeError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ EFHC: —Ç—Ä–µ–±—É–µ—Ç—Å—è {fmt_e(total_price)}, –¥–æ—Å—Ç—É–ø–Ω–æ {fmt_e(efhc_avail)}.")

    # –°–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤
    bal.efhc = (efhc_avail - total_price).quantize(EFHC_Q, rounding=ROUND_DOWN)
    for _ in range(count):
        db.add(LotteryTicket(lottery_id=lottery_id, telegram_id=telegram_id, purchased_at=datetime.utcnow()))

    await db.flush()

    return {
        "tickets_bought": str(count),
        "paid_efhc": fmt_e(total_price),
        "efhc_left": fmt_e(Decimal(bal.efhc or 0)),
    }


# =============================================================================
# –ó–∞–¥–∞–Ω–∏—è ‚Äî —Å–ø–∏—Å–æ–∫ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
# =============================================================================

async def _ensure_default_tasks(db: AsyncSession) -> None:
    """
    –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á: –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã—Ö.
    –ë–µ—Ä—ë–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∏–∑ settings (TASK_REWARD_BONUS_EFHC_DEFAULT).
    """
    res = await db.execute(select(func.count(Task.id)))
    cnt = int(res.scalar_one() or 0)
    if cnt > 0:
        return

    # –ü—Ä–∏–º–µ—Ä—ã –±–∞–∑–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π; UI –º–æ–∂–µ—Ç –∏—Ö –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –∞–¥–º–∏–Ω–∫–∏
    defaults = [
        {"code": "JOIN_CHANNEL", "title": "–í—Å—Ç—É–ø–∏—Ç—å –≤ Telegram-–∫–∞–Ω–∞–ª"},
        {"code": "FOLLOW_TWITTER", "title": "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ X (Twitter)"},
        {"code": "SHARE_LINK", "title": "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π"},
    ]
    reward = Decimal(str(settings.TASK_REWARD_BONUS_EFHC_DEFAULT))
    for d in defaults:
        db.add(Task(
            code=d["code"],
            title=d["title"],
            reward_bonus_efhc=reward,
            price_usd=Decimal(str(settings.TASK_PRICE_USD_DEFAULT))
        ))
    await db.flush()


async def list_tasks(db: AsyncSession, telegram_id: int) -> List[Dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –∏ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–∞–∂–¥–æ–º—É.
    DTO:
      {
        "id": 1,
        "code": "JOIN_CHANNEL",
        "title": "–í—Å—Ç—É–ø–∏—Ç—å...",
        "reward": "1.000",
        "completed": true/false,
        "status": "pending/completed/verified" (–µ—Å–ª–∏ –µ—Å—Ç—å)
      }
    """
    await _ensure_default_tasks(db)

    # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
    res = await db.execute(select(Task).order_by(Task.id.asc()))
    tasks = res.scalars().all()

    # –î–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è ‚Äî –≤—ã–±–µ—Ä–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤—Å–µ–º task_id —Å—Ä–∞–∑—É
    task_ids = [t.id for t in tasks]
    progress_map: Dict[int, TaskUserProgress] = {}
    if task_ids:
        res2 = await db.execute(
            select(TaskUserProgress).where(
                TaskUserProgress.telegram_id == telegram_id,
                TaskUserProgress.task_id.in_(task_ids),
            )
        )
        for p in res2.scalars().all():
            progress_map[p.task_id] = p

    items: List[Dict] = []
    for t in tasks:
        p = progress_map.get(t.id)
        status = p.status if p else "pending"
        completed = status in ("completed", "verified")
        items.append({
            "id": t.id,
            "code": t.code,
            "title": t.title,
            "reward": fmt_e(Decimal(t.reward_bonus_efhc or 0)),
            "completed": completed,
            "status": status,
        })
    return items


async def complete_task(db: AsyncSession, telegram_id: int, task_id: int) -> Dict[str, str]:
    """
    –ü–æ–º–µ—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å–Ω—ã–µ EFHC (–µ—Å–ª–∏ —Ä–∞–Ω—å—à–µ –Ω–µ –Ω–∞—á–∏—Å–ª—è–ª–∏):
      ‚Ä¢ status: pending ‚Üí completed ‚Üí verified (–≤ —ç—Ç–æ–π —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å—Ä–∞–∑—É verified).
      ‚Ä¢ –ë–∞–ª–∞–Ω—Å: bonus += reward_bonus_efhc.
    """
    # –ù–∞–π–¥—ë–º –∑–∞–¥–∞–Ω–∏–µ
    res = await db.execute(select(Task).where(Task.id == task_id))
    task = res.scalar_one_or_none()
    if task is None:
        raise RuntimeError("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∑–∞–¥–∞–Ω–∏—é
    res2 = await db.execute(select(TaskUserProgress).where(
        TaskUserProgress.task_id == task_id,
        TaskUserProgress.telegram_id == telegram_id
    ))
    prog = res2.scalar_one_or_none()

    # –ë–∞–ª–∞–Ω—Å
    resb = await db.execute(select(Balance).where(Balance.telegram_id == telegram_id))
    bal = resb.scalar_one_or_none()
    if bal is None:
        raise RuntimeError("–ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –ï—Å–ª–∏ —É–∂–µ verified ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ–º
    if prog and prog.status == "verified":
        return {
            "status": "already_verified",
            "reward": fmt_e(Decimal(task.reward_bonus_efhc or 0)),
            "bonus": fmt_e(Decimal(bal.bonus or 0)),
        }

    # –û–±–Ω–æ–≤–ª—è–µ–º/—Å—Ç–∞–≤–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ verified
    if prog is None:
        prog = TaskUserProgress(
            task_id=task_id,
            telegram_id=telegram_id,
            status="verified",
            updated_at=datetime.utcnow(),
        )
        db.add(prog)
    else:
        prog.status = "verified"
        prog.updated_at = datetime.utcnow()

    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
    reward = Decimal(task.reward_bonus_efhc or 0)
    new_bonus = (Decimal(bal.bonus or 0) + reward).quantize(EFHC_Q, rounding=ROUND_DOWN)
    bal.bonus = new_bonus

    await db.flush()

    return {
        "status": "verified",
        "reward": fmt_e(reward),
        "bonus": fmt_e(new_bonus),
    }


# =============================================================================
# –ê–¥–º–∏–Ω-–ø—Ä–æ–≤–µ—Ä–∫–∞ (whoami) ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–æ —Ä–∞–±–æ—á–∞—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è
# =============================================================================

async def is_admin(db: AsyncSession, telegram_id: int) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–∞–≤–æ –Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.

    –¢–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è, –Ω–æ —Ä–∞–±–æ—á–∞—è):
      ‚Ä¢ –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω: settings.ADMIN_TELEGRAM_ID
      ‚Ä¢ (–¢–æ—á–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è) NFT-–ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ TonAPI:
           - –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –∞–¥—Ä–µ—Å TON-–∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ
             NFT –∏–∑ whitelist (AdminNFTWhitelist) –∏–ª–∏ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ VIP_NFT_COLLECTION.
        –í —ç—Ç–æ–º MVP –º—ã –ù–ï –∏–º–µ–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –∫–æ—à–µ–ª—å–∫–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø–æ—ç—Ç–æ–º—É
        –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ ADMIN_TELEGRAM_ID.
    """
    if telegram_id == settings.ADMIN_TELEGRAM_ID:
        return True

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å: –µ—Å–ª–∏ –≤—ã –¥–æ–±–∞–≤–∏—Ç–µ –º–æ–¥–µ–ª—å –ø—Ä–∏–≤—è–∑–∫–∏ user <-> ton_wallet,
    # —Ç–æ:
    #   1) –ü–æ–ª—É—á–∏—Ç—å wallet –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    #   2) –ß–µ—Ä–µ–∑ TonAPI –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫–∏–µ NFT —É –Ω–µ–≥–æ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ
    #   3) –ï—Å–ª–∏ —Å—Ä–µ–¥–∏ –Ω–∏—Ö –µ—Å—Ç—å –ª—é–±–æ–π –∏–∑ AdminNFTWhitelist.nft_address, –≤–µ—Ä–Ω—É—Ç—å True
    #
    # –ü—Ä–∏–º–µ—Ä (–ø—Å–µ–≤–¥–æ):
    # user_wallet = await get_user_wallet(db, telegram_id)
    # nft_addresses = await fetch_user_nfts_from_tonapi(user_wallet)
    # whitelisted = await fetch_whitelist(db) -> set([...])
    # if whitelisted ‚à© nft_addresses != ‚àÖ:
    #     return True

    return False


# =============================================================================
# VIP: –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ / –ø—Ä–æ–≤–µ—Ä–∫–∞
# =============================================================================

async def grant_vip(db: AsyncSession, telegram_id: int, nft_address: Optional[str] = None) -> Dict[str, str]:
    """
    –í—ã–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é VIP-—Å—Ç–∞—Ç—É—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ —Å memo ¬´VIP NFT¬ª).
    –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    """
    res = await db.execute(select(UserVIP).where(UserVIP.telegram_id == telegram_id))
    vip = res.scalar_one_or_none()
    if vip:
        return {"status": "already_vip", "telegram_id": str(telegram_id)}

    vip = UserVIP(telegram_id=telegram_id, nft_address=nft_address or None, activated_at=datetime.utcnow())
    db.add(vip)
    await db.flush()
    return {"status": "granted", "telegram_id": str(telegram_id)}


async def has_vip(db: AsyncSession, telegram_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ VIP —Å—Ç–∞—Ç—É—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    res = await db.execute(select(UserVIP).where(UserVIP.telegram_id == telegram_id))
    return res.scalar_one_or_none() is not None


# =============================================================================
# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è ‚Äî –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è scheduler.py
# =============================================================================

async def get_users_for_daily_run(db: AsyncSession) -> List[int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ö2 —Å–º—ã—Å–ª–∞ —Å—á–∏—Ç–∞—Ç—å:
      ‚Ä¢ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ (expires_at > now)
    (–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –º–æ–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, —É –∫–æ–≥–æ —Å—É–º–º–∞—Ä–Ω–æ–µ —á–∏—Å–ª–æ –ø–∞–Ω–µ–ª–µ–π > 0)
    """
    now = datetime.utcnow()
    res = await db.execute(
        select(Panel.telegram_id)
        .where(
            or_(Panel.expires_at.is_(None), Panel.expires_at > now)
        )
        .group_by(Panel.telegram_id)
    )
    ids = [r[0] for r in res.all()]
    return ids


async def was_daily_processed(db: AsyncSession, telegram_id: int, d: date) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É d.
    """
    res = await db.execute(
        select(func.count(DailyGenerationLog.id))
        .where(DailyGenerationLog.telegram_id == telegram_id, DailyGenerationLog.run_date == d)
    )
    return (int(res.scalar_one() or 0) > 0)


async def accrue_daily_for_user(db: AsyncSession, telegram_id: int, run_date: date) -> Optional[Decimal]:
    """
    –ù–∞—á–∏—Å–ª—è–µ—Ç kWh –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞ —Å—É—Ç–∫–∏ run_date.
    –§–æ—Ä–º—É–ª–∞:
        generated = DAILY_GEN_BASE_KWH * active_panels_count * VIP_MULTIPLIER(if vip else 1.0)
    –≥–¥–µ VIP_MULTIPLIER = 1.07 (–∫–∞–∫ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—É—é –≤–µ–ª–∏—á–∏–Ω—É (Decimal) –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–Ω–µ—Ç –ø–∞–Ω–µ–ª–µ–π).
    """
    # –ù–µ –¥—É–±–ª–∏—Ä—É–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
    if await was_daily_processed(db, telegram_id, run_date):
        return None

    # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞–Ω–µ–ª–∏
    now = datetime.utcnow()
    res_panels = await db.execute(
        select(func.coalesce(func.sum(Panel.count), 0)).where(
            and_(
                Panel.telegram_id == telegram_id,
                or_(Panel.expires_at.is_(None), Panel.expires_at > now)
            )
        )
    )
    panels_count = int(res_panels.scalar_one() or 0)
    if panels_count <= 0:
        return None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º VIP
    vip = await has_vip(db, telegram_id)
    multiplier = Decimal(str(settings.VIP_MULTIPLIER)) if vip else Decimal("1.0")

    # –†–∞—Å—á—ë—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    base = Decimal(str(settings.DAILY_GEN_BASE_KWH))          # 0.598
    generated = (base * Decimal(panels_count) * multiplier).quantize(KWH_Q, rounding=ROUND_DOWN)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–ª–∞–Ω—Å
    resb = await db.execute(select(Balance).where(Balance.telegram_id == telegram_id))
    bal = resb.scalar_one_or_none()
    if bal is None:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–æ–∑–¥–∞–¥–∏–º
        bal = Balance(telegram_id=telegram_id, kwh=Decimal("0.000"))
        db.add(bal)
        await db.flush()

    bal.kwh = (Decimal(bal.kwh or 0) + generated).quantize(KWH_Q, rounding=ROUND_DOWN)

    # –õ–æ–≥ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    log = DailyGenerationLog(
        telegram_id=telegram_id,
        run_date=run_date,
        generated_kwh=generated,
        panels_count=panels_count,
        vip=vip,
        created_at=datetime.utcnow(),
    )
    db.add(log)

    await db.flush()
    return generated
