# üìÇ backend/app/shop_routes.py ‚Äî –ú–∞–≥–∞–∑–∏–Ω (Shop): –∫–æ–Ω—Ñ–∏–≥ –∏ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ (EFHC/TON/USDT, VIP NFT)
# -------------------------------------------------------------------------------------------------
# –ß—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç:
#   ‚Ä¢ GET /api/shop/config
#       - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
#           ‚Ä¢ TON/USDT –∫–æ—à–µ–ª—å–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π,
#           ‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ NFT-–º–∞—Ä–∫–µ—Ç (GetGems),
#           ‚Ä¢ –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π TON-–∫–æ—à–µ–ª—ë–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å),
#           ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π memo (–≤–∫–ª—é—á–∞–µ—Ç Telegram ID) ‚Äî –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏,
#           ‚Ä¢ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π), –≤–∫–ª—é—á–∞—è VIP NFT (250 EFHC / 20 TON / 50 USDT),
#             EFHC –ø–∞–∫–µ—Ç—ã (10/100/1000 EFHC), –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –±—É—Å—Ç–µ—Ä—ã/—Å–∫–∏–Ω—ã.
#   ‚Ä¢ POST /api/shop/buy
#       - –û—Ñ–æ—Ä–º–ª—è–µ—Ç –ø–æ–∫—É–ø–∫—É:
#           ‚Ä¢ method "efhc"  ‚Äî —Å–ø–∏—Å–∞–Ω–∏–µ EFHC —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞,
#           ‚Ä¢ method "ton"   ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ TON; –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ton://transfer
#           ‚Ä¢ method "usdt"  ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –º–µ—Ç–æ–¥ —Å –≤–Ω–µ—à–Ω–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–≤ —Ä–∞–º–∫–∞—Ö EFHC ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –∂–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
#           ‚Ä¢ –î–ª—è VIP NFT:
#               - efhc ‚Äî —Å–ø–∏—Å—ã–≤–∞–µ–º EFHC, —Å–æ–∑–¥–∞—ë–º pending –∑–∞–∫–∞–∑ (–≤—Ä—É—á–Ω—É—é –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º),
#               - ton/usdt ‚Äî –∂–¥—ë–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤; –æ—Ç–ø—Ä–∞–≤–∫–∞ NFT ‚Äî –≤—Ä—É—á–Ω—É—é –∞–¥–º–∏–Ω–æ–º.
#   ‚Ä¢ –¢–∞–±–ª–∏—Ü–∞ shop_orders: –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è.
#   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
#       - –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ: —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Telegram-Init-Data (initData –∏–∑ Telegram WebApp), HMAC SHA-256.
#       - –í dev-—Ä–µ–∂–∏–º–µ –≤–æ–∑–º–æ–∂–Ω–æ —É–∫–∞–∑–∞–Ω–∏–µ X-Telegram-Id (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ –≤ –ø—Ä–æ–¥).
#
# –í–∞–∂–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
#   ‚Ä¢ models.py ‚Äî User, Balance
#   ‚Ä¢ database.py ‚Äî get_session
#   ‚Ä¢ config.py ‚Äî get_settings (TON_WALLET_ADDRESS, USDT_WALLET_ADDRESS, NFT_MARKET_URL, EFHC_TOKEN_ADDRESS –∏ –¥—Ä.)
#   ‚Ä¢ ton_integration.py ‚Äî —Ñ–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç TON/USDT –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ TonAPI –∏ –∑–∞—á–∏—Å–ª—è–µ—Ç EFHC).
#
# –õ–æ–≥–∏–∫–∞:
#   1) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Shop –≤–∏–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–∫—É–ø–∫–∏.
#   2) –ü—Ä–∏ –≤—ã–±–æ—Ä–µ "EFHC" ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥: —Å–ø–∏—Å—ã–≤–∞–µ–º EFHC –∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑.
#   3) –ü—Ä–∏ –≤—ã–±–æ—Ä–µ "TON"/"USDT" ‚Äî —Å–æ–∑–¥–∞—ë—Ç—Å—è –∑–∞–∫–∞–∑-–æ–∂–∏–¥–∞–Ω–∏–µ, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è memo.
#      –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏—Ç —á–µ—Ä–µ–∑ Tonkeeper/MytonWallet/Wallet, –º—ã –Ω–∞–π–¥—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ memo+—Å—É–º–º–µ.
#   4) VIP NFT: –ø—Ä–∏ method=efhc ‚Äî —Å–ø–∏—Å—ã–≤–∞–µ–º 250 EFHC, —Å–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ "pending_nft_delivery".
#      –ü—Ä–∏ method in {ton, usdt} ‚Äî –∂–¥—ë–º –æ–ø–ª–∞—Ç—ã; –∞–¥–º–∏–Ω –≤—Ä—É—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç NFT –Ω–∞ –∫–æ—à–µ–ª—ë–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
#
# –¶–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
#   ‚Ä¢ VIP NFT: 250 EFHC / 20 TON / 50 USDT
#   ‚Ä¢ EFHC Packs: 10 EFHC –∑–∞ 0.8 TON / 3 USDT; 100 EFHC –∑–∞ 8 TON / 30 USDT; 1000 EFHC –∑–∞ 80 TON / 300 USDT
#
# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
#   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram WebApp InitData ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –≤ –ø—Ä–æ–¥, –∑–¥–µ—Å—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.
#   ‚Ä¢ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ ‚Äî –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö.
#
# –î–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ:
#   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω-—Ä–æ—É—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ (–∫–∞—Ç–∞–ª–æ–≥), —Å–∫–∏–¥–∫–∏/–∞–∫—Ü–∏–∏.
#   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å webhook-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π.
# -------------------------------------------------------------------------------------------------

from __future__ import annotations

import hmac
import hashlib
import json
from datetime import datetime
from decimal import Decimal, ROUND_DOWN
from typing import Optional, Dict, Any, List, Tuple

from fastapi import APIRouter, Depends, Header, HTTPException, status, Body, Query
from pydantic import BaseModel, Field
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text, select, update

from .database import get_session
from .config import get_settings
from .models import User, Balance

router = APIRouter()
settings = get_settings()

# --------------------------------------------------------------------------------------
# –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ
# --------------------------------------------------------------------------------------
DEC3 = Decimal("0.001")

def d3(x: Decimal) -> Decimal:
    """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ decimal –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–ª—è EFHC/kWh."""
    return x.quantize(DEC3, rounding=ROUND_DOWN)


# --------------------------------------------------------------------------------------
# –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram WebApp InitData (HMAC-SHA256) ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ Telegram
# –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://core.telegram.org/bots/webapps#validating-data-received-via-the-web-app
# --------------------------------------------------------------------------------------
def _compute_init_data_hash(data: Dict[str, Any], bot_token: str) -> str:
    """
    –°—á–∏—Ç–∞–µ–º HMAC-SHA256 –ø–æ `data_check_string` –∏ –∫–ª—é—á—É –æ—Ç SHA256(bot_token),
    –≥–¥–µ data_check_string ‚Äî —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ k=val –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ –∫–ª—é—á—É –∏ —Å–∫–ª–µ–µ–Ω–Ω—ã–º–∏ \n.
    """
    check_string_parts = []
    for k in sorted(data.keys()):
        if k == "hash":
            continue
        val = data[k]
        check_string_parts.append(f"{k}={val}")
    data_check_string = "\n".join(check_string_parts)

    secret_key = hashlib.sha256(bot_token.encode()).digest()
    h = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256)
    return h.hexdigest()


def verify_telegram_init_data(init_data: str, bot_token: str) -> Optional[Dict[str, Any]]:
    """
    –†–∞–∑–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫—É init_data –∏–∑ WebApp (—Ñ–æ—Ä–º–∞—Ç query string) –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–µ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª–µ–π, –µ—Å–ª–∏ OK, –∏–Ω–∞—á–µ None.
    """
    try:
        # init_data –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ query string: "query_id=...&user=...&auth_date=...&hash=..."
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ dict
        pairs = [kv for kv in init_data.split("&") if kv.strip()]
        data: Dict[str, Any] = {}
        for p in pairs:
            k, _, v = p.partition("=")
            if not k:
                continue
            data[k] = v

        got_hash = data.get("hash")
        if not got_hash:
            return None

        # –°—á–∏—Ç–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
        calc_hash = _compute_init_data_hash(data, bot_token=bot_token)
        if hmac.compare_digest(got_hash, calc_hash):
            return data
        return None
    except Exception:
        return None


async def extract_telegram_id_from_headers(
    x_tg_init: Optional[str],
    x_tg_id: Optional[str]
) -> int:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
      1) –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω X-Telegram-Init-Data (initData), –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å.
      2) –ò–Ω–∞—á–µ, –≤ –¥–µ–≤-—Ä–µ–∂–∏–º–µ –¥–æ–ø—É—Å–∫–∞–µ–º X-Telegram-Id (–ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–¥–µ).
    """
    if x_tg_init:
        data = verify_telegram_init_data(x_tg_init, settings.TELEGRAM_BOT_TOKEN)
        if not data:
            raise HTTPException(status_code=401, detail="Invalid Telegram initData")

        # initData –≤–∫–ª—é—á–∞–µ—Ç "user" (URL-encoded JSON)
        # user={"id":12345,"first_name":"...","username":"..."}
        user_raw = data.get("user")
        if user_raw:
            try:
                user_json = json.loads(user_raw)  # parse JSON
                tid = int(user_json.get("id"))
                return tid
            except Exception:
                pass
        raise HTTPException(status_code=400, detail="No valid user in initData")

    # fallback: X-Telegram-Id ‚Äî –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è PROD!
    if x_tg_id and x_tg_id.isdigit():
        return int(x_tg_id)

    raise HTTPException(status_code=401, detail="No Telegram authentication provided")


# --------------------------------------------------------------------------------------
# –¢–∞–±–ª–∏—Ü–∞ "shop_orders" ‚Äî —É—á—ë—Ç –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
# --------------------------------------------------------------------------------------
CREATE_SHOP_TABLE_SQL = """
CREATE TABLE IF NOT EXISTS efhc_core.shop_orders (
    id BIGSERIAL PRIMARY KEY,
    telegram_id BIGINT NOT NULL,
    item_id TEXT NOT NULL,
    method TEXT NOT NULL, -- 'efhc' | 'ton' | 'usdt'
    status TEXT NOT NULL DEFAULT 'pending', -- 'pending', 'awaiting_payment', 'paid', 'completed', 'canceled', 'pending_nft_delivery'
    amount NUMERIC(30, 3) NOT NULL DEFAULT 0, -- —Å–∫–æ–ª—å–∫–æ EFHC/TON/USDT –ø–æ —Ç–æ–≤–∞—Ä—É
    currency TEXT NOT NULL, -- 'EFHC' | 'TON' | 'USDT'
    memo TEXT NULL,         -- memo –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π TON/USDT
    extra_data JSONB NULL,  -- –∑–∞–ø–∞—Å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
    created_at TIMESTAMPTZ DEFAULT now()
);
"""

async def ensure_shop_tables(db: AsyncSession) -> None:
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É shop_orders, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."""
    await db.execute(text(CREATE_SHOP_TABLE_SQL))
    await db.commit()


# --------------------------------------------------------------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞
# –ú–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –∏–ª–∏ –≤ settings. –ó–¥–µ—Å—å ‚Äî –≤ –∫–æ–¥–µ, –Ω–æ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –≤—ã–Ω–æ—Å–∏—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥.
# --------------------------------------------------------------------------------------
def shop_items() -> List[Dict[str, Any]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –≤ –º–∞–≥–∞–∑–∏–Ω–µ.
    –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–¥–µ—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É:
      { id, title, desc, price_efhc?, price_ton?, price_usdt? }
    """
    return [
        {
            "id": "vip_nft",
            "title": "VIP NFT",
            "desc": "–î–∞–µ—Ç +7% –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ).",
            "price_efhc": 250,   # –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø–æ–∫—É–ø–∫–∞ EFHC  => —Å–ø–∏—Å–∞–Ω–∏–µ EFHC
            "price_ton": 20,
            "price_usdt": 50
        },
        {
            "id": "efhc_pack_10",
            "title": "10 EFHC",
            "desc": "–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ EFHC. –ü–ª–∞—Ç–µ–∂ –≤ TON/USDT.",
            "price_ton": Decimal("0.8"),    # —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¢–ó: 10 EFHC = 0.8 TON
            "price_usdt": Decimal("3.0"),
        },
        {
            "id": "efhc_pack_100",
            "title": "100 EFHC",
            "desc": "–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ EFHC. –ü–ª–∞—Ç–µ–∂ –≤ TON/USDT.",
            "price_ton": Decimal("8.0"),
            "price_usdt": Decimal("30.0"),
        },
        {
            "id": "efhc_pack_1000",
            "title": "1000 EFHC",
            "desc": "–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ EFHC. –ü–ª–∞—Ç–µ–∂ –≤ TON/USDT.",
            "price_ton": Decimal("80.0"),
            "price_usdt": Decimal("300.0"),
        },
        # –ü—Ä–∏–º–µ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–±—É—Å—Ç–µ—Ä–æ–≤/—Å–∫–∏–Ω–æ–≤)
        {
            "id": "booster_10",
            "title": "–ë—É—Å—Ç–µ—Ä ‚ö°",
            "desc": "+10% –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ 24 —á–∞—Å–∞",
            "price_efhc": 50
        },
        {
            "id": "skin_tree",
            "title": "–î–µ–∫–æ—Ä üå≥",
            "desc": "–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –Ω–∞ —Ñ–æ–Ω–µ (–≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç)",
            "price_efhc": 100
        }
    ]


def get_item_by_id(iid: str) -> Optional[Dict[str, Any]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Ç–æ–≤–∞—Ä–∞ –ø–æ item_id –∏–∑ —Å–ø–∏—Å–∫–∞ shop_items()."""
    for it in shop_items():
        if it.get("id") == iid:
            return it
    return None


# --------------------------------------------------------------------------------------
# Pydantic-—Å—Ö–µ–º—ã –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
# --------------------------------------------------------------------------------------
class ShopConfigResponse(BaseModel):
    ton_wallet: str
    usdt_wallet: str
    nft_market_url: str
    user_wallet: Optional[str]
    memo: str
    items: List[Dict[str, Any]]


class ShopBuyRequest(BaseModel):
    user_id: Optional[int] = Field(None, description="Telegram ID (–≤ –ø—Ä–æ–¥–µ –ª—É—á—à–µ –±—Ä–∞—Ç—å –∏–∑ —Ç–æ–∫–µ–Ω–∞)")
    item_id: str = Field(..., description="ID —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'vip_nft')")
    method: str = Field(..., description="'efhc' | 'ton' | 'usdt'")


class ShopBuyResponse(BaseModel):
    success: bool
    status: str
    order_id: Optional[int] = None
    payment_url: Optional[str] = None
    payment_address: Optional[str] = None
    memo: Optional[str] = None
    currency: Optional[str] = None
    amount: Optional[str] = None
    message: Optional[str] = None


# --------------------------------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º
# --------------------------------------------------------------------------------------
async def ensure_user_balance(db: AsyncSession, telegram_id: int) -> None:
    """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ–≥–æ –∑–∞–ø–∏—Å—å –≤ balances."""
    await db.execute(
        text(f"""
            INSERT INTO efhc_core.users (telegram_id)
            VALUES (:tg)
            ON CONFLICT (telegram_id) DO NOTHING
        """), {"tg": telegram_id}
    )
    await db.execute(
        text(f"""
            INSERT INTO efhc_core.balances (telegram_id)
            VALUES (:tg)
            ON CONFLICT (telegram_id) DO NOTHING
        """), {"tg": telegram_id}
    )
    await db.commit()


async def get_user_balance(db: AsyncSession, telegram_id: int) -> Tuple[Decimal, Decimal, Decimal]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (efhc, bonus, kwh) —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    q = await db.execute(text("""
        SELECT efhc, bonus, kwh
          FROM efhc_core.balances
         WHERE telegram_id = :tg
    """), {"tg": telegram_id})
    row = q.fetchone()
    if not row:
        return (Decimal("0.000"), Decimal("0.000"), Decimal("0.000"))
    return (Decimal(row[0] or 0), Decimal(row[1] or 0), Decimal(row[2] or 0))


async def update_user_efhc(db: AsyncSession, telegram_id: int, new_efhc: Decimal) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await db.execute(text("""
        UPDATE efhc_core.balances
           SET efhc = :v
         WHERE telegram_id = :tg
    """), {"v": str(d3(new_efhc)), "tg": telegram_id})
    await db.commit()


# --------------------------------------------------------------------------------------
# –õ–æ–≥–∏–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è memo –∏ —Å—Å—ã–ª–æ–∫ ton://transfer –¥–ª—è TON
# --------------------------------------------------------------------------------------
def build_payment_memo(telegram_id: int, item_id: str, amount: Decimal, currency: str) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç memo (comment) –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —á—Ç–æ–±—ã watcher (ton_integration.py) —Å–º–æ–≥
    —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Ç–æ–≤–∞—Ä–æ–º.
    –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∫–ª—é—á–∞—Ç—å 'id <telegram_id> <amount> EFHC' ‚Äî –¥–ª—è —Å–ª—É—á–∞–µ–≤ EFHC-–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π.
    –ü—Ä–∏–º–µ—Ä: "id 123456 100 EFHC; order: efhc_pack_100"
    """
    if currency.upper() == "EFHC":
        # —Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–Ω–µ—à–Ω–µ–π –æ–ø–ª–∞—Ç—ã, –Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã...
        efhc_label = f"{amount} EFHC"
    elif currency.upper() == "TON":
        efhc_label = f"order {item_id} via TON"
    else:
        efhc_label = f"order {item_id} via {currency}"
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º memo —Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—â–µ–π –ª–æ–≥–∏–∫–µ: –≤–∫–ª—é—á–∞–µ–º "id <tg>"
    # –î–ª—è EFHC –ø–∞–∫–µ—Ç–æ–≤, —á—Ç–æ–±—ã watcher –Ω–∞—á–∏—Å–ª—è–ª EFHC ‚Äî good: "id 4357333 10 EFHC".
    if item_id.startswith("efhc_pack_"):
        efhc_amount = item_id.split("_")[-1]
        memo = f"id {telegram_id} {efhc_amount} EFHC; order {item_id}"
        return memo
    # VIP NFT ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è –º–µ—Ç–∫–∞
    if item_id == "vip_nft":
        memo = f"id {telegram_id} VIP NFT; order {item_id}"
        return memo

    # –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä
    memo = f"id {telegram_id}; order {item_id}"
    return memo


def build_ton_transfer_url(address: str, amount_ton: Decimal, memo: str) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É —Ç–æ–Ω-–∫–æ—à–µ–ª—å–∫–∞: ton://transfer/<address>?amount=...&text=...
    –ù–µ –≤—Å–µ –∫–æ—à–µ–ª—å–∫–∏ –ø–æ–Ω–∏–º–∞—é—Ç text=, –Ω–æ Tonkeeper/MyTonWallet/Telegram Wallet –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç.
    """
    # amount –≤ –Ω–∞–Ω–æ—Ç–æ–Ω–∞—Ö? –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è—Ö ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–Ω–æ—Ç–æ–Ω—ã.
    # –ù–æ –º–Ω–æ–≥–∏–µ –∫–ª–∏–µ–Ω—Ç—ã –ø–æ–Ω–∏–º–∞—é—Ç amount –≤ TON. –î–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ nano:
    # nano = int(amount_ton * 1e9), –Ω–æ –∑–¥–µ—Å—å –æ—Ç–¥–∞–¥–∏–º –≤ TON.
    safe_text = memo.replace(" ", "%20")  # –ø—Ä–æ—Å—Ç–µ–π—à–µ–µ urlencode
    return f"ton://transfer/{address}?amount={amount_ton}&text={safe_text}"


# --------------------------------------------------------------------------------------
# GET /api/shop/config ‚Äî –æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
# --------------------------------------------------------------------------------------
@router.get("/shop/config", response_model=ShopConfigResponse)
async def shop_config(
    user_id: Optional[int] = Query(None, description="Telegram ID (–∏–∑ initData –≤ –ø—Ä–æ–¥–µ)"),
    db: AsyncSession = Depends(get_session),
    x_tg_init: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Init-Data"),
    x_tg_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –û—Ç–∫—É–¥–∞ –±–µ—Ä—ë—Ç—Å—è Telegram ID:
      ‚Ä¢ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ ‚Äî –∏–∑ X-Telegram-Init-Data (initData),
      ‚Ä¢ –≤ dev-—Ä–µ–∂–∏–º–µ ‚Äî X-Telegram-Id.
    –†–µ–∑—É–ª—å—Ç–∞—Ç:
      ‚Ä¢ ton_wallet: TON-–∫–æ—à–µ–ª–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞,
      ‚Ä¢ usdt_wallet: USDT-–∫–æ—à–µ–ª–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞,
      ‚Ä¢ nft_market_url: —Å—Å—ã–ª–∫–∞ –Ω–∞ NFT-–º–∞—Ä–∫–µ—Ç (GetGems),
      ‚Ä¢ user_wallet: TON-–∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω),
      ‚Ä¢ memo: —Å—Ç—Ä–æ–∫–∞ memo (—Ñ–æ—Ä–º–∞—Ç: "id <tg> ...") ‚Äî –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π,
      ‚Ä¢ items: —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤.
    """
    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tid = await extract_telegram_id_from_headers(x_tg_init, x_tg_id)
    if user_id:
        if user_id != tid:
            raise HTTPException(status_code=403, detail="UserID mismatch with token data")

    # –ò—â–µ–º –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –í –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ ‚Äî —Ö—Ä–∞–Ω–∏–º –≤ efhc_core.users –ø–æ–ª–µ "wallet_address". –ï—Å–ª–∏ –≤ models –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤—å—Ç–µ.
    # –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø–æ–ª–µ wallet_address –µ—Å—Ç—å —É User (–∏–Ω–∞—á–µ –∑–∞–º–µ–Ω–∏—Ç–µ).
    q = await db.execute(select(User).where(User.telegram_id == tid))
    user: Optional[User] = q.scalar_one_or_none()

    user_wallet = getattr(user, "wallet_address", None) if user else None
    # –§–æ—Ä–º–∏—Ä—É–µ–º memo –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ‚Äî –±–∞–∑–æ–≤—ã–π; –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–≤–∏—Å–∏–º –æ—Ç item –∏ —Å—É–º–º—ã ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤ /buy
    # –ù–∞ —ç—Ç–∞–ø–µ config –º–æ–∂–Ω–æ –æ—Ç–¥–∞—Ç—å –æ–±—â–∏–π: "id <tg> EFHC". –í /buy –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Äî —É—Ç–æ—á–Ω–∏–º.
    base_memo = f"id {tid}"

    resp = ShopConfigResponse(
        ton_wallet=settings.TON_WALLET_ADDRESS or "",
        usdt_wallet=getattr(settings, "USDT_WALLET_ADDRESS", "") or "",
        nft_market_url=getattr(settings, "NFT_MARKET_URL", "") or (settings.VIP_NFT_COLLECTION or ""),
        user_wallet=user_wallet or "",
        memo=base_memo,
        items=shop_items()
    )
    return resp


# --------------------------------------------------------------------------------------
# POST /api/shop/buy ‚Äî –ø–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞
# --------------------------------------------------------------------------------------
@router.post("/shop/buy", response_model=ShopBuyResponse)
async def shop_buy(
    payload: ShopBuyRequest = Body(...),
    db: AsyncSession = Depends(get_session),
    x_tg_init: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Init-Data"),
    x_tg_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
):
    """
    –û—Ñ–æ—Ä–º–ª—è–µ—Ç –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞. payload: { user_id, item_id, method }
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–µ—Ç–æ–¥—ã: 'efhc' | 'ton' | 'usdt'
    –õ–æ–≥–∏–∫–∞:
      ‚Ä¢ method = 'efhc':
         - –¥–ª—è —Ç–æ–Ω–∫–æ—Å—Ç–µ–π: –ò—â–µ–º price_efhc –≤ —Ç–æ–≤–∞—Ä–µ. –°–ø–∏—Å—ã–≤–∞–µ–º EFHC —Å –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ —Å–æ status:
            - –¥–ª—è vip_nft: 'pending_nft_delivery' (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –≤—Ä—É—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç NFT)
            - –¥–ª—è booster/skin: 'completed' –∏–ª–∏ 'pending', –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–æ–≥–∏–∫–∏ (–≤ –ø—Ä–∏–º–µ—Ä–µ ‚Äî 'completed')
      ‚Ä¢ method = 'ton':
         - –∏—â–µ–º price_ton,
         - —Ñ–æ—Ä–º–∏—Ä—É–µ–º memo (–≤–∫–ª—é—á–∞—è id tg + order id + –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ),
         - —Å–æ–∑–¥–∞—ë–º order 'awaiting_payment',
         - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–Ω-—Å—Å—ã–ª–∫—É ‚Äî
           ton://transfer/<TON_WALLET_ADDRESS>?amount=<price_ton>&text=<memo>
      ‚Ä¢ method = 'usdt':
         - –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ 'awaiting_payment' —Å currency = 'USDT' –∏ —Å—É–º–º–æ–π,
         - –≤–æ–∑–≤—Ä–∞—Ç–∏–º 'payment_address' –∏ 'memo' ‚Äî –æ–ø–ª–∞—Ç—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤–Ω–µ —á–µ—Ä–µ–∑ watcher.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tid_from_header = await extract_telegram_id_from_headers(x_tg_init, x_tg_id)
    if payload.user_id and tid_from_header != payload.user_id:
        raise HTTPException(status_code=403, detail="User mismatch with header token")

    telegram_id = payload.user_id or tid_from_header

    # –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    await ensure_shop_tables(db)
    await ensure_user_balance(db, telegram_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–∞
    item = get_item_by_id(payload.item_id)
    if not item:
        raise HTTPException(status_code=404, detail="Item not found")

    method = payload.method.lower().strip()
    if method not in ("efhc", "ton", "usdt"):
        raise HTTPException(status_code=400, detail="Unsupported method")

    # –ò–¥—ë–º –ø–æ –º–µ—Ç–æ–¥–∞–º
    if method == "efhc":
        price_efhc = item.get("price_efhc")
        if not price_efhc:
            raise HTTPException(status_code=400, detail="Item is not available for EFHC payment")

        price_efhc = Decimal(str(price_efhc))
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        cur_e, cur_b, cur_k = await get_user_balance(db, telegram_id)
        if cur_e < price_efhc:
            raise HTTPException(status_code=400, detail="Insufficient EFHC balance")

        # –°–ø–∏—Å—ã–≤–∞–µ–º EFHC –∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
        new_e = d3(cur_e - price_efhc)
        await update_user_efhc(db, telegram_id, new_e)

        # –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è VIP NFT (—Å–ø–∏—Å–∞–ª–∏ EFHC ‚Äî –∑–∞–∫–∞–∑ –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–¥–∞—á–∏ NFT –≤—Ä—É—á–Ω—É—é)
        if item["id"] == "vip_nft":
            status = "pending_nft_delivery"
            memo = f"id {telegram_id} VIP NFT; internal EFHC method"
        else:
            # –ü—Ä–æ—á–∏–µ —Ç–æ–≤–∞—Ä—ã (–±—É—Å—Ç–µ—Ä—ã/—Å–∫–∏–Ω—ã) ‚Äî –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å—Ä–∞–∑—É: 'completed'
            status = "completed"
            memo = f"id {telegram_id}; item {item['id']}; internal EFHC purchase"

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–∫–∞–∑
        q = await db.execute(text("""
            INSERT INTO efhc_core.shop_orders (telegram_id, item_id, method, status, amount, currency, memo, extra_data)
            VALUES (:tg, :item, 'efhc', :st, :amt, 'EFHC', :memo, :extra)
            RETURNING id
        """), {
            "tg": telegram_id,
            "item": item["id"],
            "st": status,
            "amt": str(price_efhc),
            "memo": memo,
            "extra": json.dumps({"title": item["title"], "desc": item.get("desc", "")}),
        })
        row = q.fetchone()
        await db.commit()

        order_id = row[0] if row else None

        return ShopBuyResponse(
            success=True,
            status=status,
            order_id=order_id,
            message="EFHC —Å–ø–∏—Å–∞–Ω—ã. –ó–∞–∫–∞–∑ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω."
        )

    if method == "ton":
        price_ton = item.get("price_ton")
        if not price_ton:
            raise HTTPException(status_code=400, detail="Item is not available for TON payment")

        price_ton = Decimal(str(price_ton))
        # –§–æ—Ä–º–∏—Ä—É–µ–º memo –∏ —Å—Å—ã–ª–∫—É ton://transfer
        memo = build_payment_memo(telegram_id, payload.item_id, price_ton, "TON")
        ton_addr = settings.TON_WALLET_ADDRESS or ""
        if not ton_addr:
            raise HTTPException(status_code=500, detail="Project TON wallet is not configured")

        # —Å–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ "awaiting_payment"
        q = await db.execute(text("""
            INSERT INTO efhc_core.shop_orders(telegram_id, item_id, method, status, amount, currency, memo, extra_data)
            VALUES(:tg, :item, 'ton', 'awaiting_payment', :amt, 'TON', :memo, :extra)
            RETURNING id
        """), {
            "tg": telegram_id,
            "item": payload.item_id,
            "amt": str(price_ton),
            "memo": memo,
            "extra": json.dumps({"title": item["title"], "desc": item.get("desc", "")}),
        })
        row = q.fetchone()
        await db.commit()

        order_id = row[0] if row else None
        payment_url = build_ton_transfer_url(ton_addr, price_ton, memo)
        return ShopBuyResponse(
            success=True,
            status="awaiting_payment",
            order_id=order_id,
            payment_url=payment_url,
            payment_address=ton_addr,
            memo=memo,
            currency="TON",
            amount=str(price_ton),
            message="–û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ TON-–∫–æ—à–µ–ª–µ–∫. –ü–æ—Å–ª–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ paid/completed"
        )

    if method == "usdt":
        price_usdt = item.get("price_usdt")
        if not price_usdt:
            raise HTTPException(status_code=400, detail="Item is not available for USDT payment")

        price_usdt = Decimal(str(price_usdt))
        # –î–ª—è USDT ‚Äî –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ç–∏: –∑–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ USDT –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –Ω–∞ –∞–¥—Ä–µ—Å settings.USDT_WALLET_ADDRESS
        usdt_addr = getattr(settings, "USDT_WALLET_ADDRESS", "") or ""
        if not usdt_addr:
            raise HTTPException(status_code=500, detail="Project USDT wallet is not configured")

        memo = build_payment_memo(telegram_id, payload.item_id, price_usdt, "USDT")

        # —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ 'awaiting_payment'
        q = await db.execute(text("""
            INSERT INTO efhc_core.shop_orders(telegram_id, item_id, method, status, amount, currency, memo, extra_data)
            VALUES(:tg, :item, 'usdt', 'awaiting_payment', :amt, 'USDT', :memo, :extra)
            RETURNING id
        """), {
            "tg": telegram_id,
            "item": payload.item_id,
            "amt": str(price_usdt),
            "memo": memo,
            "extra": json.dumps({"title": item["title"], "desc": item.get("desc", "")}),
        })
        row = q.fetchone()
        await db.commit()

        order_id = row[0] if row else None

        return ShopBuyResponse(
            success=True,
            status="awaiting_payment",
            order_id=order_id,
            payment_address=usdt_addr,
            memo=memo,
            currency="USDT",
            amount=str(price_usdt),
            message="–û–ø–ª–∞—Ç–∏—Ç–µ –≤ USDT –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å. –ü–æ—Å–ª–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ paid/completed"
        )

    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π:
    raise HTTPException(status_code=400, detail="Unsupported method (internal logic)")
