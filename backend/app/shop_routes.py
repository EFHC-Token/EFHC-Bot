# üìÇ backend/app/shop_routes.py ‚Äî –ú–∞–≥–∞–∑–∏–Ω (—Ç–æ–≤–∞—Ä—ã, –ø–æ–∫—É–ø–∫–∞ EFHC/VIP, –∫–æ–Ω—Ñ–∏–≥, —ç–∫—Å–ø–æ—Ä—Ç, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
# ------------------------------------------------------------------------------------------------
# –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –º–æ–¥—É–ª—å:
#   ‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç API –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ (Shop):
#       - /api/shop/config ‚Äî –æ—Ç–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–∞–≥–∞–∑–∏–Ω–∞ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑ –ë–î: shop_items)
#       - /api/shop/buy ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É: EFHC –∑–∞ TON/USDT, EFHC –∑–∞ EFHC (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å), VIP NFT
#       - /api/admin/shop/items ‚Äî CRUD —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞ (–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)
#       - /api/admin/shop/orders ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤
#       - /api/admin/shop/orders/export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ (CSV/JSON)
#   ‚Ä¢ –°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã shop_items –∏ shop_orders –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (idempotent).
#   ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ Telegram –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –∏ –∏—Ö –æ–ø–ª–∞—Ç–µ/–Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏.
#   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å ton_integration.py —á–µ—Ä–µ–∑ MEMO (comment) –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:
#       - –§–æ—Ä–º–∞—Ç: "tg={telegram_id} code={item.code} order {item_id}"
#       - –í ton_integration.py –º—ã —É–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∞–ª–∏ parse shop memo + –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.
#
# –í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
#   ‚Ä¢ EFHC –∏ –∫–í—Ç ‚Äî —Ä–∞–∑–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã.
#   ‚Ä¢ 1 EFHC = 1 –∫–í—Ç (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å) ‚Äî –æ–±—Ä–∞—Ç–Ω—ã–π –æ–±–º–µ–Ω –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.
#   ‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –ø–∞–Ω–µ–ª–µ–π ‚Äî —Ç–æ–ª—å–∫–æ –∑–∞ EFHC (—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ panels_routes.py /purchase).
#   ‚Ä¢ –ö—É–ø–∏—Ç—å EFHC –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ Shop (–∑–∞ TON/USDT) –∏–ª–∏ –≤–≤–æ–¥–æ–º EFHC (—á–µ—Ä–µ–∑ TonAPI watcher).
#   ‚Ä¢ VIP NFT –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å:
#       - –ó–∞ EFHC (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ 250 EFHC) ‚Üí —Å—Ç–∞—Ç—É—Å VIP, NFT –Ω–µ –≤—ã–¥–∞—ë–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (—Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å VIP)
#       - –ó–∞ TON/USDT ‚Üí —Å–æ–∑–¥–∞–µ—Ç—Å—è –∑–∞–∫–∞–∑, –∞–¥–º–∏–Ω –≤—Ä—É—á–Ω—É—é –≤—ã–¥–∞–µ—Ç NFT, —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ "pending_nft_delivery"
#         (–ø–æ—Å–ª–µ –≤—Ä—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º –º–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å —Å—Ç–∞—Ç—É—Å "completed").
#
# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:
#   ‚Ä¢ –î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ ‚Äî –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è Telegram WebApp initData (—Å–º. verify_webapp.py).
#     –í —Ä–∞–º–∫–∞—Ö –¥–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è ‚Äî –∑–∞–≥–ª—É—à–∫–∞ _get_user_from_request() —á–µ—Ä–µ–∑ X-Telegram-ID (–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–º–µ–Ω–∏—Ç–µ
#     –Ω–∞ verify_webapp.verify_telegram_auth –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞).
#   ‚Ä¢ –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ X-Telegram-ID == ADMIN_TELEGRAM_ID.
#
# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
#   ‚Ä¢ FastAPI
#   ‚Ä¢ SQLAlchemy AsyncSession
#   ‚Ä¢ httpx –¥–ª—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
#   ‚Ä¢ Decimal –¥–ª—è –¥–µ–Ω–µ–∂–Ω—ã—Ö/–±–∞–ª–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
#   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.py (get_settings)
#
# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏:
#   ‚Ä¢ ton_integration.py ‚Äî —Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ TON/Jetton –∏ –ø–æ MEMO –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–∫–∞–∑ –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å
#   ‚Ä¢ panels_routes.py ‚Äî —Å–ø–∏—Å—ã–≤–∞–µ—Ç EFHC –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–∞–Ω–µ–ª–µ–π
#   ‚Ä¢ exchange_routes.py ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è kWh ‚Üí EFHC
#   ‚Ä¢ scheduler.py ‚Äî –Ω–∞—á–∏—Å–ª—è–µ—Ç kWh –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
#   ‚Ä¢ referrals_routes.py, ranks_routes.py ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ (—É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã)
# ------------------------------------------------------------------------------------------------

from __future__ import annotations

import csv
import io
import json
from datetime import datetime, timezone
from decimal import Decimal, ROUND_DOWN
from typing import Any, Dict, List, Optional

import httpx
from fastapi import APIRouter, Depends, HTTPException, Request, Response, status, Query
from pydantic import BaseModel, Field, validator
from sqlalchemy import text
from sqlalchemy.ext.asyncio import AsyncSession

from .config import get_settings
from .database import get_session

# ---------------------------------------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ---------------------------------------------------------------------------
settings = get_settings()

# –ê–¥–º–∏–Ω —á–∞—Ç/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
ADMIN_TELEGRAM_ID = int(getattr(settings, "ADMIN_TELEGRAM_ID", "0") or "0")
TELEGRAM_BOT_TOKEN = getattr(settings, "TELEGRAM_BOT_TOKEN", "")
TON_WALLET_ADDRESS = (settings.TON_WALLET_ADDRESS or "").strip()
EFHC_DECIMALS = int(getattr(settings, "EFHC_DECIMALS", 3) or 3)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã –¥–ª—è Shop (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ton_integration –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è "code=")
# –ú—ã –ø–æ–∑–≤–æ–ª–∏–º —Ö—Ä–∞–Ω–∏—Ç—å –≤—Å—ë –≤ DB (shop_items), –Ω–æ –∫–æ–¥—ã –¥–ª—è EFHC-–ø–∞–∫–µ—Ç–æ–≤ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
# EFHC_10_TON, EFHC_100_TON, EFHC_1000_TON, VIP_TON, VIP_USDT, VIP_EFHC, EFHC_? _USDT ...
DEFAULT_ITEMS_PRESET = [
    # EFHC –ø–∞–∫–µ—Ç—ã –∑–∞ TON:
    {
        "code": "EFHC_10_TON",
        "title": "10 EFHC –∑–∞ 0.8 TON",
        "description": "–ü–∞–∫–µ—Ç 10 EFHC",
        "price_asset": "TON",
        "price_amount": "0.8",
        "efhc_amount": "10",
        "is_active": True,
        "is_vip": False,
        "is_internal": False,
    },
    {
        "code": "EFHC_100_TON",
        "title": "100 EFHC –∑–∞ 8 TON",
        "description": "–ü–∞–∫–µ—Ç 100 EFHC",
        "price_asset": "TON",
        "price_amount": "8",
        "efhc_amount": "100",
        "is_active": True,
        "is_vip": False,
        "is_internal": False,
    },
    {
        "code": "EFHC_1000_TON",
        "title": "1000 EFHC –∑–∞ 80 TON",
        "description": "–ü–∞–∫–µ—Ç 1000 EFHC",
        "price_asset": "TON",
        "price_amount": "80",
        "efhc_amount": "1000",
        "is_active": True,
        "is_vip": False,
        "is_internal": False,
    },
    # EFHC –ø–∞–∫–µ—Ç—ã –∑–∞ USDT:
    {
        "code": "EFHC_10_USDT",
        "title": "10 EFHC –∑–∞ 3 USDT",
        "description": "–ü–∞–∫–µ—Ç 10 EFHC",
        "price_asset": "USDT",
        "price_amount": "3",
        "efhc_amount": "10",
        "is_active": True,
        "is_vip": False,
        "is_internal": False,
    },
    {
        "code": "EFHC_100_USDT",
        "title": "100 EFHC –∑–∞ 30 USDT",
        "description": "–ü–∞–∫–µ—Ç 100 EFHC",
        "price_asset": "USDT",
        "price_amount": "30",
        "efhc_amount": "100",
        "is_active": True,
        "is_vip": False,
        "is_internal": False,
    },
    {
        "code": "EFHC_1000_USDT",
        "title": "1000 EFHC –∑–∞ 300 USDT",
        "description": "–ü–∞–∫–µ—Ç 1000 EFHC",
        "price_asset": "USDT",
        "price_amount": "300",
        "efhc_amount": "1000",
        "is_active": True,
        "is_vip": False,
        "is_internal": False,
    },
    # VIP NFT (–Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø—Ü–∏–π)
    {
        "code": "VIP_EFHC",
        "title": "VIP NFT –∑–∞ 250 EFHC",
        "description": "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ VIP —Å—Ç–∞—Ç—É—Å–∞ (+7%) —á–µ—Ä–µ–∑ –ø–æ–∫—É–ø–∫—É NFT",
        "price_asset": "EFHC",
        "price_amount": "250",
        "efhc_amount": None,  # –ó–∞ EFHC —Å—Ä–∞–∑—É —Å–ø–∏—Å—ã–≤–∞–µ–º EFHC —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏ —Å—Ç–∞–≤–∏–º VIP
        "is_active": True,
        "is_vip": True,
        "is_internal": True,   # –ü–æ–∫—É–ø–∫–∞ –∑–∞ EFHC (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è)
    },
    {
        "code": "VIP_TON",
        "title": "VIP NFT –∑–∞ 20 TON",
        "description": "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ VIP —Å—Ç–∞—Ç—É—Å–∞ (+7%) —á–µ—Ä–µ–∑ –ø–æ–∫—É–ø–∫—É NFT",
        "price_asset": "TON",
        "price_amount": "20",
        "efhc_amount": None,
        "is_active": True,
        "is_vip": True,
        "is_internal": False,
    },
    {
        "code": "VIP_USDT",
        "title": "VIP NFT –∑–∞ 50 USDT",
        "description": "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ VIP —Å—Ç–∞—Ç—É—Å–∞ (+7%) —á–µ—Ä–µ–∑ –ø–æ–∫—É–ø–∫—É NFT",
        "price_asset": "USDT",
        "price_amount": "50",
        "efhc_amount": None,
        "is_active": True,
        "is_vip": True,
        "is_internal": False,
    },
]

# –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–ª—è EFHC (—Ç—Ä–∏ –∑–Ω–∞–∫–∞) –∏ –¥–µ–Ω–µ–≥ (—Ç–æ–∂–µ fixed decimals, –≥–¥–µ –Ω—É–∂–Ω–æ)
DEC3 = Decimal("0.001")

def _d3(x: Decimal) -> Decimal:
    return x.quantize(DEC3, rounding=ROUND_DOWN)


# ---------------------------------------------------------------------------
# SQL-—Å—Ö–µ–º—ã: shop_items, shop_orders
# ---------------------------------------------------------------------------
CREATE_SHOP_TABLES_SQL = """
-- –¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞: —Ö—Ä–∞–Ω–∏–º –∫–æ–¥, –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Ü–µ–Ω—ã, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ñ–ª–∞–≥–∏ (VIP/–≤–Ω—É—Ç—Ä.)
CREATE TABLE IF NOT EXISTS efhc_core.shop_items (
    id SERIAL PRIMARY KEY,
    code TEXT UNIQUE NOT NULL,
    title TEXT NOT NULL,
    description TEXT NULL,
    price_asset TEXT NOT NULL,      -- "EFHC" | "TON" | "USDT"
    price_amount NUMERIC(30, 3) NOT NULL,
    efhc_amount NUMERIC(30, 3) NULL, -- –î–ª—è EFHC –ø–∞–∫–µ—Ç–æ–≤ ‚Äî —Å–∫–æ–ª—å–∫–æ EFHC –∑–∞—á–∏—Å–ª–∏—Ç—å
    is_active BOOLEAN DEFAULT TRUE,
    is_vip BOOLEAN DEFAULT FALSE,    -- –≠—Ç–æ VIP NFT?
    is_internal BOOLEAN DEFAULT FALSE, -- –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ EFHC?
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now()
);

-- –ó–∞–∫–∞–∑—ã –º–∞–≥–∞–∑–∏–Ω–∞
CREATE TABLE IF NOT EXISTS efhc_core.shop_orders (
    id SERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL,            -- Telegram ID
    item_id INT NOT NULL REFERENCES efhc_core.shop_items(id) ON DELETE RESTRICT,
    status TEXT NOT NULL DEFAULT 'awaiting_payment', -- awaiting_payment|paid|completed|pending_nft_delivery|cancelled
    amount NUMERIC(30, 3) NOT NULL,     -- —Å—Ç–æ–∏–º–æ—Å—Ç—å (–≤ price_asset)
    efhc_amount NUMERIC(30, 3) NULL,    -- –¥–ª—è EFHC –ø–∞–∫–µ—Ç–æ–≤ ‚Äî –æ–±—ä–µ–º EFHC
    price_asset TEXT NOT NULL,          -- "EFHC" | "TON" | "USDT"
    memo TEXT NULL,                     -- –º–µ–º–æ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ (tonapi inject)
    external_tx TEXT NULL,              -- —Å—Å—ã–ª–∫–∞/hash –≤–Ω–µ—à–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now()
);
"""


async def ensure_shop_tables(db: AsyncSession) -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã –º–∞–≥–∞–∑–∏–Ω–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (idempotent). –¢–∞–∫–∂–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç shop_items
    –ø—Ä–µ—Å–µ—Ç–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –≤ –±–∞–∑–µ –ø—É—Å—Ç–æ.
    """
    await db.execute(text(CREATE_SHOP_TABLES_SQL))
    await db.commit()

    # –ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ shop_items
    q = await db.execute(text("SELECT COUNT(*) FROM efhc_core.shop_items"))
    cnt = q.scalar() or 0
    if cnt == 0:
        # –ó–∞—Å–µ–ª–∏–º DEFAULT_ITEMS_PRESET
        for it in DEFAULT_ITEMS_PRESET:
            await db.execute(
                text("""
                    INSERT INTO efhc_core.shop_items(
                        code, title, description, price_asset, price_amount,
                        efhc_amount, is_active, is_vip, is_internal
                    )
                    VALUES (:code, :title, :desc, :asset, :amt, :efhc_amt, :active, :vip, :internal)
                    ON CONFLICT (code) DO NOTHING
                """),
                {
                    "code": it["code"],
                    "title": it["title"],
                    "desc": it.get("description"),
                    "asset": it["price_asset"],
                    "amt": it["price_amount"],
                    "efhc_amt": it["efhc_amount"],
                    "active": it["is_active"],
                    "vip": it["is_vip"],
                    "internal": it["is_internal"],
                },
            )
        await db.commit()


# ---------------------------------------------------------------------------
# Pydantic –º–æ–¥–µ–ª–∏ (–∑–∞–ø—Ä–æ—Å—ã/–æ—Ç–≤–µ—Ç—ã)
# ---------------------------------------------------------------------------
class ShopItem(BaseModel):
    """
    –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–¥–∞—á–µ –≤ /api/shop/config –∏ –≤ –∞–¥–º–∏–Ω–∫–µ.
    """
    id: int
    code: str
    title: str
    description: Optional[str]
    price_asset: str
    price_amount: Decimal
    efhc_amount: Optional[Decimal] = None
    is_active: bool
    is_vip: bool
    is_internal: bool


class ShopItemCreate(BaseModel):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-API.
    """
    code: str = Field(..., description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —Ç–æ–≤–∞—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä EFHC_100_TON")
    title: str
    description: Optional[str] = None
    price_asset: str = Field(..., regex=r"^(EFHC|TON|USDT)$")
    price_amount: Decimal
    efhc_amount: Optional[Decimal] = None
    is_active: bool = True
    is_vip: bool = False
    is_internal: bool = False

    @validator("price_amount")
    def price_positive(cls, v: Decimal) -> Decimal:
        if v <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        return _d3(v)  # –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 3 –∑–Ω–∞–∫–æ–≤

    @validator("efhc_amount")
    def efhc_non_negative(cls, v: Optional[Decimal]) -> Optional[Decimal]:
        if v is not None and v < 0:
            raise ValueError("EFHC amount –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
        return _d3(v) if v is not None else None


class ShopConfigResponse(BaseModel):
    """
    –û—Ç–¥–∞—ë—Ç—Å—è –≤ /api/shop/config ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.
    """
    items: List[ShopItem]
    ton_wallet: Optional[str] = None   # –ê–¥—Ä–µ—Å TON –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    efhc_token_address: Optional[str] = None
    usdt_jetton_address: Optional[str] = None
    memo_hint: str = Field(default="Use memo: tg=<id> code=<item_code> order <item_id>")


class ShopBuyRequest(BaseModel):
    """
    –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞ (—Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞).
    –í–∞–∂–Ω–æ: user_id –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º verify_webapp.
    –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º X-Telegram-ID —Ö–µ–¥–µ—Ä, –Ω–æ —Ç—Ä–µ–±—É–µ–º –∫ –∑–∞–º–µ–Ω–µ –Ω–∞ initData.
    """
    item_code: str


class ShopBuyResponse(BaseModel):
    """
    –û—Ç–≤–µ—Ç –Ω–∞ /api/shop/buy:
      - order_id ‚Äî —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑
      - instructions ‚Äî –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    """
    ok: bool
    order_id: Optional[int] = None
    error: Optional[str] = None
    instructions: Optional[Dict[str, Any]] = None


# ---------------------------------------------------------------------------
# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è/—É—Ç–∏–ª–∏—Ç—ã
# ---------------------------------------------------------------------------
async def _get_user_from_request(request: Request) -> int:
    """
    –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞: –ø–æ–ª—É—á–∞–µ–º Telegram ID –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Telegram-ID.
    –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É Telegram initData (verify_webapp.py).
    """
    tg_id = request.headers.get("X-Telegram-ID")
    if not tg_id or not tg_id.isdigit():
        raise HTTPException(status_code=401, detail="Unauthorized: missing/invalid X-Telegram-ID header")
    return int(tg_id)


def _ensure_admin(request: Request) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—ã–∑–≤–∞–≤—à–∏–π ‚Äî –∞–¥–º–∏–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º X-Telegram-ID == ADMIN_TELEGRAM_ID.
    """
    tg = request.headers.get("X-Telegram-ID")
    if (not tg) or (not tg.isdigit()) or (int(tg) != ADMIN_TELEGRAM_ID):
        raise HTTPException(status_code=403, detail="Forbidden: admin only")


async def _telegram_notify_admin(text: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ Telegram. –ò—Å–ø–æ–ª—å–∑—É–µ–º BOT_TOKEN –∏ ADMIN_TELEGRAM_ID.
    """
    if not TELEGRAM_BOT_TOKEN or not ADMIN_TELEGRAM_ID:
        return  # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": ADMIN_TELEGRAM_ID, "text": text, "parse_mode": "HTML"}
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            await client.post(url, json=payload)
    except Exception:
        # –û—à–∏–±–∫–∏ –Ω–µ —Ñ–∞—Ç–∞–ª—å–Ω—ã –¥–ª—è API
        pass


# ---------------------------------------------------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API —Ä–æ—É—Ç–µ—Ä–∞
# ---------------------------------------------------------------------------
router = APIRouter(prefix="/api", tags=["shop"])


# ---------------------------------------------------------------------------
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç: /api/shop/config ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—à–µ–ª–µ–∫, memo
# ---------------------------------------------------------------------------
@router.get("/shop/config", response_model=ShopConfigResponse)
async def shop_config(
    request: Request,
    db: AsyncSession = Depends(get_session)
) -> ShopConfigResponse:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–∞–≥–∞–∑–∏–Ω–∞:
      - —Å–ø–∏—Å–æ–∫ shop_items (—Ç–æ–ª—å–∫–æ is_active=true)
      - –∞–¥—Ä–µ—Å TON –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (TON_WALLET_ADDRESS)
      - memo –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é "tg=<id> code=<item_code> order <item_id>" (–ø—Ä–∏–º–µ—Ä)
    –î–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ –±–∞–∑—ã (—Ç–∞–±–ª–∏—Ü–∞ shop_items). –ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî —Å–æ–∑–¥–∞—ë—Ç—Å—è —Å–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    """
    await ensure_shop_tables(db)
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    q = await db.execute(
        text("""
            SELECT id, code, title, description, price_asset, price_amount,
                   efhc_amount, is_active, is_vip, is_internal
              FROM efhc_core.shop_items
             WHERE is_active = TRUE
             ORDER BY id ASC
        """)
    )
    rows = q.fetchall() or []
    items: List[ShopItem] = []
    for r in rows:
        items.append(
            ShopItem(
                id=r[0],
                code=r[1],
                title=r[2],
                description=r[3],
                price_asset=r[4],
                price_amount=Decimal(r[5]),
                efhc_amount=Decimal(r[6]) if r[6] is not None else None,
                is_active=bool(r[7]),
                is_vip=bool(r[8]),
                is_internal=bool(r[9]),
            )
        )
    return ShopConfigResponse(
        items=items,
        ton_wallet=TON_WALLET_ADDRESS or None,
        efhc_token_address=getattr(settings, "EFHC_TOKEN_ADDRESS", None),
        usdt_jetton_address=getattr(settings, "USDT_JETTON_ADDRESS", None),
        memo_hint="Use memo: tg=<id> code=<item_code> order <item_id>"
    )


# ---------------------------------------------------------------------------
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç: /api/shop/buy ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞/–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
# ---------------------------------------------------------------------------
@router.post("/shop/buy", response_model=ShopBuyResponse)
async def shop_buy(
    request: Request,
    payload: ShopBuyRequest,
    db: AsyncSession = Depends(get_session)
) -> ShopBuyResponse:
    """
    –°–æ–∑–¥–∞—ë—Ç –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞ –∏–∑ shop_items –ø–æ item_code.
    –õ–æ–≥–∏–∫–∞:
      - –ò—â–µ–º item –ø–æ –∫–æ–¥—É.
      - –ï—Å–ª–∏ price_asset == EFHC –∏ is_internal == True ‚Üí –ø–æ–∫—É–ø–∫–∞ –∑–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å EFHC:
            ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö–≤–∞—Ç–∞–µ—Ç EFHC.
            ‚Ä¢ –°–ø–∏—Å—ã–≤–∞–µ–º EFHC.
            ‚Ä¢ –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä is_vip == True ‚Üí —Å—Ç–∞–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é VIP.
            ‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º shop_orders —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'completed'.
            ‚Ä¢ –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞.
      - –ï—Å–ª–∏ price_asset == TON/USDT ‚Üí —Å–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'awaiting_payment'
            ‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º memo: "tg=<user_id> code=<item_code> order <item_id>"
            ‚Ä¢ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–∫–æ—à–µ–ª–µ–∫/–∞–¥—Ä–µ—Å/–º–µ–º–æ/—Å—É–º–º–∞).
            ‚Ä¢ –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞.
      - –í–æ–∑–≤—Ä–∞—â–∞–µ–º { ok: true, order_id, instructions: {...} }.
    """
    user_id = await _get_user_from_request(request)
    await ensure_shop_tables(db)

    # –ù–∞–π–¥–µ–º —Ç–æ–≤–∞—Ä –ø–æ –∫–æ–¥—É
    q_item = await db.execute(
        text("""
            SELECT id, code, title, description, price_asset, price_amount,
                   efhc_amount, is_active, is_vip, is_internal
              FROM efhc_core.shop_items
             WHERE code = :c
             LIMIT 1
        """),
        {"c": payload.item_code.strip().upper()}
    )
    row = q_item.fetchone()
    if not row:
        return ShopBuyResponse(ok=False, error="Item not found")
    if not row[7]:
        return ShopBuyResponse(ok=False, error="Item inactive")

    item_id = row[0]
    code = row[1]
    title = row[2]
    price_asset = row[4]
    price_amount = _d3(Decimal(row[5]))
    efhc_amount = Decimal(row[6]) if row[6] is not None else None
    is_vip = bool(row[8])
    is_internal = bool(row[9])

    # –ï—Å–ª–∏ –ø–æ–∫—É–ø–∫–∞ –∑–∞ EFHC (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è)
    if price_asset == "EFHC" and is_internal:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ EFHC —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —ç—Ç–æ–≥–æ ensure user)
        await db.execute(
            text("""
                INSERT INTO efhc_core.users (telegram_id)
                VALUES (:tg)
                ON CONFLICT(telegram_id) DO NOTHING;
            """),
            {"tg": user_id}
        )
        await db.execute(
            text("""
                INSERT INTO efhc_core.balances (telegram_id)
                VALUES (:tg)
                ON CONFLICT(telegram_id) DO NOTHING;
            """),
            {"tg": user_id}
        )
        # –ü–æ–ª—É—á–∏–º –±–∞–ª–∞–Ω—Å EFHC
        q_bal = await db.execute(
            text("""
                SELECT efhc FROM efhc_core.balances
                 WHERE telegram_id = :tg
            """),
            {"tg": user_id}
        )
        efhc_balance = Decimal(q_bal.scalar() or 0)

        if efhc_balance < price_amount:
            return ShopBuyResponse(ok=False, error="Insufficient EFHC balance")

        # –°–ø–∏—Å—ã–≤–∞–µ–º EFHC
        new_balance = _d3(efhc_balance - price_amount)
        await db.execute(
            text("""
                UPDATE efhc_core.balances
                   SET efhc = :new_bal
                 WHERE telegram_id = :tg
            """),
            {"new_bal": str(new_balance), "tg": user_id}
        )

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑: status='completed', efhc_amount = None
        # –ï—Å–ª–∏ —ç—Ç–æ VIP ‚Äî –æ—Ç–º–µ—Ç–∏–º VIP –≤ user_vip
        await db.execute(
            text("""
                INSERT INTO efhc_core.shop_orders (user_id, item_id, status, amount, efhc_amount, price_asset, memo)
                VALUES (:u, :item, 'completed', :amt, :efhc, 'EFHC', :memo)
            """),
            {
                "u": user_id,
                "item": item_id,
                "amt": str(price_amount),
                "efhc": str(efhc_amount) if efhc_amount is not None else None,
                "memo": f"tg={user_id} code={code} order {item_id}"
            }
        )

        if is_vip:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º VIP —Ñ–ª–∞–≥
            await db.execute(
                text("""
                    INSERT INTO efhc_core.user_vip (telegram_id)
                    VALUES (:tg)
                    ON CONFLICT (telegram_id) DO NOTHING
                """),
                {"tg": user_id}
            )

        await db.commit()

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        await _telegram_notify_admin(
            text=(
                f"üõí <b>–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø–æ–∫—É–ø–∫–∞ –∑–∞ EFHC (completed)</b>\n"
                f"User: <code>{user_id}</code>\n"
                f"Item: <b>{title}</b> (code={code})\n"
                f"Price: {price_amount} EFHC\n"
                f"{'VIP granted' if is_vip else ''}"
            )
        )

        return ShopBuyResponse(
            ok=True,
            order_id=None,  # –í –¥–∞–Ω–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ –∑–∞–∫–∞–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω, –≤–æ–∑–≤—Ä–∞—Ç–∏–º None (–∏–ª–∏ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å ID)
            instructions={"status": "completed", "message": "Purchase completed with internal EFHC balance"}
        )

    # –ò–Ω–∞—á–µ ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ "awaiting_payment" –∏ –æ—Ç–¥–∞—ë–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è TON/USDT
    memo = f"tg={user_id} code={code} order {item_id}"
    await db.execute(
        text("""
            INSERT INTO efhc_core.shop_orders (user_id, item_id, status, amount, efhc_amount, price_asset, memo)
            VALUES (:u, :item, 'awaiting_payment', :amt, :efhc, :asset, :memo)
            RETURNING id
        """),
        {
            "u": user_id,
            "item": item_id,
            "amt": str(price_amount),
            "efhc": str(efhc_amount) if efhc_amount is not None else None,
            "asset": price_asset,
            "memo": memo
        }
    )
    q_newid = await db.execute(text("SELECT LASTVAL()"))
    new_order_id = int(q_newid.scalar() or 0)

    await db.commit()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await _telegram_notify_admin(
        text=(
            f"üõí <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –º–∞–≥–∞–∑–∏–Ω–µ</b>\n"
            f"User: <code>{user_id}</code>\n"
            f"Item: <b>{title}</b> (code={code})\n"
            f"Price: {price_amount} {price_asset}\n"
            f"Order ID: {new_order_id}\n"
            f"Memo: <code>{memo}</code>\n"
            f"Status: awaiting_payment"
        )
    )

    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –í —Å–ª—É—á–∞–µ TON: –∞–¥—Ä–µ—Å TON_WALLET_ADDRESS, memo, —Å—É–º–º–∞ = price_amount
    # –í —Å–ª—É—á–∞–µ USDT: –∞–¥—Ä–µ—Å EFHC_TOKEN_ADDRESS/USDT_JETTON_ADDRESS ‚Äî –≤—Ä—è–¥ –ª–∏ (–æ–±—ã—á–Ω–æ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å). –û—Å—Ç–∞–≤–∏–º –µ–¥–∏–Ω—ã–π –∞–¥—Ä–µ—Å TON.
    instr = {
        "pay_asset": price_asset,
        "amount": str(price_amount),
        "address": TON_WALLET_ADDRESS,
        "memo": memo,
        "order_id": new_order_id,
        "note": "After successful blockchain payment, your order will be processed automatically."
    }

    return ShopBuyResponse(ok=True, order_id=new_order_id, instructions=instr)


# ---------------------------------------------------------------------------
# –ê–¥–º–∏–Ω —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: —Ç–æ–≤–∞—Ä—ã, –∑–∞–∫–∞–∑—ã, —ç–∫—Å–ø–æ—Ä—Ç
# ---------------------------------------------------------------------------
@router.get("/admin/shop/items", response_model=List[ShopItem])
async def admin_list_shop_items(
    request: Request,
    db: AsyncSession = Depends(get_session)
) -> List[ShopItem]:
    """
    –ê–¥–º–∏–Ω: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ).
    """
    _ensure_admin(request)
    await ensure_shop_tables(db)
    q = await db.execute(
        text("""
            SELECT id, code, title, description, price_asset, price_amount,
                   efhc_amount, is_active, is_vip, is_internal
              FROM efhc_core.shop_items
             ORDER BY id ASC
        """)
    )
    rows = q.fetchall() or []
    res: List[ShopItem] = []
    for r in rows:
        res.append(
            ShopItem(
                id=r[0],
                code=r[1],
                title=r[2],
                description=r[3],
                price_asset=r[4],
                price_amount=Decimal(r[5]),
                efhc_amount=Decimal(r[6]) if r[6] is not None else None,
                is_active=bool(r[7]),
                is_vip=bool(r[8]),
                is_internal=bool(r[9]),
            )
        )
    return res


@router.post("/admin/shop/items", response_model=Dict[str, Any])
async def admin_create_or_update_item(
    request: Request,
    payload: ShopItemCreate,
    db: AsyncSession = Depends(get_session)
) -> Dict[str, Any]:
    """
    –ê–¥–º–∏–Ω: —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ –µ–≥–æ 'code' (upsert).
    """
    _ensure_admin(request)
    await ensure_shop_tables(db)

    # Upsert –ø–æ code
    await db.execute(
        text("""
            INSERT INTO efhc_core.shop_items(
                code, title, description, price_asset, price_amount,
                efhc_amount, is_active, is_vip, is_internal
            )
            VALUES (:code, :title, :desc, :asset, :amt, :efhc, :active, :vip, :internal)
            ON CONFLICT (code) DO UPDATE
                SET title = EXCLUDED.title,
                    description = EXCLUDED.description,
                    price_asset = EXCLUDED.price_asset,
                    price_amount = EXCLUDED.price_amount,
                    efhc_amount = EXCLUDED.efhc_amount,
                    is_active = EXCLUDED.is_active,
                    is_vip = EXCLUDED.is_vip,
                    is_internal = EXCLUDED.is_internal,
                    updated_at = now()
        """),
        {
            "code": payload.code.strip().upper(),
            "title": payload.title,
            "desc": payload.description,
            "asset": payload.price_asset.strip().upper(),
            "amt": str(_d3(payload.price_amount)),
            "efhc": str(_d3(payload.efhc_amount)) if payload.efhc_amount is not None else None,
            "active": payload.is_active,
            "vip": payload.is_vip,
            "internal": payload.is_internal,
        }
    )
    await db.commit()
    return {"ok": True}


@router.delete("/admin/shop/items/{code}", response_model=Dict[str, Any])
async def admin_delete_item(
    code: str,
    request: Request,
    db: AsyncSession = Depends(get_session)
) -> Dict[str, Any]:
    """
    –ê–¥–º–∏–Ω: —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ code (–º–æ–∂–Ω–æ –∏ —Ñ–ª–∞–≥ is_active=false –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è).
    """
    _ensure_admin(request)
    await db.execute(
        text("DELETE FROM efhc_core.shop_items WHERE code = :c"),
        {"c": code.strip().upper()}
    )
    await db.commit()
    return {"ok": True}


@router.get("/admin/shop/orders", response_model=List[Dict[str, Any]])
async def admin_list_orders(
    request: Request,
    status_filter: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (awaiting_payment|paid|...)"),
    db: AsyncSession = Depends(get_session)
) -> List[Dict[str, Any]]:
    """
    –ê–¥–º–∏–Ω: —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –º–∞–≥–∞–∑–∏–Ω (–≤–æ–∑–º–æ–∂–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É).
    """
    _ensure_admin(request)
    await ensure_shop_tables(db)
    if status_filter:
        q = await db.execute(
            text("""
                SELECT o.id, o.user_id, o.item_id, o.status, o.amount, o.efhc_amount, o.price_asset, o.memo,
                       o.external_tx, o.created_at, o.updated_at,
                       i.code, i.title
                  FROM efhc_core.shop_orders o
                  JOIN efhc_core.shop_items  i ON i.id = o.item_id
                 WHERE o.status = :s
                 ORDER BY o.created_at DESC
            """),
            {"s": status_filter},
        )
    else:
        q = await db.execute(
            text("""
                SELECT o.id, o.user_id, o.item_id, o.status, o.amount, o.efhc_amount, o.price_asset, o.memo,
                       o.external_tx, o.created_at, o.updated_at,
                       i.code, i.title
                  FROM efhc_core.shop_orders o
                  JOIN efhc_core.shop_items  i ON i.id = o.item_id
                 ORDER BY o.created_at DESC
            """)
        )
    rows = q.fetchall() or []
    res: List[Dict[str, Any]] = []
    for r in rows:
        res.append({
            "id": r[0],
            "user_id": r[1],
            "item_id": r[2],
            "status": r[3],
            "amount": float(r[4]),
            "efhc_amount": float(r[5]) if r[5] is not None else None,
            "price_asset": r[6],
            "memo": r[7],
            "external_tx": r[8],
            "created_at": r[9].isoformat() if r[9] else None,
            "updated_at": r[10].isoformat() if r[10] else None,
            "item_code": r[11],
            "item_title": r[12],
        })
    return res


@router.get("/admin/shop/orders/export")
async def admin_export_orders(
    request: Request,
    format: str = Query("csv", regex=r"^(csv|json)$", description="–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞: csv | json"),
    db: AsyncSession = Depends(get_session)
) -> Response:
    """
    –ê–¥–º–∏–Ω: —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ (CSV/JSON).
    –ü–æ–ª—è:
        id, user_id, item_code, item_title, status, price_asset, amount, efhc_amount, memo, external_tx, created_at, updated_at
    """
    _ensure_admin(request)
    await ensure_shop_tables(db)

    q = await db.execute(
        text("""
            SELECT o.id, o.user_id, i.code, i.title, o.status, o.price_asset, o.amount, o.efhc_amount,
                   o.memo, o.external_tx, o.created_at, o.updated_at
              FROM efhc_core.shop_orders o
              JOIN efhc_core.shop_items  i ON i.id = o.item_id
             ORDER BY o.created_at DESC
        """)
    )
    rows = q.fetchall() or []

    data = []
    for r in rows:
        data.append({
            "id": r[0],
            "user_id": r[1],
            "item_code": r[2],
            "item_title": r[3],
            "status": r[4],
            "price_asset": r[5],
            "amount": float(r[6]),
            "efhc_amount": float(r[7]) if r[7] is not None else None,
            "memo": r[8],
            "external_tx": r[9],
            "created_at": r[10].isoformat() if r[10] else None,
            "updated_at": r[11].isoformat() if r[11] else None,
        })

    if format == "json":
        return Response(
            content=json.dumps(data, ensure_ascii=False, indent=2),
            media_type="application/json",
            status_code=200,
        )

    # CSV
    out = io.StringIO()
    writer = csv.DictWriter(
        out,
        fieldnames=[
            "id", "user_id", "item_code", "item_title", "status", "price_asset", "amount",
            "efhc_amount", "memo", "external_tx", "created_at", "updated_at"
        ]
    )
    writer.writeheader()
    for row in data:
        writer.writerow(row)

    return Response(
        content=out.getvalue(),
        media_type="text/csv",
        headers={"Content-Disposition": "attachment; filename=orders.csv"},
        status_code=200,
    )


# ---------------------------------------------------------------------------
# –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥–∞–º–∏ (—Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã):
# ---------------------------------------------------------------------------
#
# 1) ton_integration.py:
#    - –†–µ–∞–ª–∏–∑—É–µ—Ç watcher, –∫–æ—Ç–æ—Ä—ã–π —á–∏—Ç–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è TonAPI.
#    - –ï—Å–ª–∏ –≤ –ø–ª–∞—Ç–µ–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç memo: "tg=<id> code=<item_code> order <item_id>", —Ç–æ
#      –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ shop_orders:
#         ‚Ä¢ –î–ª—è EFHC-–ø–∞–∫–µ—Ç–æ–≤ ‚Üí –Ω–∞—á–∏—Å–ª—è–µ—Ç EFHC, —Å—Ç–∞—Ç—É—Å 'completed'.
#         ‚Ä¢ –î–ª—è VIP_TON/VIP_USDT ‚Üí —Å—Ç–∞—Ç—É—Å 'pending_nft_delivery', —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞.
#
# 2) referrals_routes.py:
#    - –æ—Ç–¥–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ. —Å–∏—Å—Ç–µ–º—ã:
#      GET /api/referrals?user_id=...
#      (–ø–æ–¥–∫–ª—é—á–µ–Ω–æ —Ä–∞–Ω–µ–µ: –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç total, active, bonus_kwh, —É—Ä–æ–≤–µ–Ω—å, —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)
#
# 3) panels_routes.py:
#    - –ø–æ–∫—É–ø–∫–∞ –ø–∞–Ω–µ–ª–µ–π –∑–∞ EFHC (—Ü–µ–Ω–∞ = EFHC 100, –ª–∏–º–∏—Ç 1000 –∞–∫—Ç–∏–≤–Ω—ã—Ö).
#    - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è 0.598 –∏–ª–∏ 0.64 kWh –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç VIP: scheduler.py.
#
# 4) ranks_routes.py:
#    - —Ä–µ–π—Ç–∏–Ω–≥ –æ–±—â–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –ø–∞–Ω–µ–ª–∏) –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã (—Ç–æ–ø 100).
#
# 5) exchange_routes.py:
#    - –æ–±–º–µ–Ω kWh ‚Üí EFHC (1:1).
#
# 6) admin-–ø–∞–Ω–µ–ª—å:
#    - —á–∏—Ç–∞–µ—Ç shop_items –∏ shop_orders (—á–µ—Ä–µ–∑ /admin/shop/... —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã).
#    - –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä–∞–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞ (—Å–æ–∑–¥–∞–≤–∞—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è—Ç—å),
#      –∞ —Ç–∞–∫–∂–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã.
#
# 7) –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Telegram –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:
#    - —Å–º. _telegram_notify_admin: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –∏ –ø—Ä–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–æ–∫—É–ø–∫–µ EFHC/VIP.
#
# –í—Å—ë –≤—ã—à–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—à–µ–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–µ:
#   ‚Ä¢ EFHC –∏ kWh ‚Äî —Ä–∞–∑–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã, –æ–±–º–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É.
#   ‚Ä¢ VIP –¥–æ–±–∞–≤–ª—è–µ—Ç +7% –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–µ–π (scheduler.py).
#   ‚Ä¢ –õ–∏–º–∏—Ç 1000 –ø–∞–Ω–µ–ª–µ–π, –∞—Ä—Ö–∏–≤ —á–µ—Ä–µ–∑ 180 –¥–Ω–µ–π.
#   ‚Ä¢ –ü–æ–∫—É–ø–∫–∞ VIP NFT: –∑–∞ EFHC (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π), –∑–∞ TON/USDT (–∏–Ω–≤–æ–π—Å).
#   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Shop: —Ä–∞—Å—à–∏—Ä—è–µ–º—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç (shop_items), —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω API.
#
# –í–æ–ø—Ä–æ—Å—ã/–†–∞—Å—à–∏—Ä–µ–Ω–∏—è:
#   - –ù—É–∂–Ω–æ –ª–∏ –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞—è–≤–∫—É "withdraw EFHC" –∫–∞–∫ –∑–∞–∫–∞–∑? (–ú–æ–∂–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π "withdrawals")
# ------------------------------------------------------------------------------------------------
