# üìÇ backend/app/shop_routes.py ‚Äî –º–æ–¥—É–ª—å –ø–æ–∫—É–ø–æ–∫ (Shop) EFHC/VIP/NFT/–ü–∞–Ω–µ–ª–∏ (–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø, FixPack v1)
# -----------------------------------------------------------------------------
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
#   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª Shop:
#       - –ü–æ–∫—É–ø–∫–∞ EFHC –∑–∞ TON/USDT (–ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî EFHC ‚Üí user, —Å–ø–∏—Å–∞–Ω–∏–µ —Å –ë–∞–Ω–∫–∞).
#       - –ü–æ–∫—É–ø–∫–∞ VIP (–∑–∞ TON/USDT) ‚Äî ‚ö†Ô∏è —Å—Ç–∞—Ç—É—Å VIP –ù–ï –≤–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é!
#           ‚Üí –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞—ë—Ç—Å—è manual-–∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–¥–∞—á—É VIP NFT. VIP –≤–∫–ª—é—á–∏—Ç—Å—è
#             –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ NFT –æ–∫–∞–∂–µ—Ç—Å—è –≤ –∫–æ—à–µ–ª—å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±—É–¥–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω
#             –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 00:00). –î—Ä—É–≥–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è VIP –Ω–µ—Ç.
#       - –ü–æ–∫—É–ø–∫–∞ VIP NFT (–∑–∞ TON/USDT): –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî —Å–æ–∑–¥–∞—ë—Ç—Å—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä—É—á–Ω—É—é –≤—ã–¥–∞—á—É NFT.
#       - –ü–æ–∫—É–ø–∫–∞ –ø–∞–Ω–µ–ª–µ–π –∑–∞ EFHC (+ –±–æ–Ω—É—Å–Ω—ã–µ EFHC): —Å–ø–∏—Å–∞–Ω–∏–µ EFHC/bonus_EFHC user ‚Üí –ë–∞–Ω–∫, —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π.
#   ‚Ä¢ –ê–¥–º–∏–Ω-–æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –∑–∞–∫–∞–∑–∞–º Shop: —Å–ø–∏—Å–æ–∫, approve/reject/cancel, —Ä—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã.
#   ‚Ä¢ –í—Å–µ –¥–≤–∏–∂–µ–Ω–∏—è EFHC ‚Äî —Å—Ç—Ä–æ–≥–æ —á–µ—Ä–µ–∑ –ë–∞–Ω–∫ (ID=362746228) –∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö.
#
# –í–∞–∂–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞:
#   ‚Ä¢ 1 EFHC = 1 kWh (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –µ–¥–∏–Ω–∏—Ü–∞ —É—á—ë—Ç–∞).
#   ‚Ä¢ –ö—É—Ä—Å—ã TON/USDT –≤–Ω—É—Ç—Ä–∏ Shop –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø–ª–∞—Ç—ã EFHC/VIP/NFT ‚Äî —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏
#     —Å—É–º–º–∞/–∞–∫—Ç–∏–≤ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞/–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏. EFHC –≤–Ω—É—Ç—Ä–∏ —Å–∏—Å—Ç–µ–º—ã ‚Äî –±–µ–∑ –∫—É—Ä—Å–æ–≤.
#   ‚Ä¢ –ü–æ–∫—É–ø–∫–∞ EFHC: –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã TON/USDT ‚Üí —Å–ø–∏—Å–∞–Ω–∏–µ EFHC —Å –ë–∞–Ω–∫–∞ ‚Üí –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
#   ‚Ä¢ –ü–æ–∫—É–ø–∫–∞ VIP –∏–ª–∏ VIP NFT: –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã ‚Äî —Å–æ–∑–¥–∞—ë—Ç—Å—è manual-–∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–¥–∞—á—É VIP NFT.
#       ‚ö†Ô∏è –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ VIP –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –¢–û–õ–¨–ö–û –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ—à–µ–ª—å–∫–æ–≤ (00:00)
#          –Ω–∞ –Ω–∞–ª–∏—á–∏–µ NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏ EFHC. –ù–∏–∫–∞–∫–æ–≥–æ —Ä—É—á–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è VIP –Ω–∏–≥–¥–µ –Ω–µ—Ç.
#   ‚Ä¢ –ü–∞–Ω–µ–ª–∏ (Panels): –ø–æ–∫—É–ø–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞ EFHC/bonus_EFHC:
#       - bonus_EFHC –º–æ–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –¢–û–õ–¨–ö–û –Ω–∞ –ø–∞–Ω–µ–ª–∏.
#       - –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–∞–Ω–µ–ª–∏ bonus_EFHC —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –Ω–∞ –±–æ–Ω—É—Å-—Å—á—ë—Ç –ë–∞–Ω–∫–∞ EFHC.
#       - –û—Å—Ç–∞—Ç–æ–∫ (–µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–æ–Ω—É—Å–Ω—ã—Ö) —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è EFHC —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Ö–æ–¥–∏—Ç –Ω–∞ —Å—á—ë—Ç –ë–∞–Ω–∫–∞ EFHC.
#       - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –±–æ–ª–µ–µ 1000 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π.
#       - –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–∞–Ω–µ–ª–∏ ‚Äî –í–°–ï–ì–î–ê 180 –¥–Ω–µ–π. –ê—Ä—Ö–∏–≤–∞—Ü–∏—è ‚Äî –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º.
#
# –¢–∞–±–ª–∏—Ü—ã (DDL –∑–¥–µ—Å—å –∂–µ, idempotent):
#   efhc_core.shop_orders:
#       - id BIGSERIAL PK
#       - telegram_id BIGINT
#       - order_type TEXT CHECK IN ('efhc','vip','nft')
#       - efhc_amount NUMERIC(30,3) NULL
#       - pay_asset TEXT
#       - pay_amount NUMERIC(30,3)
#       - ton_address TEXT
#       - status TEXT CHECK IN ('pending','paid','completed','rejected','canceled','failed')
#       - idempotency_key TEXT UNIQUE
#       - tx_hash TEXT
#       - admin_id BIGINT
#       - comment TEXT
#       - created_at, paid_at, completed_at, updated_at TIMESTAMPTZ
#
#   efhc_core.manual_nft_requests:
#       - id BIGSERIAL PK
#       - telegram_id BIGINT
#       - wallet_address TEXT
#       - request_type TEXT DEFAULT 'vip_nft'
#       - order_id BIGINT NULL REFERENCES shop_orders(id)
#       - status TEXT CHECK IN ('open','processed','canceled') DEFAULT 'open'
#       - created_at TIMESTAMPTZ DEFAULT now()
#
#   efhc_core.panels:
#       - telegram_id BIGINT
#       - active BOOL
#       - activated_at TIMESTAMPTZ
#       - (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) expires_at TIMESTAMPTZ ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –º–æ–¥–µ–ª–∏
#
# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
#   ‚Ä¢ database.get_session ‚Äî —Å–µ—Å—Å–∏—è –ë–î.
#   ‚Ä¢ config.get_settings ‚Äî –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (schema, admin ID –∏ –¥—Ä.).
#   ‚Ä¢ models.User, Balance ‚Äî ORM-–º–æ–¥–µ–ª–∏.
#   ‚Ä¢ efhc_transactions: BANK_TELEGRAM_ID, credit_user_from_bank, debit_user_to_bank.
#
# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ UI:
#   ‚Ä¢ Frontend (React+Tailwind) –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑—ã (Shop).
#   ‚Ä¢ –û–ø–ª–∞—Ç–∞ TON/USDT ‚Äî —Å–Ω–∞—Ä—É–∂–∏ (–∫–ª–∏–µ–Ω—Ç/–ø—Ä–æ–≤–∞–π–¥–µ—Ä). –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Äî webhook/–∞–¥–º–∏–Ω.
#   ‚Ä¢ –ü–∞–Ω–µ–ª–∏ ‚Äî –ø–æ–∫—É–ø–∫–∞ —Å–ø–∏—Å—ã–≤–∞–µ—Ç EFHC/bonus_EFHC, —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å–∏ –ø–∞–Ω–µ–ª–µ–π.
#
# –í–∞–∂–Ω–æ:
#   ‚Ä¢ EFHC ‚Äî —á–µ—Ä–µ–∑ –ë–∞–Ω–∫, –≤—Å—ë –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è.
#   ‚Ä¢ –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ -> —Ç—Ä–∏ –∑–Ω–∞–∫–∞ –≤–Ω–∏–∑ (ROUND_DOWN).
#   ‚Ä¢ VIP = 1.07 –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –≤ 00:30, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–º NFT (00:00).
# -----------------------------------------------------------------------------

from __future__ import annotations

import logging
from decimal import Decimal, ROUND_DOWN
from typing import Optional, List, Dict, Any

from fastapi import APIRouter, Depends, Header, HTTPException, Query, Path
from pydantic import BaseModel, Field, condecimal
from sqlalchemy import text, select
from sqlalchemy.ext.asyncio import AsyncSession

from .database import get_session
from .config import get_settings
from .models import User, Balance
from .efhc_transactions import (
    BANK_TELEGRAM_ID,
    credit_user_from_bank,   # –±–∞–Ω–∫ -> user EFHC
    debit_user_to_bank,      # user -> –±–∞–Ω–∫ EFHC
)

# -----------------------------------------------------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ª–æ–≥–≥–µ—Ä
# -----------------------------------------------------------------------------
router = APIRouter()
settings = get_settings()

logger = logging.getLogger("efhc.shop")
if not logger.handlers:
    import sys
    h = logging.StreamHandler(sys.stdout)
    h.setFormatter(logging.Formatter("[%(asctime)s][%(levelname)s] %(name)s: %(message)s"))
    logger.addHandler(h)
logger.setLevel(logging.INFO)

# -----------------------------------------------------------------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã/—É—Ç–∏–ª–∏—Ç—ã
# -----------------------------------------------------------------------------
DEC3 = Decimal("0.001")
VIP_MULTIPLIER = Decimal("1.07")  # VIP/NFT –±–æ–Ω—É—Å = +7%
PANEL_PRICE_EFHC = Decimal(getattr(settings, "PANEL_PRICE_EFHC", "100.000"))  # 100 EFHC –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
PANELS_PER_USER_LIMIT = int(getattr(settings, "PANELS_PER_USER_LIMIT", 1000))  # –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
PANEL_LIFETIME_DAYS = int(getattr(settings, "PANEL_LIFETIME_DAYS", 180))       # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ 180 –¥–Ω–µ–π

def d3(x: Decimal) -> Decimal:
    """
    –û–∫—Ä—É–≥–ª—è–µ—Ç Decimal –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –≤–Ω–∏–∑ (ROUND_DOWN).
    """
    return x.quantize(DEC3, rounding=ROUND_DOWN)

# -----------------------------------------------------------------------------
# DDL: shop_orders / manual_nft_requests (idempotent)
# -----------------------------------------------------------------------------
SHOP_ORDERS_CREATE_SQL = """
CREATE TABLE IF NOT EXISTS {schema}.shop_orders (
    id BIGSERIAL PRIMARY KEY,
    telegram_id BIGINT NOT NULL,
    order_type TEXT NOT NULL CHECK (order_type IN ('efhc','vip','nft')),
    efhc_amount NUMERIC(30,3),
    pay_asset TEXT,
    pay_amount NUMERIC(30,3),
    ton_address TEXT,
    status TEXT NOT NULL CHECK (status IN ('pending','paid','completed','rejected','canceled','failed')) DEFAULT 'pending',
    idempotency_key TEXT UNIQUE,
    tx_hash TEXT,
    admin_id BIGINT,
    comment TEXT,
    created_at TIMESTAMPTZ DEFAULT now(),
    paid_at TIMESTAMPTZ,
    completed_at TIMESTAMPTZ,
    updated_at TIMESTAMPTZ DEFAULT now()
);
"""

MANUAL_NFT_REQUESTS_CREATE_SQL = """
CREATE TABLE IF NOT EXISTS {schema}.manual_nft_requests (
    id BIGSERIAL PRIMARY KEY,
    telegram_id BIGINT NOT NULL,
    wallet_address TEXT,
    request_type TEXT NOT NULL DEFAULT 'vip_nft',
    order_id BIGINT REFERENCES {schema}.shop_orders(id) ON DELETE SET NULL,
    status TEXT NOT NULL CHECK (status IN ('open','processed','canceled')) DEFAULT 'open',
    created_at TIMESTAMPTZ DEFAULT now()
);
"""

async def ensure_shop_tables(db: AsyncSession) -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã shop_orders –∏ manual_nft_requests –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    """
    await db.execute(text(SHOP_ORDERS_CREATE_SQL.format(schema=settings.DB_SCHEMA_CORE)))
    await db.execute(text(MANUAL_NFT_REQUESTS_CREATE_SQL.format(schema=settings.DB_SCHEMA_CORE)))
    await db.commit()

# -----------------------------------------------------------------------------
# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
# -----------------------------------------------------------------------------
async def require_user(x_telegram_id: Optional[str]) -> int:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Telegram-Id, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if not x_telegram_id or not x_telegram_id.isdigit():
        raise HTTPException(status_code=400, detail="X-Telegram-Id header required")
    return int(x_telegram_id)

async def require_admin(
    db: AsyncSession,
    x_telegram_id: Optional[str],
) -> int:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞: —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω (config.ADMIN_TELEGRAM_ID) –∏–ª–∏ –ë–∞–Ω–∫ (BANK_TELEGRAM_ID).
    """
    if not x_telegram_id or not x_telegram_id.isdigit():
        raise HTTPException(status_code=400, detail="X-Telegram-Id header required")

    tg = int(x_telegram_id)
    if settings.ADMIN_TELEGRAM_ID and tg == int(settings.ADMIN_TELEGRAM_ID):
        return tg
    if tg == BANK_TELEGRAM_ID:
        return tg

    raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")

# -----------------------------------------------------------------------------
# Pydantic-—Å—Ö–µ–º—ã
# -----------------------------------------------------------------------------
class CreateEFHCOrderRequest(BaseModel):
    """
    –ó–∞–∫–∞–∑ –Ω–∞ –ø–æ–∫—É–ø–∫—É EFHC –∑–∞ TON/USDT.
    """
    efhc_amount: condecimal(gt=0, max_digits=30, decimal_places=3) = Field(..., description="–°–∫–æ–ª—å–∫–æ EFHC –∫—É–ø–∏—Ç—å")
    pay_asset: str = Field(..., description="–ß–µ–º –ø–ª–∞—Ç–∏—Ç: 'TON' –∏–ª–∏ 'USDT'")
    pay_amount: condecimal(gt=0, max_digits=30, decimal_places=3) = Field(..., description="–°–∫–æ–ª—å–∫–æ –∑–∞–ø–ª–∞—Ç–∏–ª –≤–æ –≤–Ω–µ—à–Ω–µ–º –∞–∫—Ç–∏–≤–µ (–¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞)")
    ton_address: Optional[str] = Field(None, description="–ê–¥—Ä–µ—Å TON –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)")
    idempotency_key: Optional[str] = Field(None, description="–ö–ª—é—á –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏")
    telegram_id: Optional[int] = Field(None, description="Telegram ID (–¥–ª—è —Å–≤–µ—Ä–∫–∏)")

class CreateVIPOrderRequest(BaseModel):
    """
    –ó–∞–∫–∞–∑ –Ω–∞ –ø–æ–∫—É–ø–∫—É VIP (–∑–∞ TON/USDT).
    ‚ö†Ô∏è –í–ê–ñ–ù–û: –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –º—ã –ù–ï –≤–∫–ª—é—á–∞–µ–º VIP –Ω–∞–ø—Ä—è–º—É—é.
      –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞—ë—Ç—Å—è manual-–∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–¥–∞—á—É VIP NFT.
      VIP –≤–∫–ª—é—á–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ NFT –æ–∫–∞–∂–µ—Ç—Å—è –≤ –∫–æ—à–µ–ª—å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏
      –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (00:00) —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç.
    """
    pay_asset: str = Field(..., description="–ß–µ–º –ø–ª–∞—Ç–∏—Ç: 'TON' –∏–ª–∏ 'USDT'")
    pay_amount: condecimal(gt=0, max_digits=30, decimal_places=3) = Field(..., description="–°–∫–æ–ª—å–∫–æ –∑–∞–ø–ª–∞—Ç–∏–ª")
    ton_address: Optional[str] = Field(None, description="TON-–∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫—É–¥–∞ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω NFT)")
    idempotency_key: Optional[str] = Field(None, description="–ö–ª—é—á –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏")
    telegram_id: Optional[int] = Field(None, description="Telegram ID (–¥–ª—è —Å–≤–µ—Ä–∫–∏)")

class CreateNFTOrderRequest(BaseModel):
    """
    –ó–∞–∫–∞–∑ –Ω–∞ –ø–æ–∫—É–ø–∫—É VIP NFT (–∑–∞ TON/USDT).
    –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞—ë—Ç—Å—è manual –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–¥–∞—á—É NFT (request_type='vip_nft').
    """
    pay_asset: str = Field(..., description="–ß–µ–º –ø–ª–∞—Ç–∏—Ç: 'TON' –∏–ª–∏ 'USDT'")
    pay_amount: condecimal(gt=0, max_digits=30, decimal_places=3) = Field(..., description="–°–∫–æ–ª—å–∫–æ –∑–∞–ø–ª–∞—Ç–∏–ª")
    ton_address: Optional[str] = Field(None, description="TON-–∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫—É–¥–∞ –≤—ã–¥–∞—Ç—å NFT)")
    idempotency_key: Optional[str] = Field(None, description="–ö–ª—é—á –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏")
    telegram_id: Optional[int] = Field(None, description="Telegram ID (–¥–ª—è —Å–≤–µ—Ä–∫–∏)")

class ShopOrderItem(BaseModel):
    """
    –≠–ª–µ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞ –≤ —Å–ø–∏—Å–∫–∞—Ö.
    """
    id: int
    telegram_id: int
    order_type: str
    efhc_amount: Optional[str]
    pay_asset: Optional[str]
    pay_amount: Optional[str]
    ton_address: Optional[str]
    status: str
    tx_hash: Optional[str]
    admin_id: Optional[int]
    comment: Optional[str]
    created_at: str
    paid_at: Optional[str]
    completed_at: Optional[str]

class WebhookPayNotifyRequest(BaseModel):
    """
    –ù–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –æ–± –æ–ø–ª–∞—Ç–µ:
      ‚Ä¢ –ü–æ order_id –∏–ª–∏ –ø–æ idempotency_key.
      ‚Ä¢ tx_hash ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ.
      ‚Ä¢ asset/amount ‚Äî –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞/–∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ª–æ–≥–∏–∫–∏).
    """
    order_id: Optional[int] = None
    idempotency_key: Optional[str] = None
    tx_hash: Optional[str] = Field(None, description="–•—ç—à –≤–Ω–µ—à–Ω–µ–π –æ–ø–ª–∞—Ç—ã (TON/USDT-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è)")
    asset: Optional[str] = Field(None, description="–ê–∫—Ç–∏–≤ –æ–ø–ª–∞—Ç—ã: 'TON' –∏–ª–∏ 'USDT'")
    amount: Optional[condecimal(gt=0, max_digits=30, decimal_places=3)] = None

class AdminOrderAction(BaseModel):
    """
    –î–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞ –Ω–∞–¥ –∑–∞–∫–∞–∑–æ–º: approve(=complete), reject, cancel, fail.
    """
    comment: Optional[str] = Field(None, description="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∞")
    tx_hash: Optional[str] = Field(None, description="–•—ç—à –æ–ø–ª–∞—Ç—ã (–µ—Å–ª–∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä—É—á–Ω—É—é)")

class PanelBuyRequest(BaseModel):
    """
    –ü–æ–∫—É–ø–∫–∞ –ø–∞–Ω–µ–ª–µ–π –∑–∞ EFHC:
      ‚Ä¢ qty ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π,
      ‚Ä¢ use_bonus_first ‚Äî —Ç—Ä–∞—Ç–∏—Ç—å —Å–Ω–∞—á–∞–ª–∞ bonus_EFHC (True/False).
    """
    qty: int = Field(..., gt=0, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π –∑–∞ —Ä–∞–∑ (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)")
    use_bonus_first: bool = Field(True, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å bonus_EFHC –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ")

# -----------------------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------------------------------------------------------------
async def _ensure_user_balance(db: AsyncSession, user_id: int) -> Balance:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    –¢–∞–∫–∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ users (idempotent).
    """
    await db.execute(text(f"""
        INSERT INTO {settings.DB_SCHEMA_CORE}.users (telegram_id)
        VALUES (:tg) ON CONFLICT (telegram_id) DO NOTHING
    """), {"tg": user_id})
    await db.execute(text(f"""
        INSERT INTO {settings.DB_SCHEMA_CORE}.balances (telegram_id)
        VALUES (:tg) ON CONFLICT (telegram_id) DO NOTHING
    """), {"tg": user_id})
    await db.commit()

    q = await db.execute(select(Balance).where(Balance.telegram_id == user_id))
    bal: Optional[Balance] = q.scalar_one_or_none()
    if not bal:
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    return bal

async def _lock_user_row(db: AsyncSession, user_id: int) -> None:
    """
    –ú—è–≥–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è) –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –ë–µ—Ä—ë–º –µ–≥–æ —Å—Ç—Ä–æ–∫—É –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ UPDATE ‚Äî —á—Ç–æ–±—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –ø–∞–Ω–µ–ª–µ–π –Ω–µ "–æ–±–≥–æ–Ω—è–ª–∏" –¥—Ä—É–≥ –¥—Ä—É–≥–∞.
    """
    await db.execute(
        text(f"SELECT 1 FROM {settings.DB_SCHEMA_CORE}.balances WHERE telegram_id = :tg FOR UPDATE"),
        {"tg": user_id}
    )

async def _count_active_panels_user(db: AsyncSession, user_id: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π –Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ê—Ä—Ö–∏–≤–Ω—ã–µ/–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è.
    """
    q = await db.execute(
        text(f"SELECT COUNT(*) FROM {settings.DB_SCHEMA_CORE}.panels WHERE telegram_id = :tg AND active = TRUE"),
        {"tg": user_id}
    )
    row = q.first()
    return int(row[0] if row and row[0] is not None else 0)

async def _insert_bonus_transfer_log(db: AsyncSession, from_id: int, to_id: int, amount: Decimal, reason: str) -> None:
    """
    –í–Ω–æ—Å–∏—Ç –∑–∞–ø–∏—Å—å –≤ efhc_transfers_log –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö EFHC.
    –ï—Å–ª–∏ –ª–æ–≥-—Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç ‚Äî –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–≥, –æ—Å–Ω–æ–≤–Ω—É—é –ø–æ–∫—É–ø–∫—É –Ω–µ –≤–∞–ª–∏–º.
    """
    try:
        await db.execute(
            text(f"""
                INSERT INTO {settings.DB_SCHEMA_CORE}.efhc_transfers_log
                    (from_id, to_id, amount, reason, ts)
                VALUES (:from_id, :to_id, :amount, :reason, NOW())
            """),
            {
                "from_id": int(from_id),
                "to_id": int(to_id),
                "amount": str(d3(Decimal(amount))),
                "reason": reason,
            }
        )
        await db.commit()
    except Exception:
        await db.rollback()

# -----------------------------------------------------------------------------
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ–∫—É–ø–∫—É EFHC (–∑–∞ TON/USDT)
# -----------------------------------------------------------------------------
@router.post("/shop/orders/efhc", summary="–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ–∫—É–ø–∫—É EFHC (–∑–∞ TON/USDT)")
async def create_order_efhc(
    payload: CreateEFHCOrderRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
):
    """
    –°–æ–∑–¥–∞—ë—Ç –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ–∫—É–ø–∫—É EFHC –∑–∞ –≤–Ω–µ—à–Ω–∏–π –∞–∫—Ç–∏–≤ (TON/USDT).
    –ü–æ —Ñ–∞–∫—Ç—É –æ–ø–ª–∞—Ç—ã (webhook/–∞–¥–º–∏–Ω) ‚Äî EFHC —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å –ë–∞–Ω–∫–∞ ‚Üí –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    Idempotency: –µ—Å–ª–∏ idempotency_key —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π pending-–∑–∞–∫–∞–∑.
    """
    await ensure_shop_tables(db)
    user_id = await require_user(x_telegram_id)

    if payload.telegram_id is not None and int(payload.telegram_id) != user_id:
        raise HTTPException(status_code=400, detail="Telegram ID mismatch")

    pay_asset = (payload.pay_asset or "").upper().strip()
    if pay_asset not in ("TON", "USDT"):
        raise HTTPException(status_code=400, detail="pay_asset –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'TON' –∏–ª–∏ 'USDT'")

    efhc_amt = d3(Decimal(payload.efhc_amount))
    pay_amount = d3(Decimal(payload.pay_amount))

    # –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    if payload.idempotency_key:
        q = await db.execute(
            text(f"""
                SELECT id FROM {settings.DB_SCHEMA_CORE}.shop_orders
                WHERE idempotency_key = :ikey
            """),
            {"ikey": payload.idempotency_key},
        )
        row = q.first()
        if row:
            return {"ok": True, "order_id": int(row[0]), "status": "pending"}

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    q2 = await db.execute(
        text(f"""
            INSERT INTO {settings.DB_SCHEMA_CORE}.shop_orders
            (telegram_id, order_type, efhc_amount, pay_asset, pay_amount, ton_address, status, idempotency_key, created_at)
            VALUES (:tg, 'efhc', :efhc, :asset, :pamt, :addr, 'pending', :ikey, NOW())
            RETURNING id
        """),
        {
            "tg": user_id,
            "efhc": str(efhc_amt),
            "asset": pay_asset,
            "pamt": str(pay_amount),
            "addr": (payload.ton_address or ""),
            "ikey": payload.idempotency_key,
        }
    )
    order_id = int(q2.scalar_one())
    await db.commit()
    return {"ok": True, "order_id": order_id, "status": "pending"}

# -----------------------------------------------------------------------------
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ–∫—É–ø–∫—É VIP (–∑–∞ TON/USDT)
# -----------------------------------------------------------------------------
@router.post("/shop/orders/vip", summary="–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ–∫—É–ø–∫—É VIP (–∑–∞ TON/USDT)")
async def create_order_vip(
    payload: CreateVIPOrderRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
):
    """
    –°–æ–∑–¥–∞—ë—Ç –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ–∫—É–ø–∫—É VIP.
    ‚ö†Ô∏è –í–ê–ñ–ù–û: –ú—ã –Ω–µ –≤–∫–ª—é—á–∞–µ–º VIP –Ω–∞–ø—Ä—è–º—É—é. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–æ–º/webhook ‚Äî
      –≤ approve —Å–æ–∑–¥–∞—ë—Ç—Å—è manual –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–¥–∞—á—É VIP NFT (request_type='vip_nft').
      –°—Ç–∞—Ç—É—Å VIP –≤–∫–ª—é—á–∏—Ç—Å—è –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è NFT –≤ –∫–æ—à–µ–ª—å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (00:00).
    """
    await ensure_shop_tables(db)
    user_id = await require_user(x_telegram_id)

    if payload.telegram_id is not None and int(payload.telegram_id) != user_id:
        raise HTTPException(status_code=400, detail="Telegram ID mismatch")

    pay_asset = (payload.pay_asset or "").upper().strip()
    if pay_asset not in ("TON", "USDT"):
        raise HTTPException(status_code=400, detail="pay_asset –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'TON' –∏–ª–∏ 'USDT'")

    _ = d3(Decimal(payload.pay_amount))  # –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

    # –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    if payload.idempotency_key:
        q = await db.execute(
            text(f"SELECT id FROM {settings.DB_SCHEMA_CORE}.shop_orders WHERE idempotency_key=:ikey"),
            {"ikey": payload.idempotency_key}
        )
        row = q.first()
        if row:
            return {"ok": True, "order_id": int(row[0]), "status": "pending"}

    q2 = await db.execute(
        text(f"""
            INSERT INTO {settings.DB_SCHEMA_CORE}.shop_orders
            (telegram_id, order_type, efhc_amount, pay_asset, pay_amount, ton_address, status, idempotency_key, created_at)
            VALUES (:tg, 'vip', NULL, :asset, :pamt, :addr, 'pending', :ikey, NOW())
            RETURNING id
        """),
        {
            "tg": user_id,
            "asset": pay_asset,
            "pamt": str(d3(Decimal(payload.pay_amount))),
            "addr": (payload.ton_address or ""),
            "ikey": payload.idempotency_key,
        }
    )
    order_id = int(q2.scalar_one())
    await db.commit()
    return {"ok": True, "order_id": order_id, "status": "pending"}

# -----------------------------------------------------------------------------
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ–∫—É–ø–∫—É VIP NFT (–∑–∞ TON/USDT)
# -----------------------------------------------------------------------------
@router.post("/shop/orders/nft", summary="–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ–∫—É–ø–∫—É VIP NFT (–∑–∞ TON/USDT)")
async def create_order_nft(
    payload: CreateNFTOrderRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
):
    """
    –°–æ–∑–¥–∞—ë—Ç –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ–∫—É–ø–∫—É VIP NFT.
    –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã (approve) –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ manual –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–¥–∞—á—É NFT (request_type='vip_nft').
    –°—Ç–æ–∏–º–æ—Å—Ç—å VIP NFT –∑–∞–¥–∞—ë—Ç—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ/–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–±–∞–∑–æ–≤–æ: 250 EFHC, 20 TON, 50 TON USDT),
    –Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ/–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ ‚Äî –≤–Ω–µ EFHC-–±—ç–∫–µ–Ω–¥–∞ (–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞/–∞–¥–º–∏–Ω–∫–∏).
    """
    await ensure_shop_tables(db)
    user_id = await require_user(x_telegram_id)

    if payload.telegram_id is not None and int(payload.telegram_id) != user_id:
        raise HTTPException(status_code=400, detail="Telegram ID mismatch")

    pay_asset = (payload.pay_asset or "").upper().strip()
    if pay_asset not in ("TON", "USDT"):
        raise HTTPException(status_code=400, detail="pay_asset –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'TON' –∏–ª–∏ 'USDT'")

    _ = d3(Decimal(payload.pay_amount))  # –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

    # –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    if payload.idempotency_key:
        q = await db.execute(
            text(f"SELECT id FROM {settings.DB_SCHEMA_CORE}.shop_orders WHERE idempotency_key=:ikey"),
            {"ikey": payload.idempotency_key}
        )
        row = q.first()
        if row:
            return {"ok": True, "order_id": int(row[0]), "status": "pending"}

    q2 = await db.execute(
        text(f"""
            INSERT INTO {settings.DB_SCHEMA_CORE}.shop_orders
            (telegram_id, order_type, efhc_amount, pay_asset, pay_amount, ton_address, status, idempotency_key, created_at)
            VALUES (:tg, 'nft', NULL, :asset, :pamt, :addr, 'pending', :ikey, NOW())
            RETURNING id
        """),
        {
            "tg": user_id,
            "asset": pay_asset,
            "pamt": str(d3(Decimal(payload.pay_amount))),
            "addr": (payload.ton_address or ""),
            "ikey": payload.idempotency_key,
        }
    )
    order_id = int(q2.scalar_one())
    await db.commit()
    return {"ok": True, "order_id": order_id, "status": "pending"}

# -----------------------------------------------------------------------------
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤
# -----------------------------------------------------------------------------
@router.get("/shop/orders", summary="–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def list_my_shop_orders(
    limit: int = Query(100, ge=1, le=1000),
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∑–∞–∫–∞–∑–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await ensure_shop_tables(db)
    user_id = await require_user(x_telegram_id)

    q = await db.execute(
        text(f"""
            SELECT id, telegram_id, order_type, efhc_amount, pay_asset, pay_amount, ton_address, status,
                   tx_hash, admin_id, comment, created_at, paid_at, completed_at
            FROM {settings.DB_SCHEMA_CORE}.shop_orders
            WHERE telegram_id=:tg
            ORDER BY created_at DESC
            LIMIT :lim
        """),
        {"tg": user_id, "lim": limit}
    )
    rows = q.fetchall()
    out: List[ShopOrderItem] = []
    for r in rows:
        out.append(ShopOrderItem(
            id=r[0],
            telegram_id=r[1],
            order_type=r[2],
            efhc_amount=(str(d3(Decimal(r[3]))) if r[3] is not None else None),
            pay_asset=r[4],
            pay_amount=(str(d3(Decimal(r[5]))) if r[5] is not None else None),
            ton_address=r[6],
            status=r[7],
            tx_hash=r[8],
            admin_id=r[9],
            comment=r[10],
            created_at=r[11].isoformat() if r[11] else None,
            paid_at=r[12].isoformat() if r[12] else None,
            completed_at=r[13].isoformat() if r[13] else None,
        ))
    return {"ok": True, "items": [i.dict() for i in out]}

# -----------------------------------------------------------------------------
# WEBHOOK: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
# -----------------------------------------------------------------------------
@router.post("/shop/orders/pay/webhook", summary="Webhook –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞")
async def webhook_order_paid(
    payload: WebhookPayNotifyRequest,
    db: AsyncSession = Depends(get_session),
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞ –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.
      ‚Ä¢ –ò—â–µ—Ç –∑–∞–∫–∞–∑ –ø–æ order_id –∏–ª–∏ idempotency_key.
      ‚Ä¢ –°—Ç–∞–≤–∏—Ç —Å—Ç–∞—Ç—É—Å 'paid', —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç tx_hash, paid_at.
      ‚Ä¢ –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç 'complete' ‚Äî —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—é –¥–µ–ª–∞–µ—Ç –∞–¥–º–∏–Ω (approve).
    """
    await ensure_shop_tables(db)

    if not payload.order_id and not payload.idempotency_key:
        raise HTTPException(status_code=400, detail="order_id –∏–ª–∏ idempotency_key –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")

    if payload.order_id:
        q = await db.execute(
            text(f"SELECT id, status FROM {settings.DB_SCHEMA_CORE}.shop_orders WHERE id=:oid"),
            {"oid": payload.order_id}
        )
    else:
        q = await db.execute(
            text(f"SELECT id, status FROM {settings.DB_SCHEMA_CORE}.shop_orders WHERE idempotency_key=:ikey"),
            {"ikey": payload.idempotency_key}
        )

    row = q.first()
    if not row:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    oid = int(row[0])
    cur_status = row[1]
    if cur_status not in ("pending", "failed"):
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π webhook –Ω–µ –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å
        return {"ok": True, "order_id": oid, "status": cur_status}

    await db.execute(
        text(f"""
            UPDATE {settings.DB_SCHEMA_CORE}.shop_orders
            SET status='paid', paid_at=NOW(), tx_hash=:txh, updated_at=NOW()
            WHERE id=:oid
        """),
        {"txh": payload.tx_hash, "oid": oid}
    )
    await db.commit()
    return {"ok": True, "order_id": oid, "status": "paid"}

# -----------------------------------------------------------------------------
# –ê–î–ú–ò–ù: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
# -----------------------------------------------------------------------------
@router.get("/admin/shop/orders", summary="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö shop-–∑–∞–∫–∞–∑–æ–≤ (–∞–¥–º–∏–Ω)")
async def admin_list_shop_orders(
    status: Optional[str] = Query(None, regex="^(pending|paid|completed|rejected|canceled|failed)$"),
    order_type: Optional[str] = Query(None, regex="^(efhc|vip|nft)$"),
    user_id: Optional[int] = Query(None),
    limit: int = Query(200, ge=1, le=2000),
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
):
    """
    –ê–¥–º–∏–Ω—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏.
    """
    await ensure_shop_tables(db)
    _ = await require_admin(db, x_telegram_id)

    where_sql = "WHERE 1=1"
    params: Dict[str, Any] = {"lim": limit}

    if status:
        where_sql += " AND status=:st"
        params["st"] = status
    if order_type:
        where_sql += " AND order_type=:otype"
        params["otype"] = order_type
    if user_id:
        where_sql += " AND telegram_id=:tg"
        params["tg"] = int(user_id)

    q = await db.execute(
        text(f"""
            SELECT id, telegram_id, order_type, efhc_amount, pay_asset, pay_amount, ton_address, status,
                   tx_hash, admin_id, comment, created_at, paid_at, completed_at
            FROM {settings.DB_SCHEMA_CORE}.shop_orders
            {where_sql}
            ORDER BY created_at DESC
            LIMIT :lim
        """),
        params
    )
    rows = q.fetchall()
    out: List[ShopOrderItem] = []
    for r in rows:
        out.append(ShopOrderItem(
            id=r[0],
            telegram_id=r[1],
            order_type=r[2],
            efhc_amount=(str(d3(Decimal(r[3]))) if r[3] is not None else None),
            pay_asset=r[4],
            pay_amount=(str(d3(Decimal(r[5]))) if r[5] is not None else None),
            ton_address=r[6],
            status=r[7],
            tx_hash=r[8],
            admin_id=r[9],
            comment=r[10],
            created_at=r[11].isoformat() if r[11] else None,
            paid_at=r[12].isoformat() if r[12] else None,
            completed_at=r[13].isoformat() if r[13] else None,
        ))
    return {"ok": True, "items": [i.dict() for i in out]}

# -----------------------------------------------------------------------------
# –ê–î–ú–ò–ù: APPROVE (=COMPLETE) –∑–∞–∫–∞–∑–∞
# -----------------------------------------------------------------------------
@router.post("/admin/shop/orders/{order_id}/approve", summary="–û–¥–æ–±—Ä–∏—Ç—å (complete) –∑–∞–∫–∞–∑ (–∞–¥–º–∏–Ω)")
async def admin_approve_shop_order(
    order_id: int = Path(..., ge=1),
    payload: AdminOrderAction = AdminOrderAction(),
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id")
):
    """
    –û–¥–æ–±—Ä—è–µ—Ç –∑–∞–∫–∞–∑ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω–µ—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ):
      ‚Ä¢ order_type='efhc': EFHC —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å –ë–∞–Ω–∫–∞ ‚Üí –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (credit_user_from_bank).
      ‚Ä¢ order_type='vip': ‚ö†Ô∏è –ù–ï –≤–∫–ª—é—á–∞–µ–º VIP –Ω–∞–ø—Ä—è–º—É—é. –°–æ–∑–¥–∞—ë–º manual –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–¥–∞—á—É VIP NFT.
      ‚Ä¢ order_type='nft': —Å–æ–∑–¥–∞—ë—Ç—Å—è manual –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–¥–∞—á—É VIP NFT.
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ = 'paid' (–∏–ª–∏ 'pending', –µ—Å–ª–∏ –∞–¥–º–∏–Ω –≤—Ä—É—á–Ω—É—é –ø—Ä–æ–≤–æ–¥–∏—Ç).
    """
    await ensure_shop_tables(db)
    admin_id = await require_admin(db, x_telegram_id)

    q = await db.execute(
        text(f"""
            SELECT telegram_id, order_type, efhc_amount, status, ton_address
            FROM {settings.DB_SCHEMA_CORE}.shop_orders
            WHERE id=:oid
        """),
        {"oid": order_id}
    )
    row = q.first()
    if not row:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    user_id = int(row[0])
    order_type = row[1]
    efhc_amount = d3(Decimal(row[2] or 0))
    status = row[3]
    ton_address = row[4]

    if status not in ("paid", "pending"):
        raise HTTPException(status_code=400, detail=f"–ó–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'pending' –∏–ª–∏ 'paid', —Ç–µ–∫—É—â–∏–π: {status}")

    try:
        if order_type == "efhc":
            if efhc_amount <= 0:
                raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ EFHC –≤ –∑–∞–∫–∞–∑–µ")
            await credit_user_from_bank(db, user_id=user_id, amount=efhc_amount)

        elif order_type in ("vip", "nft"):
            # –ù–µ —Å–æ–∑–¥–∞—ë–º –¥—É–±–ª–∏–∫–∞—Ç—ã manual –∑–∞—è–≤–æ–∫: –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ —ç—Ç–æ–º—É order_id
            qx = await db.execute(
                text(f"""
                    SELECT id FROM {settings.DB_SCHEMA_CORE}.manual_nft_requests
                    WHERE order_id = :oid
                """),
                {"oid": order_id}
            )
            exists = qx.first()
            if not exists:
                await db.execute(
                    text(f"""
                        INSERT INTO {settings.DB_SCHEMA_CORE}.manual_nft_requests
                            (telegram_id, wallet_address, request_type, order_id, status, created_at)
                        VALUES (:tg, :wa, 'vip_nft', :oid, 'open', NOW())
                    """),
                    {"tg": user_id, "wa": ton_address or "", "oid": order_id}
                )
            # –í–ê–ñ–ù–û: VIP –ù–ï –≤–∫–ª—é—á–∞–µ–º –∑–¥–µ—Å—å. –û–Ω –±—É–¥–µ—Ç –≤–∫–ª—é—á—ë–Ω/–≤—ã–∫–ª—é—á–µ–Ω –Ω–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏/–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ NFT.

        else:
            raise HTTPException(status_code=400, detail=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–∫–∞–∑–∞: {order_type}")

        # –û–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ -> completed
        await db.execute(
            text(f"""
                UPDATE {settings.DB_SCHEMA_CORE}.shop_orders
                SET status='completed', completed_at=NOW(), admin_id=:aid, comment=:cmt, tx_hash=COALESCE(tx_hash,:txh),
                    updated_at=NOW()
                WHERE id=:oid
            """),
            {"aid": admin_id, "cmt": (payload.comment or ""), "txh": (payload.tx_hash or None), "oid": order_id}
        )
        await db.commit()

    except HTTPException:
        raise
    except Exception as e:
        await db.rollback()
        await db.execute(
            text(f"""
                UPDATE {settings.DB_SCHEMA_CORE}.shop_orders
                SET status='failed', admin_id=:aid, comment=:cmt, updated_at=NOW()
                WHERE id=:oid
            """),
            {"aid": admin_id, "cmt": f"approve failed: {e}", "oid": order_id}
        )
        await db.commit()
        raise HTTPException(status_code=400, detail=f"Approve failed: {e}")

    return {"ok": True, "order_id": order_id, "status": "completed"}

# -----------------------------------------------------------------------------
# –ê–î–ú–ò–ù: cancel/reject/fail
# -----------------------------------------------------------------------------
@router.post("/admin/shop/orders/{order_id}/reject", summary="–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (–∞–¥–º–∏–Ω)")
async def admin_reject_shop_order(
    order_id: int = Path(..., ge=1),
    payload: AdminOrderAction = AdminOrderAction(),
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id")
):
    """
    –û—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–∫–∞–∑.
    –ï—Å–ª–∏ —ç—Ç–æ EFHC-–∑–∞–∫–∞–∑, EFHC –µ—â—ë –Ω–µ —Å–ø–∏—Å—ã–≤–∞–ª–∏—Å—å/–Ω–∞—á–∏—Å–ª—è–ª–∏—Å—å –¥–æ approve ‚Äî –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ EFHC –Ω–µ –¥–µ–ª–∞–µ–º.
    –í–æ–∑–≤—Ä–∞—Ç TON/USDT (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω) ‚Äî –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.
    """
    await ensure_shop_tables(db)
    admin_id = await require_admin(db, x_telegram_id)

    q = await db.execute(
        text(f"SELECT status FROM {settings.DB_SCHEMA_CORE}.shop_orders WHERE id=:oid"),
        {"oid": order_id}
    )
    row = q.first()
    if not row:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    st = row[0]
    if st in ("completed", "canceled", "rejected"):
        return {"ok": True, "order_id": order_id, "status": st}

    await db.execute(
        text(f"""
            UPDATE {settings.DB_SCHEMA_CORE}.shop_orders
            SET status='rejected', admin_id=:aid, comment=:cmt, updated_at=NOW()
            WHERE id=:oid
        """),
        {"aid": admin_id, "cmt": payload.comment, "oid": order_id}
    )
    await db.commit()
    return {"ok": True, "order_id": order_id, "status": "rejected"}

@router.post("/admin/shop/orders/{order_id}/cancel", summary="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (–∞–¥–º–∏–Ω)")
async def admin_cancel_shop_order(
    order_id: int = Path(..., ge=1),
    payload: AdminOrderAction = AdminOrderAction(),
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id")
):
    """
    –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ (–¥–ª—è 'pending'/'paid').
    –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö EFHC-–¥–≤–∏–∂–µ–Ω–∏–π –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º.
    """
    await ensure_shop_tables(db)
    admin_id = await require_admin(db, x_telegram_id)

    q = await db.execute(
        text(f"SELECT status FROM {settings.DB_SCHEMA_CORE}.shop_orders WHERE id=:oid"),
        {"oid": order_id}
    )
    row = q.first()
    if not row:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    st = row[0]
    if st in ("completed", "canceled", "rejected"):
        return {"ok": True, "order_id": order_id, "status": st}

    await db.execute(
        text(f"""
            UPDATE {settings.DB_SCHEMA_CORE}.shop_orders
            SET status='canceled', admin_id=:aid, comment=:cmt, updated_at=NOW()
            WHERE id=:oid
        """),
        {"aid": admin_id, "cmt": payload.comment, "oid": order_id}
    )
    await db.commit()
    return {"ok": True, "order_id": order_id, "status": "canceled"}

@router.post("/admin/shop/orders/{order_id}/fail", summary="–ü–æ–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ failed (–∞–¥–º–∏–Ω)")
async def admin_fail_shop_order(
    order_id: int = Path(..., ge=1),
    payload: AdminOrderAction = AdminOrderAction(),
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id")
):
    """
    –ü–æ–º–µ—á–∞–µ—Ç –∑–∞–∫–∞–∑ –∫–∞–∫ failed (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞).
    """
    await ensure_shop_tables(db)
    admin_id = await require_admin(db, x_telegram_id)

    await db.execute(
        text(f"""
            UPDATE {settings.DB_SCHEMA_CORE}.shop_orders
            SET status='failed', admin_id=:aid, comment=:cmt, updated_at=NOW()
            WHERE id=:oid
        """),
        {"aid": admin_id, "cmt": payload.comment, "oid": order_id}
    )
    await db.commit()
    return {"ok": True, "order_id": order_id, "status": "failed"}

# -----------------------------------------------------------------------------
# –ü–æ–∫—É–ø–∫–∞ –ü–ê–ù–ï–õ–ï–ô –∑–∞ EFHC (+ bonus_EFHC)
# -----------------------------------------------------------------------------
@router.post("/shop/panels/buy", summary="–ü–æ–∫—É–ø–∫–∞ –ø–∞–Ω–µ–ª–µ–π –∑–∞ EFHC/bonus_EFHC")
async def shop_buy_panels(
    payload: PanelBuyRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id")
):
    """
    –°–æ–∑–¥–∞—ë—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
      ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (<= 1000).
      ‚Ä¢ –°—á–∏—Ç–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å: qty * PANEL_PRICE_EFHC.
      ‚Ä¢ –°–ø–∏—Å—ã–≤–∞–µ—Ç EFHC –∏/–∏–ª–∏ bonus_EFHC —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
          - –ï—Å–ª–∏ use_bonus_first=True: —Å–Ω–∞—á–∞–ª–∞ –±–æ–Ω—É—Å, –∑–∞—Ç–µ–º EFHC.
          - –ò–Ω–∞—á–µ –Ω–∞–æ–±–æ—Ä–æ—Ç: —Å–Ω–∞—á–∞–ª–∞ EFHC, –∑–∞—Ç–µ–º –±–æ–Ω—É—Å.
        –ë–æ–Ω—É—Å–Ω—ã–µ EFHC –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –Ω–∞ –ë–ê–ù–ö (–±–∞–ª–∞–Ω—Å bonus –ë–∞–Ω–∫–∞). –û–±—ã—á–Ω—ã–µ EFHC –ø–µ—Ä–µ–≤–æ–¥—è—Ç—Å—è user ‚Üí –ë–∞–Ω–∫.
      ‚Ä¢ –°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å–∏ –ø–∞–Ω–µ–ª–µ–π: (telegram_id, active=TRUE, activated_at=NOW()).
        –°—Ä–æ–∫ –∂–∏–∑–Ω–∏ –ø–∞–Ω–µ–ª–∏ ‚Äî 180 –¥–Ω–µ–π (–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º).
      ‚Ä¢ –õ–æ–≥–∏—Ä—É–µ—Ç —Ñ–∞–∫—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è bonus_EFHC –≤ efhc_transfers_log (reason='shop_panel_bonus').
    """
    user_id = await require_user(x_telegram_id)
    await ensure_shop_tables(db)

    qty = int(payload.qty)
    if qty < 1:
        raise HTTPException(status_code=400, detail="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 1")

    # –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ balances/users)
    bal = await _ensure_user_balance(db, user_id)

    # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–º—è–≥–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)
    await _lock_user_row(db, user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    active_for_user = await _count_active_panels_user(db, user_id)
    if active_for_user + qty > PANELS_PER_USER_LIMIT:
        allowed = max(0, PANELS_PER_USER_LIMIT - active_for_user)
        raise HTTPException(
            status_code=400,
            detail=f"–õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ({active_for_user}/{PANELS_PER_USER_LIMIT}). –î–æ—Å—Ç—É–ø–Ω–æ: {allowed}"
        )

    total_cost = d3(PANEL_PRICE_EFHC * Decimal(qty))

    # –¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
    cur_efhc = d3(Decimal(bal.efhc or 0))
    cur_bonus = d3(Decimal(getattr(bal, "bonus", 0) or 0))  # –ø–æ–ª–µ 'bonus' ‚Äî –±–æ–Ω—É—Å–Ω—ã–µ EFHC

    # –†–∞—Å–∫–ª–∞–¥ –æ–ø–ª–∞—Ç—ã
    use_bonus_first = bool(payload.use_bonus_first)
    pay_bonus = Decimal("0.000")
    pay_efhc = Decimal("0.000")

    if use_bonus_first:
        pay_bonus = min(cur_bonus, total_cost)
        rest = d3(total_cost - pay_bonus)
        pay_efhc = rest
    else:
        pay_efhc = min(cur_efhc, total_cost)
        rest = d3(total_cost - pay_efhc)
        pay_bonus = rest

    if pay_efhc > cur_efhc or pay_bonus > cur_bonus:
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ EFHC/bonus_EFHC –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–∞–Ω–µ–ª–µ–π")

    # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: —Å–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π
    try:
        # 1) EFHC (–æ–±—ã—á–Ω—ã–µ) -> –ë–∞–Ω–∫
        if pay_efhc > 0:
            await debit_user_to_bank(db, user_id=user_id, amount=d3(pay_efhc))

        # 2) bonus_EFHC: user.bonus -=, bank.bonus +=
        if pay_bonus > 0:
            # —É–º–µ–Ω—å—à–∞–µ–º –±–æ–Ω—É—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db.execute(
                text(f"""
                    UPDATE {settings.DB_SCHEMA_CORE}.balances
                    SET bonus = (COALESCE(bonus,'0')::numeric - :amt)::text
                    WHERE telegram_id = :tg
                """),
                {"amt": str(d3(pay_bonus)), "tg": user_id}
            )
            # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –ë–∞–Ω–∫–∞ –≤ balances
            await db.execute(
                text(f"""
                    INSERT INTO {settings.DB_SCHEMA_CORE}.balances (telegram_id, bonus)
                    VALUES (:bank, '0')
                    ON CONFLICT (telegram_id) DO NOTHING
                """),
                {"bank": BANK_TELEGRAM_ID}
            )
            # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–æ–Ω—É—Å –ë–∞–Ω–∫–∞
            await db.execute(
                text(f"""
                    UPDATE {settings.DB_SCHEMA_CORE}.balances
                    SET bonus = (COALESCE(bonus,'0')::numeric + :amt)::text
                    WHERE telegram_id = :bank
                """),
                {"amt": str(d3(pay_bonus)), "bank": BANK_TELEGRAM_ID}
            )
            # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞
            await _insert_bonus_transfer_log(db, from_id=user_id, to_id=BANK_TELEGRAM_ID, amount=pay_bonus, reason="shop_panel_bonus")

        # 3) –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π (active=TRUE, activated_at=NOW())
        for _ in range(qty):
            await db.execute(
                text(f"""
                    INSERT INTO {settings.DB_SCHEMA_CORE}.panels (telegram_id, active, activated_at)
                    VALUES (:tg, TRUE, NOW())
                """),
                {"tg": user_id}
            )

        await db.commit()

    except HTTPException:
        raise
    except Exception as e:
        await db.rollback()
        raise HTTPException(status_code=400, detail=f"–ü–æ–∫—É–ø–∫–∞ –ø–∞–Ω–µ–ª–µ–π –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")

    # –¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
    q2 = await db.execute(select(Balance).where(Balance.telegram_id == user_id))
    nb: Optional[Balance] = q2.scalar_one_or_none()
    return {
        "ok": True,
        "panels_bought": qty,
        "total_cost_efhc": str(total_cost),
        "paid_by_efhc": str(d3(pay_efhc)),
        "paid_by_bonus": str(d3(pay_bonus)),
        "limit_per_user": PANELS_PER_USER_LIMIT,
        "balance_after": {
            "efhc": str(d3(Decimal(nb.efhc or 0))) if nb else "0.000",
            "bonus": str(d3(Decimal(getattr(nb, "bonus", 0) or 0))) if nb else "0.000",
            "kwh": str(d3(Decimal(getattr(nb, "kwh", 0) or 0))) if nb else "0.000",
        },
        "note": f"–°—Ä–æ–∫ –∂–∏–∑–Ω–∏ –∫–∞–∂–¥–æ–π –ø–∞–Ω–µ–ª–∏ ‚Äî {PANEL_LIFETIME_DAYS} –¥–Ω–µ–π. VIP –º–Ω–æ–∂–∏—Ç–µ–ª—å (+7%) –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ NFT –≤ –∫–æ—à–µ–ª—å–∫–µ."
    }
