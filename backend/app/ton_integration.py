# üìÇ backend/app/ton_integration.py ‚Äî –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TON (TonAPI) –∏ –∞–≤—Ç–æ-–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
# -----------------------------------------------------------------------------
# –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –º–æ–¥—É–ª—å:
#   ‚Ä¢ –û–ø—Ä–∞—à–∏–≤–∞–µ—Ç TonAPI (tonapi.io) –ø–æ –∞–¥—Ä–µ—Å—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è (TON_WALLET_ADDRESS).
#   ‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è:
#       - TonTransfer (–≤—Ö–æ–¥—è—â–∏–π TON –ø–µ—Ä–µ–≤–æ–¥)
#       - JettonTransfer (–≤—Ö–æ–¥—è—â–∏–π jetton; –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è EFHC –∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ USDT)
#   ‚Ä¢ –ü–∞—Ä—Å–∏—Ç memo/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (comment) –ø–æ –≤–∞—à–µ–º—É —Ñ–æ—Ä–º–∞—Ç—É:
#       "id telegram 4357333, 100 EFHC" –∏–ª–∏ "id:4357333 100 efhc", "vip", "vip nft" –∏ —Ç.–ø.
#   ‚Ä¢ –î–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ event_id (TonAPI) –∏ –ù–ï –∑–∞—á–∏—Å–ª—è–µ—Ç –≤—Ç–æ—Ä–æ–π —Ä–∞–∑.
#   ‚Ä¢ –ù–∞—á–∏—Å–ª—è–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (efhc_core.balances) –∏–ª–∏ —Å—Ç–∞–≤–∏—Ç VIP-—Ñ–ª–∞–≥.
#
# –ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏/—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
#   ‚Ä¢ –í config.py –∑–∞–¥–∞–Ω—ã:
#       - TON_WALLET_ADDRESS (–∫–æ—à–µ–ª—ë–∫ Tonkeeper –¥–ª—è –ø—Ä–∏—ë–º–∞)
#       - NFT_PROVIDER_BASE_URL (https://tonapi.io)
#       - NFT_PROVIDER_API_KEY (–≤–∞—à API key)
#       - EFHC_TOKEN_ADDRESS (–∞–¥—Ä–µ—Å jetton EFHC)
#       - (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) USDT_JETTON_ADDRESS (–∞–¥—Ä–µ—Å jetton USDT, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
#   ‚Ä¢ –°—Ö–µ–º—ã –ë–î —Å–æ–∑–¥–∞—é—Ç—Å—è –º–æ–¥—É–ª–µ–º database.ensure_schemas()
#   ‚Ä¢ –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏/—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ ‚Äî –≤—Å–µ mutate-–æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ë–î –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
#
# –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
#   ‚Ä¢ –í–∫–ª—é—á–µ–Ω–æ –≤ —Ñ–æ–Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä (—Å–º. main.py ‚Üí ton_watcher_loop), –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç:
#         await process_incoming_payments(db, limit=50)
#
# –¢–∞–±–ª–∏—Ü—ã:
#   efhc_core.ton_events_log (
#       event_id TEXT PRIMARY KEY, ts TIMESTAMP WITH TIME ZONE DEFAULT now(),
#       action_type TEXT, asset TEXT, amount NUMERIC(30, 9), decimals INT,
#       from_addr TEXT, to_addr TEXT, memo TEXT, telegram_id BIGINT NULL,
#       parsed_amount_efhc NUMERIC(30, 3) NULL, vip_requested BOOLEAN DEFAULT FALSE,
#       processed BOOLEAN DEFAULT TRUE, processed_at TIMESTAMPTZ DEFAULT now()
#   )
#
#   efhc_core.balances (
#       telegram_id BIGINT PRIMARY KEY,
#       efhc NUMERIC(30, 3) DEFAULT 0,
#       bonus NUMERIC(30, 3) DEFAULT 0,
#       kwh  NUMERIC(30, 3) DEFAULT 0
#   )
#
#   efhc_core.users (
#       telegram_id BIGINT PRIMARY KEY,
#       username TEXT NULL,
#       created_at TIMESTAMPTZ DEFAULT now()
#   )
#
#   efhc_core.user_vip (
#       telegram_id BIGINT PRIMARY KEY,
#       since TIMESTAMPTZ DEFAULT now()
#   )
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
#   ‚Ä¢ –ü—Ä–∏ Jetton EFHC –º—ã –Ω–∞—á–∏—Å–ª—è–µ–º —Ä–æ–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ jetton ‚Üí –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å EFHC.
#   ‚Ä¢ –ü—Ä–∏ TON –ø–µ—Ä–µ–≤–æ–¥–µ –∏ memo –≤–∏–¥–∞ "... 100 EFHC" ‚Äî –∑–∞—á–∏—Å–ª—è–µ–º 100 EFHC (–±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—É—Ä—Å–∞).
#     (–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é ‚Äî –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–π—Å—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É–º–º—ã TON –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É.)
#   ‚Ä¢ –ü—Ä–∏ "VIP", "VIP NFT" ‚Äî –ø–æ–º–µ—á–∞–µ–º user –∫–∞–∫ VIP (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π VIP; –Ω–µ –∞–¥–º–∏–Ω).
# -----------------------------------------------------------------------------

from __future__ import annotations

import re
import time
from decimal import Decimal, ROUND_DOWN
from typing import Any, Dict, List, Optional, Tuple

import httpx
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text

from .config import get_settings

settings = get_settings()

# ------------------------------------------------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
# ------------------------------------------------------------

NANO_TON_DECIMALS = Decimal("1e9")   # 1 TON = 1e9 nanotons
DEC3 = Decimal("0.001")
DEC9 = Decimal("0.000000001")


def _d3(x: Decimal) -> Decimal:
    """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 3—Ö –∑–Ω–∞–∫–æ–≤ (–¥–ª—è EFHC, kWh, –±–æ–Ω—É—Å–æ–≤)."""
    return x.quantize(DEC3, rounding=ROUND_DOWN)


def _d9(x: Decimal) -> Decimal:
    """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 9 –∑–Ω–∞–∫–æ–≤ (–¥–ª—è TON)."""
    return x.quantize(DEC9, rounding=ROUND_DOWN)


# ------------------------------------------------------------
# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü (idempotent)
# ------------------------------------------------------------

CREATE_TABLES_SQL = """
-- –õ–æ–≥ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π TonAPI: —Ç–æ–ª—å–∫–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –∏ —á—Ç–æ –º—ã —Å–¥–µ–ª–∞–ª–∏
CREATE TABLE IF NOT EXISTS efhc_core.ton_events_log (
    event_id TEXT PRIMARY KEY,
    ts TIMESTAMPTZ DEFAULT now(),
    action_type TEXT,
    asset TEXT,
    amount NUMERIC(30, 9),
    decimals INT,
    from_addr TEXT,
    to_addr TEXT,
    memo TEXT,
    telegram_id BIGINT NULL,
    parsed_amount_efhc NUMERIC(30, 3) NULL,
    vip_requested BOOLEAN DEFAULT FALSE,
    processed BOOLEAN DEFAULT TRUE,
    processed_at TIMESTAMPTZ DEFAULT now()
);

-- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ; —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –º–æ–∂–µ—Ç –∏–º–µ—Ç—å —Å–≤–æ—é –≤–µ—Ä—Å–∏—é —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã)
CREATE TABLE IF NOT EXISTS efhc_core.users (
    telegram_id BIGINT PRIMARY KEY,
    username TEXT NULL,
    created_at TIMESTAMPTZ DEFAULT now()
);

-- –ë–∞–ª–∞–Ω—Å—ã (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—à–µ–ª—ë–∫ EFHC/bonus/kwh)
CREATE TABLE IF NOT EXISTS efhc_core.balances (
    telegram_id BIGINT PRIMARY KEY REFERENCES efhc_core.users(telegram_id) ON DELETE CASCADE,
    efhc NUMERIC(30, 3) DEFAULT 0,
    bonus NUMERIC(30, 3) DEFAULT 0,
    kwh  NUMERIC(30, 3) DEFAULT 0
);

-- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π VIP-—Ñ–ª–∞–≥ (–Ω–µ –∞–¥–º–∏–Ω; –∞–¥–º–∏–Ω –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ NFT whitelist)
CREATE TABLE IF NOT EXISTS efhc_core.user_vip (
    telegram_id BIGINT PRIMARY KEY REFERENCES efhc_core.users(telegram_id) ON DELETE CASCADE,
    since TIMESTAMPTZ DEFAULT now()
);
"""


async def ensure_ton_tables(db: AsyncSession) -> None:
    """–°–æ–∑–¥–∞—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è/–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."""
    await db.execute(text(CREATE_TABLES_SQL))
    await db.commit()


# ------------------------------------------------------------
# –ü–∞—Ä—Å–µ—Ä MEMO/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
# ------------------------------------------------------------

MEMO_RE = re.compile(
    r"""
    (?:
        id[\s:_-]*telegram   # 'id telegram' (–≤–æ–∑–º–æ–∂–Ω—ã : _ -)
        |id                  # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ 'id'
        |tg
        |telegram
    )?
    [\s:_-]*                 # —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    (?P<tg>\d{5,15})?        # —Å–∞–º Telegram ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    [^\dA-Za-z]+             # —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    (?P<amount>\d+(?:[.,]\d{1,9})?)? # —Å—É–º–º–∞ (–≤ —Ç.—á. –¥–µ—Å—è—Ç–∏—á–Ω–∞—è)
    \s*
    (?P<asset>efhc|vip|nft|vip\s*nft)? # –∞–∫—Ç–∏–≤/—Ç–∏–ø ('EFHC', 'VIP', 'VIP NFT')
    """,
    re.IGNORECASE | re.VERBOSE,
)

VIP_RE = re.compile(r"\b(vip(?:\s*nft)?)\b", re.IGNORECASE)
EFHC_RE = re.compile(r"\befhc\b", re.IGNORECASE)


def parse_memo_for_payment(memo: str) -> Tuple[Optional[int], Optional[Decimal], Optional[str], bool]:
    """
    –†–∞–∑–±–∏—Ä–∞–µ—Ç memo/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (telegram_id, amount, asset, vip_flag)
      - telegram_id: int | None
      - amount: Decimal | None (–≤ EFHC)
      - asset: 'EFHC' | None
      - vip_flag: True, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ VIP / VIP NFT (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ —Å—É–º–º—ã)
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏:
      "id telegram 4357333, 100 EFHC"
      "id:4357333 100 efhc"
      "tg 4357333 vip"
      "4357333 vip nft"
    """
    if not memo:
        return (None, None, None, False)

    memo_norm = memo.strip()
    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ VIP (–≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–±—â–µ–π —Ä–µ–≥—É–ª—è—Ä–∫–∏)
    vip_flag = bool(VIP_RE.search(memo_norm))

    # –ò—â–µ–º –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–≥—É–ª—è—Ä–∫–µ
    m = MEMO_RE.search(memo_norm)
    tg_id: Optional[int] = None
    amount: Optional[Decimal] = None
    asset: Optional[str] = None

    if m:
        tg_str = m.group("tg")
        amt_str = m.group("amount")
        asset_str = m.group("asset")

        if tg_str:
            try:
                tg_id = int(tg_str)
            except Exception:
                tg_id = None

        if amt_str:
            amt_str = amt_str.replace(",", ".")
            try:
                amount = Decimal(amt_str)
            except Exception:
                amount = None

        if asset_str:
            if "vip" in asset_str.lower():
                asset = "VIP"
                vip_flag = True
            elif "efhc" in asset_str.lower():
                asset = "EFHC"

    # –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å 'efhc', –∞ asset –µ—â—ë –ø—É—Å—Ç ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º EFHC
    if asset is None and EFHC_RE.search(memo_norm):
        asset = "EFHC"

    # –ï—Å–ª–∏ VIP —Ñ–ª–∞–≥ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ EFHC –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    return (tg_id, amount, asset, vip_flag)


# ------------------------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ –∏ VIP
# ------------------------------------------------------------

async def _ensure_user_exists(db: AsyncSession, telegram_id: int) -> None:
    """
    –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ efhc_core.users, –∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –≤ balances.
    """
    await db.execute(
        text("""
            INSERT INTO efhc_core.users (telegram_id)
            VALUES (:tg)
            ON CONFLICT (telegram_id) DO NOTHING
        """),
        {"tg": telegram_id},
    )
    await db.execute(
        text("""
            INSERT INTO efhc_core.balances (telegram_id)
            VALUES (:tg)
            ON CONFLICT (telegram_id) DO NOTHING
        """),
        {"tg": telegram_id},
    )
    await db.commit()


async def credit_efhc(db: AsyncSession, telegram_id: int, amount_efhc: Decimal) -> None:
    """
    –ù–∞—á–∏—Å–ª–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    amount_efhc ‚Äî —É–∂–µ –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö EFHC (—Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ 3 –∑–Ω–∞–∫–æ–≤).
    """
    await _ensure_user_exists(db, telegram_id)
    await db.execute(
        text("""
            UPDATE efhc_core.balances
               SET efhc = COALESCE(efhc, 0) + :amt
             WHERE telegram_id = :tg
        """),
        {"amt": str(_d3(amount_efhc)), "tg": telegram_id},
    )
    await db.commit()


async def set_user_vip(db: AsyncSession, telegram_id: int) -> None:
    """
    –ü–æ–º–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ VIP (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ–ª–∞–≥). –≠—Ç–æ –ù–ï –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø.
    """
    await _ensure_user_exists(db, telegram_id)
    await db.execute(
        text("""
            INSERT INTO efhc_core.user_vip (telegram_id)
            VALUES (:tg)
            ON CONFLICT (telegram_id) DO NOTHING
        """),
        {"tg": telegram_id},
    )
    await db.commit()


# ------------------------------------------------------------
# –í—ã–∑–æ–≤—ã TonAPI (tonapi.io)
# ------------------------------------------------------------

def _tonapi_headers() -> Dict[str, str]:
    """
    –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ TonAPI. API key –ø–µ—Ä–µ–¥–∞—ë–º –≤ X-API-Key.
    """
    hdrs = {
        "Accept": "application/json",
    }
    if settings.NFT_PROVIDER_API_KEY:
        hdrs["X-API-Key"] = settings.NFT_PROVIDER_API_KEY
    return hdrs


async def fetch_address_events(
    address: str,
    limit: int = 50,
    before_lt: Optional[int] = None
) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∞–¥—Ä–µ—Å–∞ (account events) —Å TonAPI v2.
    –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (—Å–≤–æ–¥–Ω–æ): /v2/accounts/{account_id}/events
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
      - address: –Ω–∞—à TON_WALLET_ADDRESS
      - limit: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
      - before_lt: –ø–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–∞–∑–∞–¥ –ø–æ lt (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON dict.
    """
    base = settings.NFT_PROVIDER_BASE_URL.rstrip("/")
    url = f"{base}/v2/accounts/{address}/events?limit={limit}"
    if before_lt is not None:
        url += f"&before_lt={before_lt}"

    async with httpx.AsyncClient(timeout=20.0) as client:
        r = await client.get(url, headers=_tonapi_headers())
        r.raise_for_status()
        return r.json()


# ------------------------------------------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
# ------------------------------------------------------------

async def _is_event_seen(db: AsyncSession, event_id: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π event_id –≤ –ª–æ–≥–µ (–∏–Ω–∞—á–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ).
    """
    q = await db.execute(
        text("SELECT 1 FROM efhc_core.ton_events_log WHERE event_id = :eid"),
        {"eid": event_id},
    )
    return q.scalar() is not None


async def _log_event(
    db: AsyncSession,
    event_id: str,
    action_type: str,
    asset: str,
    amount: Decimal,
    decimals: int,
    from_addr: str,
    to_addr: str,
    memo: Optional[str],
    telegram_id: Optional[int],
    parsed_amount_efhc: Optional[Decimal],
    vip_requested: bool,
) -> None:
    """
    –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –ª–æ–≥. processed=TRUE, —Ç.–∫. –º—ã –¥–µ–ª–∞–µ–º –∞–≤—Ç–æ-–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É.
    """
    await db.execute(
        text("""
            INSERT INTO efhc_core.ton_events_log(
                event_id, action_type, asset, amount, decimals, from_addr, to_addr, memo,
                telegram_id, parsed_amount_efhc, vip_requested, processed
            )
            VALUES (:eid, :atype, :asset, :amt, :dec, :from_addr, :to_addr, :memo,
                    :tg, :pa, :vip, TRUE)
            ON CONFLICT (event_id) DO NOTHING
        """),
        {
            "eid": event_id,
            "atype": action_type,
            "asset": asset,
            "amt": str(amount),
            "dec": decimals,
            "from_addr": from_addr,
            "to_addr": to_addr,
            "memo": memo or "",
            "tg": telegram_id,
            "pa": str(parsed_amount_efhc) if parsed_amount_efhc is not None else None,
            "vip": vip_requested,
        },
    )
    await db.commit()


def _decode_ton_amount(nano: int) -> Decimal:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ nanotons ‚Üí TON (Decimal —Å 9 –∑–Ω–∞–∫–∞–º–∏)."""
    return _d9(Decimal(nano) / NANO_TON_DECIMALS)


def _decode_jetton_amount(raw: str, decimals: int) -> Decimal:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—É—é —Å—É–º–º—É jetton (–≤ "–º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö" –µ–¥–∏–Ω–∏—Ü–∞—Ö) –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π Decimal.
    raw: —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "123000" –∏ —Ç.–ø., –∫–∞–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç TonAPI
    decimals: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π —É jetton (–¥–ª—è EFHC ‚Äî 3)
    """
    q = Decimal(f"1e{decimals}")
    return (Decimal(raw) / q).quantize(Decimal(f"1e-{decimals}"), rounding=ROUND_DOWN)


async def process_incoming_payments(db: AsyncSession, limit: int = 50) -> int:
    """
    –ü—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç TonAPI –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤—Ö–æ–¥—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (action), –∞ –Ω–µ —Å–æ–±—ã—Ç–∏–π (event).

    –ê–ª–≥–æ—Ä–∏—Ç–º:
      1) ensure_ton_tables() ‚Äî —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç.
      2) fetch_address_events ‚Äî –ø–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–æ—à–µ–ª—å–∫–∞ TON_WALLET_ADDRESS.
      3) –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è:
            - –µ—Å–ª–∏ event_id —É–∂–µ –≤ –ª–æ–≥–µ ‚Üí –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.
            - –∏–Ω–∞—á–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º actions:
                ‚Ä¢ TonTransfer (–≤—Ö–æ–¥—è—â–∏–π) ‚Üí –ø–∞—Ä—Å–∏–º memo, –∏—â–µ–º 'EFHC 100'/'VIP'.
                  –ù–∞—á–∏—Å–ª—è–µ–º EFHC –ø–æ parsed_amount_efhc (–µ—Å–ª–∏ asset EFHC) –∏–ª–∏ —Å—Ç–∞–≤–∏–º VIP.
                ‚Ä¢ JettonTransfer (–≤—Ö–æ–¥—è—â–∏–π, –∞–¥—Ä–µ—Å jetton == EFHC) ‚Üí –Ω–∞—á–∏—Å–ª—è–µ–º EFHC –Ω–∞ —Å—É–º–º—É jetton.
                ‚Ä¢ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: USDT_JETTON_ADDRESS ‚Üí –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ)
            - –ø–∏—à–µ–º –ª–æ–≥ –≤ ton_events_log
      4) –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Å–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö action.
    """
    await ensure_ton_tables(db)

    wallet = settings.TON_WALLET_ADDRESS
    if not wallet:
        print("[TON][WARN] TON_WALLET_ADDRESS –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ TON –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return 0

    try:
        data = await fetch_address_events(address=wallet, limit=limit)
    except httpx.HTTPError as e:
        print(f"[TON] fetch events error: {e}")
        return 0

    events: List[Dict[str, Any]] = data.get("events", []) or data.get("items", []) or []
    handled_actions = 0

    efhc_addr = (settings.EFHC_TOKEN_ADDRESS or "").strip()
    usdt_addr = getattr(settings, "USDT_JETTON_ADDRESS", "") or ""

    for ev in events:
        event_id = ev.get("event_id") or ev.get("id") or ""
        if not event_id:
            # –ï—Å–ª–∏ —É TonAPI –ø—É—Å—Ç–æ–π id ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue

        # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
        if await _is_event_seen(db, event_id=event_id):
            continue

        actions = ev.get("actions", []) or []
        # –ü—Ä–æ–±–µ–∂–∏–º—Å—è –ø–æ action; –ª–æ–≥–∏–∫–∞: —É—á–∏—Ç—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –≤—Ö–æ–¥—è—â–∏–µ (recipient == –Ω–∞—à –∞–¥—Ä–µ—Å)
        for action in actions:
            try:
                atype = action.get("type") or ""

                # ------------------------------
                # 1) –í—Ö–æ–¥—è—â–∏–π –Ω–∞—Ç–∏–≤–Ω—ã–π TON
                # ------------------------------
                if atype == "TonTransfer" and action.get("TonTransfer"):
                    obj = action["TonTransfer"]
                    to_addr = (obj.get("recipient", {}) or {}).get("address") or ""
                    if (to_addr or "").lower() != wallet.lower():
                        continue  # –Ω–µ –∫ –Ω–∞–º
                    amount_nano = int(obj.get("amount", 0))
                    amount_ton = _decode_ton_amount(amount_nano)
                    comment = obj.get("comment") or obj.get("payload") or ""
                    from_addr = (obj.get("sender", {}) or {}).get("address") or ""

                    # –†–∞–∑–±–∏—Ä–∞–µ–º memo: –æ–∂–∏–¥–∞–µ–º Telegram ID –∏ '100 EFHC' / 'VIP'
                    tg_id, parsed_amt, asset, vip_flag = parse_memo_for_payment(comment)

                    # –ï—Å–ª–∏ VIP ‚Äî —Å—Ç–∞–≤–∏–º VIP —Ñ–ª–∞–≥ (–µ—Å–ª–∏ –µ—Å—Ç—å tg_id)
                    if vip_flag and tg_id:
                        await set_user_vip(db, tg_id)
                        await _log_event(
                            db=db,
                            event_id=event_id,
                            action_type=atype,
                            asset="TON",
                            amount=amount_ton,
                            decimals=9,
                            from_addr=from_addr,
                            to_addr=wallet,
                            memo=comment,
                            telegram_id=tg_id,
                            parsed_amount_efhc=None,
                            vip_requested=True,
                        )
                        handled_actions += 1
                        continue

                    # –ï—Å–ª–∏ –≤ memo —É–∫–∞–∑–∞–Ω–æ EFHC-–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚Äî –Ω–∞—á–Ω–µ–º –Ω–∞—á–∏—Å–ª—è—Ç—å EFHC
                    if tg_id and asset == "EFHC" and parsed_amt and parsed_amt > 0:
                        await credit_efhc(db, tg_id, parsed_amt)
                        await _log_event(
                            db=db,
                            event_id=event_id,
                            action_type=atype,
                            asset="TON",
                            amount=amount_ton,         # —Å–∫–æ–ª—å–∫–æ TON –ø—Ä–∏—à–ª–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏
                            decimals=9,
                            from_addr=from_addr,
                            to_addr=wallet,
                            memo=comment,
                            telegram_id=tg_id,
                            parsed_amount_efhc=_d3(parsed_amt),  # —Å–∫–æ–ª—å–∫–æ EFHC –º—ã –Ω–∞—á–∏—Å–ª–∏–ª–∏
                            vip_requested=False,
                        )
                        handled_actions += 1
                        continue

                    # –ò–Ω–∞—á–µ ‚Äî TON –±–µ–∑ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ memo ‚Üí –ø—Ä–æ—Å—Ç–æ –∑–∞–ª–æ–≥–∏—Ä—É–µ–º –±–µ–∑ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
                    await _log_event(
                        db=db,
                        event_id=event_id,
                        action_type=atype,
                        asset="TON",
                        amount=amount_ton,
                        decimals=9,
                        from_addr=from_addr,
                        to_addr=wallet,
                        memo=comment,
                        telegram_id=tg_id,
                        parsed_amount_efhc=None,
                        vip_requested=False,
                    )
                    handled_actions += 1
                    continue

                # ------------------------------
                # 2) –í—Ö–æ–¥—è—â–∏–π JettonTransfer (EFHC/USDT/–∏ —Ç.–¥.)
                # ------------------------------
                if atype == "JettonTransfer" and action.get("JettonTransfer"):
                    obj = action["JettonTransfer"]
                    jetton_addr = ((obj.get("jetton", {}) or {}).get("address") or "").strip()
                    to_addr = (obj.get("recipient", {}) or {}).get("address") or ""
                    if (to_addr or "").lower() != wallet.lower():
                        continue  # –Ω–µ –∫ –Ω–∞–º

                    raw_amount = obj.get("amount") or "0"
                    decimals = int(obj.get("decimals") or obj.get("jetton", {}).get("decimals") or settings.EFHC_DECIMALS)
                    comment = obj.get("comment") or ""
                    from_addr = (obj.get("sender", {}) or {}).get("address") or ""

                    # EFHC jetton?
                    if efhc_addr and jetton_addr == efhc_addr:
                        amount_efhc = _decode_jetton_amount(raw_amount, decimals=decimals)
                        # –ú–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –∏–∑ memo tg_id, –Ω–æ –Ω–∞—á–∏—Å–ª–∏–º –¥–∞–∂–µ –±–µ–∑ memo –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º—ã –Ω–µ –º–æ–∂–µ–º.
                        # –¢—Ä–µ–±—É–µ—Ç—Å—è tg_id! –ò–Ω–∞—á–µ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç.
                        tg_id, parsed_amt, asset, vip_flag = parse_memo_for_payment(comment)

                        # –ï—Å–ª–∏ tg_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –Ω–∞—á–∏—Å–ª—è–µ–º amount_efhc (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º parsed_amt)
                        if tg_id:
                            await credit_efhc(db, tg_id, amount_efhc)
                            await _log_event(
                                db=db,
                                event_id=event_id,
                                action_type=atype,
                                asset="EFHC",
                                amount=amount_efhc,
                                decimals=decimals,
                                from_addr=from_addr,
                                to_addr=wallet,
                                memo=comment,
                                telegram_id=tg_id,
                                parsed_amount_efhc=_d3(amount_efhc),
                                vip_requested=False,
                            )
                        else:
                            # –ë–µ–∑ tg_id –Ω–µ –º–æ–∂–µ–º –∑–∞—á–∏—Å–ª–∏—Ç—å ‚Äî –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
                            await _log_event(
                                db=db,
                                event_id=event_id,
                                action_type=atype,
                                asset="EFHC",
                                amount=amount_efhc,
                                decimals=decimals,
                                from_addr=from_addr,
                                to_addr=wallet,
                                memo=comment,
                                telegram_id=None,
                                parsed_amount_efhc=None,
                                vip_requested=False,
                            )
                        handled_actions += 1
                        continue

                    # USDT jetton? (–µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ ‚Äî –º–æ–∂–Ω–æ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É memo)
                    if usdt_addr and jetton_addr == usdt_addr:
                        amount_usdt = _decode_jetton_amount(raw_amount, decimals=decimals)
                        # –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º, –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ EFHC (—ç—Ç–æ –Ω–∞ –≤–∞—à–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ).
                        await _log_event(
                            db=db,
                            event_id=event_id,
                            action_type=atype,
                            asset="USDT",
                            amount=amount_usdt,
                            decimals=decimals,
                            from_addr=from_addr,
                            to_addr=wallet,
                            memo=comment,
                            telegram_id=None,
                            parsed_amount_efhc=None,
                            vip_requested=False,
                        )
                        handled_actions += 1
                        continue

                    # –ò–Ω–æ–π jetton ‚Äî –ª–æ–≥–∏—Ä—É–µ–º
                    jetton_amount = _decode_jetton_amount(raw_amount, decimals=decimals)
                    await _log_event(
                        db=db,
                        event_id=event_id,
                        action_type=atype,
                        asset=f"JETTON:{jetton_addr}",
                        amount=jetton_amount,
                        decimals=decimals,
                        from_addr=from_addr,
                        to_addr=wallet,
                        memo=comment,
                        telegram_id=None,
                        parsed_amount_efhc=None,
                        vip_requested=False,
                    )
                    handled_actions += 1
                    continue

                # –ü—Ä–æ—á–∏–µ —Ç–∏–ø—ã action ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –ª–æ–≥–∏—Ä—É–µ–º –ø–æ –∂–µ–ª–∞–Ω–∏—é
                # –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ ‚Äî –∏–≥–Ω–æ—Ä.
                continue

            except Exception as e:
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø–æ action, –Ω–æ –ø–∏—à–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
                print(f"[TON] action error in event {ev.get('event_id')}: {e}")
                continue

    return handled_actions
