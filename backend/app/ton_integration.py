# üìÇ backend/app/ton_integration.py ‚Äî –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TON (TonAPI) –∏ –∞–≤—Ç–æ-–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è, Shop<Order> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
# -----------------------------------------------------------------------------------------------------------------
# –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –º–æ–¥—É–ª—å:
#   ‚Ä¢ –û–ø—Ä–∞—à–∏–≤–∞–µ—Ç TonAPI (tonapi.io) –ø–æ –∞–¥—Ä–µ—Å—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è (TON_WALLET_ADDRESS).
#   ‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è:
#       - TonTransfer (–≤—Ö–æ–¥—è—â–∏–π TON –ø–µ—Ä–µ–≤–æ–¥)
#       - JettonTransfer (–≤—Ö–æ–¥—è—â–∏–π jetton; –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è EFHC –∏ USDT)
#   ‚Ä¢ –ü–∞—Ä—Å–∏—Ç memo/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (comment) –ø–æ –≤–∞—à–µ–º—É —Ñ–æ—Ä–º–∞—Ç—É:
#       "id telegram 4357333, 100 EFHC" –∏–ª–∏ "id:4357333 100 efhc" | "vip" | "vip nft"
#       –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: "order efhc_pack_100" / "order vip_nft" ‚Äî –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ shop_orders.
#   ‚Ä¢ –î–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ event_id (TonAPI) –∏ –ù–ï –∑–∞—á–∏—Å–ª—è–µ—Ç –≤—Ç–æ—Ä–æ–π —Ä–∞–∑.
#   ‚Ä¢ –ù–∞—á–∏—Å–ª—è–µ—Ç EFHC –∏/–∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã shop_orders (awaiting_payment -> paid/completed/pending_nft_delivery).
#
# –ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏/—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
#   ‚Ä¢ –í config.py –∑–∞–¥–∞–Ω—ã:
#       - TON_WALLET_ADDRESS (–∫–æ—à–µ–ª—ë–∫ Tonkeeper –¥–ª—è –ø—Ä–∏—ë–º–∞)
#       - NFT_PROVIDER_BASE_URL (https://tonapi.io)
#       - NFT_PROVIDER_API_KEY (–≤–∞—à API key)
#       - EFHC_TOKEN_ADDRESS (–∞–¥—Ä–µ—Å jetton EFHC - –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π, –∏–Ω–∞—á–µ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º)
#       - USDT_JETTON_ADDRESS (–∞–¥—Ä–µ—Å jetton USDT - –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º USDT –≤ TON-—Å–µ—Ç–∏)
#   ‚Ä¢ –°—Ö–µ–º—ã –ë–î —Å–æ–∑–¥–∞—é—Ç—Å—è –º–æ–¥—É–ª—è–º–∏ database.ensure_schemas() –∏ ensure_ton_tables()/ensure_shop_tables()
#   ‚Ä¢ –í—Å–µ mutate-–æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ë–î –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
#
# –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:
#   ‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –≤ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ (—Å–º. main.py ‚Üí ton_watcher_loop), –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º:
#         await process_incoming_payments(db, limit=50)
#
# –¢–∞–±–ª–∏—Ü—ã:
#   efhc_core.ton_events_log ‚Äî –ª–æ–≥ –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π TON/Jetton
#   efhc_core.balances ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å (efhc, bonus, kwh)
#   efhc_core.users ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
#   efhc_core.user_vip ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π VIP —Ñ–ª–∞–≥ (–≤–ª–∏—è–Ω–∏–µ +7% –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é)
#   efhc_core.shop_orders ‚Äî –∑–∞–∫–∞–∑—ã –º–∞–≥–∞–∑–∏–Ω–∞ (awaiting_payment -> paid/completed/pending_nft_delivery)
#
# –õ–æ–≥–∏–∫–∞ Shop + TonIntegration:
#   ‚Ä¢ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –∑–∞–∫–∞–∑ –ø–æ–∫—É–ø–∫–∏ EFHC "efhc_pack_100" –º–µ—Ç–æ–¥–æ–º TON/USDT ‚Äî —Å–æ–∑–¥–∞—ë—Ç—Å—è –∑–∞–∫–∞–∑ "awaiting_payment".
#   ‚Ä¢ –ö–æ–≥–¥–∞ –ø–æ—Å—Ç—É–ø–∏—Ç –æ–ø–ª–∞—Ç–∞ —Å memo "id <tg> 100 EFHC; order efhc_pack_100" (TON) –∏–ª–∏ "order efhc_pack_100" (USDT):
#        ‚Ü≥ –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ ‚Äî –æ—Ç–º–µ—á–∞–µ–º —Å—Ç–∞—Ç—É—Å "paid" –∏ "completed".
#        ‚Ü≥ –ù–∞—á–∏—Å–ª—è–µ–º EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤ TON —Å–ª—É—á–∞–µ ‚Äî —É–∂–µ –Ω–∞—á–∞–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ memo/efhc –ª–æ–≥–∏–∫–µ).
#   ‚Ä¢ –î–ª—è VIP NFT –ø—Ä–∏ –º–µ—Ç–æ–¥–µ TON/USDT ‚Äî –æ—Ç–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ "paid" –∏ —Å—Ç–∞–≤–∏–º "pending_nft_delivery".
#     –ê–¥–º–∏–Ω –ø–æ—Ç–æ–º –≤—Ä—É—á–Ω—É—é –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç NFT –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑ –∫–∞–∫ "completed".
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
#   ‚Ä¢ –ü—Ä–∏ Jetton EFHC ‚Äî –º—ã –Ω–∞—á–∏—Å–ª—è–µ–º EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –µ—Å—Ç—å tg –≤ memo.
#   ‚Ä¢ –ü—Ä–∏ TON –∏ "id <tg> <N> EFHC" ‚Äî –Ω–∞—á–∏—Å–ª—è–µ–º N EFHC (–±–µ–∑ –ø—Ä—è–º–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫—É—Ä—Å–∞).
#   ‚Ä¢ –î–ª—è USDT Jetton ‚Äî –µ—Å–ª–∏ memo —Å–æ–¥–µ—Ä–∂–∏—Ç "order efhc_pack_X" ‚Üí –∑–∞—á–∏—Å–ª–∏–º EFHC = X –≤—Ä—É—á–Ω—É—é –∑–¥–µ—Å—å (–±–µ–∑ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ EFHC).
# -----------------------------------------------------------------------------------------------------------------

from __future__ import annotations

import re
import time
from decimal import Decimal, ROUND_DOWN
from typing import Any, Dict, List, Optional, Tuple

import httpx
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text, select

from .config import get_settings

settings = get_settings()

# ------------------------------------------------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
# ------------------------------------------------------------

NANO_TON_DECIMALS = Decimal("1e9")   # 1 TON = 1e9 nanotons
DEC3 = Decimal("0.001")
DEC9 = Decimal("0.000000001")


def _d3(x: Decimal) -> Decimal:
    """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 3—Ö –∑–Ω–∞–∫–æ–≤ (–¥–ª—è EFHC/kWh/bonus)."""
    return x.quantize(DEC3, rounding=ROUND_DOWN)


def _d9(x: Decimal) -> Decimal:
    """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 9 –∑–Ω–∞–∫–æ–≤ (–¥–ª—è TON)."""
    return x.quantize(DEC9, rounding=ROUND_DOWN)


# ------------------------------------------------------------
# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü (idempotent)
# ------------------------------------------------------------

CREATE_TABLES_SQL = """
-- –õ–æ–≥ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π TonAPI
CREATE TABLE IF NOT EXISTS efhc_core.ton_events_log (
    event_id TEXT PRIMARY KEY,
    ts TIMESTAMPTZ DEFAULT now(),
    action_type TEXT,
    asset TEXT,
    amount NUMERIC(30, 9),
    decimals INT,
    from_addr TEXT,
    to_addr TEXT,
    memo TEXT,
    telegram_id BIGINT NULL,
    parsed_amount_efhc NUMERIC(30, 3) NULL,
    vip_requested BOOLEAN DEFAULT FALSE,
    processed BOOLEAN DEFAULT TRUE,
    processed_at TIMESTAMPTZ DEFAULT now()
);

-- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
CREATE TABLE IF NOT EXISTS efhc_core.users (
    telegram_id BIGINT PRIMARY KEY,
    username TEXT NULL,
    wallet_address TEXT NULL,      -- –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π TON-–∫–æ—à–µ–ª–µ–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    created_at TIMESTAMPTZ DEFAULT now()
);

-- –ë–∞–ª–∞–Ω—Å—ã (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—à–µ–ª—ë–∫ EFHC/bonus/kwh)
CREATE TABLE IF NOT EXISTS efhc_core.balances (
    telegram_id BIGINT PRIMARY KEY REFERENCES efhc_core.users(telegram_id) ON DELETE CASCADE,
    efhc NUMERIC(30, 3) DEFAULT 0,
    bonus NUMERIC(30, 3) DEFAULT 0,
    kwh  NUMERIC(30, 3) DEFAULT 0
);

-- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π VIP-—Ñ–ª–∞–≥ (–Ω–µ –∞–¥–º–∏–Ω; –∞–¥–º–∏–Ω –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ NFT whitelist)
CREATE TABLE IF NOT EXISTS efhc_core.user_vip (
    telegram_id BIGINT PRIMARY KEY REFERENCES efhc_core.users(telegram_id) ON DELETE CASCADE,
    since TIMESTAMPTZ DEFAULT now()
);

-- –ó–∞–∫–∞–∑—ã –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
CREATE TABLE IF NOT EXISTS efhc_core.shop_orders (
    id BIGSERIAL PRIMARY KEY,
    telegram_id BIGINT NOT NULL,
    item_id TEXT NOT NULL,
    method TEXT NOT NULL, -- 'efhc' | 'ton' | 'usdt'
    status TEXT NOT NULL DEFAULT 'pending', -- 'pending', 'awaiting_payment', 'paid', 'completed', 'canceled', 'pending_nft_delivery'
    amount NUMERIC(30, 3) NOT NULL DEFAULT 0,
    currency TEXT NOT NULL, -- 'EFHC' | 'TON' | 'USDT'
    memo TEXT NULL,
    extra_data JSONB NULL,
    created_at TIMESTAMPTZ DEFAULT now()
);
"""


async def ensure_ton_tables(db: AsyncSession) -> None:
    """–°–æ–∑–¥–∞—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."""
    await db.execute(text(CREATE_TABLES_SQL))
    await db.commit()


# ------------------------------------------------------------
# –ü–∞—Ä—Å–µ—Ä MEMO/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
# ------------------------------------------------------------

MEMO_RE = re.compile(
    r"""
    (?:
        id[\s:_-]*telegram   # 'id telegram' (–≤–æ–∑–º–æ–∂–Ω—ã : _ -)
        |id                  # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ 'id'
        |tg
        |telegram
    )?
    [\s:_-]*
    (?P<tg>\d{5,15})?
    [^\dA-Za-z]+
    (?P<amount>\d+(?:[.,]\d{1,9})?)?
    \s*
    (?P<asset>efhc|vip|nft|vip\s*nft)?
    """,
    re.IGNORECASE | re.VERBOSE,
)

VIP_RE = re.compile(r"\b(vip(?:\s*nft)?)\b", re.IGNORECASE)
EFHC_RE = re.compile(r"\befhc\b", re.IGNORECASE)
ORDER_RE = re.compile(r"order\s+([A-Za-z0-9_]+)", re.IGNORECASE)


def parse_memo_for_payment(memo: str) -> Tuple[Optional[int], Optional[Decimal], Optional[str], bool, Optional[str]]:
    """
    –†–∞–∑–±–∏—Ä–∞–µ—Ç memo/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (telegram_id, amount, asset, vip_flag, order_item_id)
      - telegram_id: int | None
      - amount: Decimal | None (–≤ EFHC)
      - asset: 'EFHC' | None
      - vip_flag: True, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ VIP / VIP NFT
      - order_item_id: –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ 'order <item_id>' –µ—Å–ª–∏ –µ—Å—Ç—å
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Ç–∏–ª–∏:
      "id telegram 4357333, 100 EFHC"
      "id:4357333 100 efhc"
      "tg 4357333 vip"
      "4357333 vip nft"
      "id 123456 100 EFHC; order efhc_pack_100"
    """
    if not memo:
        return (None, None, None, False, None)

    memo_norm = memo.strip()
    vip_flag = bool(VIP_RE.search(memo_norm))

    m = MEMO_RE.search(memo_norm)
    tg_id: Optional[int] = None
    amount: Optional[Decimal] = None
    asset: Optional[str] = None

    if m:
        tg_str = m.group("tg")
        amt_str = m.group("amount")
        asset_str = m.group("asset")

        if tg_str:
            try:
                tg_id = int(tg_str)
            except Exception:
                tg_id = None
        if amt_str:
            amt_str = amt_str.replace(",", ".")
            try:
                amount = Decimal(amt_str)
            except Exception:
                amount = None
        if asset_str:
            if "vip" in asset_str.lower():
                asset = "VIP"
                vip_flag = True
            elif "efhc" in asset_str.lower():
                asset = "EFHC"

    # –ü–æ–¥—Å—Ç–∞–≤–∏–º EFHC, –µ—Å–ª–∏ –≤ memo –µ—Å—Ç—å 'efhc'
    if asset is None and EFHC_RE.search(memo_norm):
        asset = "EFHC"

    # –ò—â–µ–º order item_id
    o = ORDER_RE.search(memo_norm)
    order_item_id = o.group(1) if o else None

    return (tg_id, amount, asset, vip_flag, order_item_id)


# ------------------------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ –∏ VIP
# ------------------------------------------------------------

async def _ensure_user_exists(db: AsyncSession, telegram_id: int) -> None:
    """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ efhc_core.users, –∞ —Ç–∞–∫–∂–µ –∑–∞–ø–∏—Å—å –≤ balances."""
    await db.execute(
        text("""
            INSERT INTO efhc_core.users (telegram_id)
            VALUES (:tg)
            ON CONFLICT (telegram_id) DO NOTHING
        """),
        {"tg": telegram_id},
    )
    await db.execute(
        text("""
            INSERT INTO efhc_core.balances (telegram_id)
            VALUES (:tg)
            ON CONFLICT (telegram_id) DO NOTHING
        """),
        {"tg": telegram_id},
    )
    await db.commit()


async def credit_efhc(db: AsyncSession, telegram_id: int, amount_efhc: Decimal) -> None:
    """–ù–∞—á–∏—Å–ª–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    await _ensure_user_exists(db, telegram_id)
    await db.execute(
        text("""
            UPDATE efhc_core.balances
               SET efhc = COALESCE(efhc, 0) + :amt
             WHERE telegram_id = :tg
        """),
        {"amt": str(_d3(amount_efhc)), "tg": telegram_id},
    )
    await db.commit()


async def set_user_vip(db: AsyncSession, telegram_id: int) -> None:
    """–ü–æ–º–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ VIP (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ–ª–∞–≥)."""
    await _ensure_user_exists(db, telegram_id)
    await db.execute(
        text("""
            INSERT INTO efhc_core.user_vip (telegram_id)
            VALUES (:tg)
            ON CONFLICT (telegram_id) DO NOTHING
        """),
        {"tg": telegram_id},
    )
    await db.commit()


# ------------------------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å shop_orders ‚Äî –ø—Ä–∏–≤—è–∑–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ memo –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
# ------------------------------------------------------------

def _efhc_amount_from_order_item(item_id: str) -> Optional[Decimal]:
    """
    –ï—Å–ª–∏ order efhc_pack_<N> ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç N (—Å–∫–æ–ª—å–∫–æ EFHC –Ω–∞—á–∏—Å–ª–∏—Ç—å).
    –ò–Ω–∞—á–µ ‚Äî None.
    """
    if item_id and item_id.lower().startswith("efhc_pack_"):
        try:
            n = item_id.split("_")[-1]
            v = Decimal(n)
            return _d3(v)
        except Exception:
            return None
    return None


async def _update_order_status_on_payment(
    db: AsyncSession,
    telegram_id: int,
    order_item_id: str,
    currency: str,
    paid_amount: Decimal,
    log_memo: str
) -> None:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∑–∞–∫–∞–∑ –≤ 'awaiting_payment' –ø–æ telegram_id + item_id –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ –Ω—É–∂–Ω—ã–π —Å—Ç–∞—Ç—É—Å:
      - efhc_pack_X ‚Üí 'paid' + 'completed'
      - vip_nft ‚Üí 'paid' + 'pending_nft_delivery'
      - –ø—Ä–æ—á–∏–µ ‚Üí 'paid' (–∏–ª–∏ 'completed' –ø–æ –ª–æ–≥–∏–∫–µ)
    –õ–æ–≥ –≤ ton_events_log —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω —Ä–∞–Ω–µ–µ, –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å shop_orders.
    """
    # –ò—â–µ–º "—Å–≤–µ–∂–∏–π" –∑–∞–∫–∞–∑ —Å –æ–∂–∏–¥–∞–µ–º—ã–º item_id, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—Ç–∞—Ç—É—Å awaiting_payment
    q = await db.execute(text("""
        SELECT id, status, amount, currency, memo
          FROM efhc_core.shop_orders
         WHERE telegram_id = :tg
           AND item_id = :item
           AND status = 'awaiting_payment'
         ORDER BY created_at DESC
         LIMIT 1
    """), {"tg": telegram_id, "item": order_item_id})
    row = q.fetchone()
    if not row:
        # –ù–µ—Ç –∑–∞–∫–∞–∑–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª—Å—è.
        return

    order_id, cur_status, exp_amount, exp_currency, memo = row
    # –î–ª—è –∞–∫–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É–º–º—É/–≤–∞–ª—é—Ç—É; –µ—Å–ª–∏ —Å—É–º–º—ã –ù–ï —Å–æ–≤–ø–∞–¥–∞—é—Ç ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –±—É–¥–µ–º –ø–æ–º–µ—á–∞—Ç—å Paid (–∏–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ).
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–¥–µ —Å—Ç–æ–∏—Ç —Å–¥–µ–ª–∞—Ç—å —Å—Ç—Ä–æ–≥—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º 'awaiting_payment' -> 'paid'. –î–∞–ª–µ–µ ‚Äî —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è item_id.
    await db.execute(text("""
        UPDATE efhc_core.shop_orders
           SET status = 'paid'
         WHERE id = :oid
    """), {"oid": order_id})

    # –¢–µ–ø–µ—Ä—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ/–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≤–∞—Ä–Ω–æ–π –ª–æ–≥–∏–∫–∏
    if order_item_id.lower().startswith("efhc_pack_"):
        # –ü–∞–∫–µ—Ç EFHC: –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å 'completed' ‚Äî EFHC —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ª–æ–≥–∏–∫–æ–π TON (–∏–ª–∏ USDT –±–ª–æ–∫–æ–º –Ω–∏–∂–µ)
        await db.execute(text("""
            UPDATE efhc_core.shop_orders
               SET status = 'completed'
             WHERE id = :oid
        """), {"oid": order_id})
        await db.commit()
        return

    if order_item_id == "vip_nft":
        # VIP NFT ‚Äî –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ–º —Ä–æ–≤–Ω–æ —Å–µ–π—á–∞—Å (–≤—Ä—É—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω), –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ pending_nft_delivery
        await db.execute(text("""
            UPDATE efhc_core.shop_orders
               SET status = 'pending_nft_delivery'
             WHERE id = :oid
        """), {"oid": order_id})
        await db.commit()
        return

    # –ò–Ω–æ–π —Ç–æ–≤–∞—Ä: —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ 'completed' (–∏–ª–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ)
    await db.execute(text("""
        UPDATE efhc_core.shop_orders
           SET status = 'completed'
         WHERE id = :oid
    """), {"oid": order_id})
    await db.commit()


# ------------------------------------------------------------
# –í—ã–∑–æ–≤—ã TonAPI
# ------------------------------------------------------------

def _tonapi_headers() -> Dict[str, str]:
    """–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ TonAPI. API key –ø–µ—Ä–µ–¥–∞—ë–º –≤ X-API-Key."""
    hdrs = {"Accept": "application/json"}
    if settings.NFT_PROVIDER_API_KEY:
        hdrs["X-API-Key"] = settings.NFT_PROVIDER_API_KEY
    return hdrs


async def fetch_address_events(
    address: str,
    limit: int = 50,
    before_lt: Optional[int] = None
) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∞–¥—Ä–µ—Å–∞ (account events) —Å TonAPI v2.
    –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: /v2/accounts/{account_id}/events
    """
    base = settings.NFT_PROVIDER_BASE_URL.rstrip("/")
    url = f"{base}/v2/accounts/{address}/events?limit={limit}"
    if before_lt is not None:
        url += f"&before_lt={before_lt}"
    async with httpx.AsyncClient(timeout=20.0) as client:
        r = await client.get(url, headers=_tonapi_headers())
        r.raise_for_status()
        return r.json()


# ------------------------------------------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
# ------------------------------------------------------------

async def _is_event_seen(db: AsyncSession, event_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π event_id –≤ –ª–æ–≥–µ (–∏–Ω–∞—á–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ)."""
    q = await db.execute(
        text("SELECT 1 FROM efhc_core.ton_events_log WHERE event_id = :eid"),
        {"eid": event_id},
    )
    return q.scalar() is not None


async def _log_event(
    db: AsyncSession,
    event_id: str,
    action_type: str,
    asset: str,
    amount: Decimal,
    decimals: int,
    from_addr: str,
    to_addr: str,
    memo: Optional[str],
    telegram_id: Optional[int],
    parsed_amount_efhc: Optional[Decimal],
    vip_requested: bool,
) -> None:
    """–ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –ª–æ–≥. processed=TRUE, —Ç.–∫. –º—ã —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    await db.execute(
        text("""
            INSERT INTO efhc_core.ton_events_log(
                event_id, action_type, asset, amount, decimals, from_addr, to_addr, memo,
                telegram_id, parsed_amount_efhc, vip_requested, processed
            )
            VALUES (:eid, :atype, :asset, :amt, :dec, :from_addr, :to_addr, :memo,
                    :tg, :pa, :vip, TRUE)
            ON CONFLICT (event_id) DO NOTHING
        """),
        {
            "eid": event_id,
            "atype": action_type,
            "asset": asset,
            "amt": str(amount),
            "dec": decimals,
            "from_addr": from_addr,
            "to_addr": to_addr,
            "memo": memo or "",
            "tg": telegram_id,
            "pa": str(parsed_amount_efhc) if parsed_amount_efhc is not None else None,
            "vip": vip_requested,
        },
    )
    await db.commit()


def _decode_ton_amount(nano: int) -> Decimal:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ nanotons ‚Üí TON (Decimal c 9 –∑–Ω–∞–∫–∞–º–∏)."""
    return _d9(Decimal(nano) / NANO_TON_DECIMALS)


def _decode_jetton_amount(raw: str, decimals: int) -> Decimal:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–æ–≤—É—é —Å—É–º–º—É jetton (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã) –≤ Decimal."""
    q = Decimal(f"1e{decimals}")
    return (Decimal(raw) / q).quantize(Decimal(f"1e-{decimals}"), rounding=ROUND_DOWN)


# ------------------------------------------------------------
# –ü—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –≤—Ö–æ–¥—è—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
# ------------------------------------------------------------

async def process_incoming_payments(db: AsyncSession, limit: int = 50) -> int:
    """
    –ü—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç TonAPI –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤—Ö–æ–¥—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö actions.
    """
    await ensure_ton_tables(db)

    wallet = settings.TON_WALLET_ADDRESS
    if not wallet:
        print("[TON][WARN] TON_WALLET_ADDRESS –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ TON –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return 0

    try:
        data = await fetch_address_events(address=wallet, limit=limit)
    except httpx.HTTPError as e:
        print(f"[TON] fetch events error: {e}")
        return 0

    events: List[Dict[str, Any]] = data.get("events", []) or data.get("items", []) or []
    handled_actions = 0

    efhc_addr = (settings.EFHC_TOKEN_ADDRESS or "").strip()    # –µ—Å–ª–∏ –µ—Å—Ç—å EFHC –∫–∞–∫ jetton
    usdt_addr = (getattr(settings, "USDT_JETTON_ADDRESS", "") or "").strip()

    for ev in events:
        event_id = ev.get("event_id") or ev.get("id") or ""
        if not event_id:
            continue
        # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
        if await _is_event_seen(db, event_id=event_id):
            continue

        actions = ev.get("actions", []) or []
        for action in actions:
            try:
                atype = action.get("type") or ""

                # ------------------------------
                # 1) –í—Ö–æ–¥—è—â–∏–π –Ω–∞—Ç–∏–≤–Ω—ã–π TON
                # ------------------------------
                if atype == "TonTransfer" and action.get("TonTransfer"):
                    obj = action["TonTransfer"]
                    to_addr = (obj.get("recipient", {}) or {}).get("address") or ""
                    if (to_addr or "").lower() != wallet.lower():
                        continue
                    amount_nano = int(obj.get("amount", 0))
                    amount_ton = _decode_ton_amount(amount_nano)
                    comment = obj.get("comment") or obj.get("payload") or ""
                    from_addr = (obj.get("sender", {}) or {}).get("address") or ""

                    tg_id, parsed_amt, asset, vip_flag, order_item_id = parse_memo_for_payment(comment)

                    # –ï—Å–ª–∏ VIP ‚Äî —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ (–µ—Å–ª–∏ –µ—Å—Ç—å tg_id)
                    if vip_flag and tg_id:
                        await set_user_vip(db, tg_id)
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ —ç—Ç–æ —É–∫–∞–∑–∞–Ω–æ –∫–∞–∫ "order vip_nft", —Ç–æ –æ–±–Ω–æ–≤–∏–º –∑–∞–∫–∞–∑
                        if order_item_id == "vip_nft":
                            await _update_order_status_on_payment(db, tg_id, order_item_id, "TON", amount_ton, comment)

                        await _log_event(
                            db=db,
                            event_id=event_id,
                            action_type=atype,
                            asset="TON",
                            amount=amount_ton,
                            decimals=9,
                            from_addr=from_addr,
                            to_addr=wallet,
                            memo=comment,
                            telegram_id=tg_id,
                            parsed_amount_efhc=None,
                            vip_requested=True,
                        )
                        handled_actions += 1
                        continue

                    # –ï—Å–ª–∏ –≤ memo —É–∫–∞–∑–∞–Ω EFHC ‚Äî –∑–∞—á–∏—Å–ª–∏–º EFHC
                    # –ù–∞–ø—Ä–∏–º–µ—Ä: 'id 123 100 EFHC; order efhc_pack_100'
                    if tg_id and asset == "EFHC" and parsed_amt and parsed_amt > 0:
                        await credit_efhc(db, tg_id, parsed_amt)
                        # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–∫–∞–∑–∞, —Ç–æ –æ—Ç–º–µ—á–∞–µ–º "paid" + "completed" –¥–ª—è efhc_pack_XXX
                        if order_item_id and order_item_id.lower().startswith("efhc_pack_"):
                            await _update_order_status_on_payment(db, tg_id, order_item_id, "TON", amount_ton, comment)

                        await _log_event(
                            db=db,
                            event_id=event_id,
                            action_type=atype,
                            asset="TON",
                            amount=amount_ton,
                            decimals=9,
                            from_addr=from_addr,
                            to_addr=wallet,
                            memo=comment,
                            telegram_id=tg_id,
                            parsed_amount_efhc=_d3(parsed_amt),
                            vip_requested=False,
                        )
                        handled_actions += 1
                        continue

                    # TON –±–µ–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º–æ–≥–æ memo
                    await _log_event(
                        db=db,
                        event_id=event_id,
                        action_type=atype,
                        asset="TON",
                        amount=amount_ton,
                        decimals=9,
                        from_addr=from_addr,
                        to_addr=wallet,
                        memo=comment,
                        telegram_id=tg_id,
                        parsed_amount_efhc=None,
                        vip_requested=False,
                    )
                    handled_actions += 1
                    continue

                # ------------------------------
                # 2) –í—Ö–æ–¥—è—â–∏–π JettonTransfer (EFHC/USDT/–∏ —Ç.–¥.)
                # ------------------------------
                if atype == "JettonTransfer" and action.get("JettonTransfer"):
                    obj = action["JettonTransfer"]
                    jetton_addr = ((obj.get("jetton", {}) or {}).get("address") or "").strip()
                    to_addr = (obj.get("recipient", {}) or {}).get("address") or ""
                    if (to_addr or "").lower() != wallet.lower():
                        continue

                    raw_amount = obj.get("amount") or "0"
                    decimals = int(obj.get("decimals") or obj.get("jetton", {}).get("decimals") or settings.EFHC_DECIMALS)
                    comment = obj.get("comment") or ""
                    from_addr = (obj.get("sender", {}) or {}).get("address") or ""

                    # EFHC jetton?
                    if efhc_addr and jetton_addr == efhc_addr:
                        amount_efhc = _decode_jetton_amount(raw_amount, decimals=decimals)
                        tg_id, parsed_amt, asset, vip_flag, order_item_id = parse_memo_for_payment(comment)

                        if tg_id:
                            # EFHC jetton ‚Äî –Ω–∞—á–∏—Å–ª–∏–º EFHC ~ amount_efhc (jetton –µ—Å—Ç—å EFHC)
                            await credit_efhc(db, tg_id, amount_efhc)
                            # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–∫–∞–∑ 'efhc_pack_x', –Ω–æ —á–∞—Å—Ç–æ EFHC –∏–∑ –≤–Ω–µ—à–Ω–µ–π —Å–µ—Ç–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è
                            if order_item_id and order_item_id.lower().startswith("efhc_pack_"):
                                # –ù–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –∑–∞ EFHC jetton –º—ã –Ω–µ –º–æ–∂–µ–º –∫—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç—ã EFHC (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º—ã—Å–ª–∞),
                                # –Ω–æ –µ—Å–ª–∏ –º–∞–≥–∞–∑–∏–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–∞–∫ ‚Äî —Ç–æ –æ—Ç–º–µ—Ç–∏–º –∑–∞–∫–∞–∑ –∫–∞–∫ completed.
                                await _update_order_status_on_payment(db, tg_id, order_item_id, "JETTON_EFHC", amount_efhc, comment)

                            await _log_event(
                                db=db,
                                event_id=event_id,
                                action_type=atype,
                                asset="EFHC",
                                amount=amount_efhc,
                                decimals=decimals,
                                from_addr=from_addr,
                                to_addr=wallet,
                                memo=comment,
                                telegram_id=tg_id,
                                parsed_amount_efhc=_d3(amount_efhc),
                                vip_requested=False,
                            )
                        else:
                            await _log_event(
                                db=db,
                                event_id=event_id,
                                action_type=atype,
                                asset="EFHC",
                                amount=amount_efhc,
                                decimals=decimals,
                                from_addr=from_addr,
                                to_addr=wallet,
                                memo=comment,
                                telegram_id=None,
                                parsed_amount_efhc=None,
                                vip_requested=False,
                            )
                        handled_actions += 1
                        continue

                    # USDT jetton?
                    if usdt_addr and jetton_addr == usdt_addr:
                        amount_usdt = _decode_jetton_amount(raw_amount, decimals=decimals)
                        tg_id, parsed_amt, asset, vip_flag, order_item_id = parse_memo_for_payment(comment)
                        # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–∫–∞–∑ EFHC –ø–∞–∫–µ—Ç–∞ ‚Äî –Ω–∞—á–Ω–µ–º –Ω–∞—á–∏—Å–ª—è—Ç—å EFHC
                        if tg_id and order_item_id and order_item_id.lower().startswith("efhc_pack_"):
                            efhc_amount = _efhc_amount_from_order_item(order_item_id)
                            if efhc_amount and efhc_amount > 0:
                                await credit_efhc(db, tg_id, efhc_amount)
                                await _update_order_status_on_payment(db, tg_id, order_item_id, "USDT", amount_usdt, comment)

                        # –ï—Å–ª–∏ VIP NFT ‚Äî –æ—Ç–º–µ—á–∞–µ–º –æ–ø–ª–∞—á–µ–Ω –∏ pending_nft_delivery
                        if tg_id and order_item_id == "vip_nft":
                            await _update_order_status_on_payment(db, tg_id, order_item_id, "USDT", amount_usdt, comment)

                        await _log_event(
                            db=db,
                            event_id=event_id,
                            action_type=atype,
                            asset="USDT",
                            amount=amount_usdt,
                            decimals=decimals,
                            from_addr=from_addr,
                            to_addr=wallet,
                            memo=comment,
                            telegram_id=tg_id if tg_id else None,
                            parsed_amount_efhc=None,
                            vip_requested=False,
                        )
                        handled_actions += 1
                        continue

                    # –ò–Ω–æ–π jetton ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    jetton_amount = _decode_jetton_amount(raw_amount, decimals=decimals)
                    await _log_event(
                        db=db,
                        event_id=event_id,
                        action_type=atype,
                        asset=f"JETTON:{jetton_addr}",
                        amount=jetton_amount,
                        decimals=decimals,
                        from_addr=from_addr,
                        to_addr=wallet,
                        memo=comment,
                        telegram_id=None,
                        parsed_amount_efhc=None,
                        vip_requested=False,
                    )
                    handled_actions += 1
                    continue

                # –ü—Ä–æ—á–∏–µ —Ç–∏–ø—ã action ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                continue

            except Exception as e:
                print(f"[TON] action error in event {ev.get('event_id')}: {e}")
                continue

    return handled_actions
