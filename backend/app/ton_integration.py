# üìÇ backend/app/ton_integration.py ‚Äî –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TON (TonAPI) –∏ –∞–≤—Ç–æ-–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
# -----------------------------------------------------------------------------
# –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –º–æ–¥—É–ª—å:
#   ‚Ä¢ –û–ø—Ä–∞—à–∏–≤–∞–µ—Ç TonAPI (tonapi.io) –ø–æ –∞–¥—Ä–µ—Å—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è (TON_WALLET_ADDRESS) –∏
#     —á–∏—Ç–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è/—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
#   ‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è:
#       - TonTransfer (–≤—Ö–æ–¥—è—â–∏–π TON –ø–µ—Ä–µ–≤–æ–¥)
#       - JettonTransfer (–≤—Ö–æ–¥—è—â–∏–π jetton; –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è EFHC –∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ USDT)
#   ‚Ä¢ –ü–∞—Ä—Å–∏—Ç memo/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (comment) –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–∞–º:
#       1) –í–∞—à —Ñ–æ—Ä–º–∞—Ç: "id telegram 4357333, 100 EFHC", "id:4357333 100 efhc", "tg 4357333 vip", "4357333 vip nft"
#       2) –§–æ—Ä–º–∞—Ç Shop-–∫–æ–¥–æ–≤: "362746228 EFHC_100_TON", "tg=362746228 code=VIP_USDT"
#   ‚Ä¢ –î–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ event_id (TonAPI) ‚Äî –ù–ï –∑–∞—á–∏—Å–ª—è–µ—Ç –≤—Ç–æ—Ä–æ–π —Ä–∞–∑.
#   ‚Ä¢ –ù–∞—á–∏—Å–ª—è–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (efhc_core.balances) –∏–ª–∏ —Å—Ç–∞–≤–∏—Ç VIP-—Ñ–ª–∞–≥.
#   ‚Ä¢ –ü–∏—à–µ—Ç –ª–æ–≥ `efhc_core.ton_events_log` —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏ –∏ –∞—É–¥–∏—Ç–∞).
#   ‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É `ton_watcher_loop()` (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ main.py), –∞ —Ç–∞–∫–∂–µ
#     —É—Ç–∏–ª–∏—Ç—É `manual_process_once()` ‚Äî –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ –ª—É–ø–∞.
#
# –ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏/—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
#   ‚Ä¢ –í config.py –∑–∞–¥–∞–Ω—ã:
#       - TON_WALLET_ADDRESS (–∫–æ—à–µ–ª—ë–∫ Tonkeeper –¥–ª—è –ø—Ä–∏—ë–º–∞)
#       - NFT_PROVIDER_BASE_URL (https://tonapi.io)
#       - NFT_PROVIDER_API_KEY (–≤–∞—à API key)
#       - EFHC_TOKEN_ADDRESS (–∞–¥—Ä–µ—Å jetton EFHC)
#       - EFHC_DECIMALS (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ EFHC, —É –Ω–∞—Å 3)
#       - (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) USDT_JETTON_ADDRESS (–µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —É—á–∏—Ç—ã–≤–∞—Ç—å USDT Jetton)
#   ‚Ä¢ –°—Ö–µ–º—ã –ë–î —Å–æ–∑–¥–∞—é—Ç—Å—è –º–æ–¥—É–ª–µ–º database.ensure_schemas(), —Ç–∞–±–ª–∏—Ü—ã –Ω–∏–∂–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –∑–¥–µ—Å—å (idempotent).
#   ‚Ä¢ –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏/—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ ‚Äî –≤—Å–µ mutate-–æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ë–î –∏–¥—É—Ç –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö.
#
# –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:
#   ‚Ä¢ –í main.py –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä TON:
#         asyncio.create_task(ton_watcher_loop(poll_interval=30))
#   ‚Ä¢ –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ:
#         await manual_process_once(limit=50)
#   ‚Ä¢ –ê –≤ admin_routes.py –µ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ /admin/ton/logs.
#
# –¢–∞–±–ª–∏—Ü—ã:
#   efhc_core.ton_events_log (
#       event_id TEXT PRIMARY KEY,
#       ts TIMESTAMPTZ DEFAULT now(),
#       action_type TEXT,
#       asset TEXT,
#       amount NUMERIC(30, 9),
#       decimals INT,
#       from_addr TEXT,
#       to_addr TEXT,
#       memo TEXT,
#       telegram_id BIGINT NULL,
#       parsed_amount_efhc NUMERIC(30, 3) NULL,
#       vip_requested BOOLEAN DEFAULT FALSE,
#       processed BOOLEAN DEFAULT TRUE,
#       processed_at TIMESTAMPTZ DEFAULT now()
#   )
#
#   efhc_core.users (
#       telegram_id BIGINT PRIMARY KEY,
#       username TEXT NULL,
#       created_at TIMESTAMPTZ DEFAULT now()
#   )
#
#   efhc_core.balances (
#       telegram_id BIGINT PRIMARY KEY,
#       efhc NUMERIC(30, 3) DEFAULT 0,
#       bonus NUMERIC(30, 3) DEFAULT 0,
#       kwh  NUMERIC(30, 3) DEFAULT 0
#   )
#
#   efhc_core.user_vip (
#       telegram_id BIGINT PRIMARY KEY,
#       since TIMESTAMPTZ DEFAULT now()
#   )
#
# –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞:
#   ‚Ä¢ EFHC = 1 –∫–í—Ç ‚Äî —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ–±–º–µ–Ω–Ω–∏–∫–µ (–¥—Ä—É–≥–æ–π –º–æ–¥—É–ª—å).
#   ‚Ä¢ VIP = +7% –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ‚Äî —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ scheduler.py –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è—Ö —ç–Ω–µ—Ä–≥–∏–∏ (–Ω–µ –∑–¥–µ—Å—å).
#   ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π 1000 ‚Äî –Ω–∞ —É—Ä–æ–≤–Ω–µ /user/panels/buy.
#   ‚Ä¢ Shop-–∫–æ–¥—ã:
#       EFHC_10_TON, EFHC_100_TON, EFHC_1000_TON ‚Üí –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ EFHC;
#       VIP_TON, VIP_USDT ‚Üí —É—Å—Ç–∞–Ω–æ–≤–∫–∞ VIP.
# -----------------------------------------------------------------------------

from __future__ import annotations

import asyncio
import re
from datetime import datetime, timezone
from decimal import Decimal, ROUND_DOWN
from typing import Any, Dict, List, Optional, Tuple

import httpx
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text

from .config import get_settings
from .database import get_session

# -----------------------------------------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.py (–≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ENV / –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞)
# -----------------------------------------------------------------------------
settings = get_settings()

# –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ TON –ø—Ä–æ–µ–∫—Ç–∞ (Tonkeeper)
TON_WALLET_ADDRESS = (settings.TON_WALLET_ADDRESS or "").strip()

# –ë–∞–∑–æ–≤—ã–π URL TonAPI (–ø—Ä–æ–≤–∞–π–¥–µ—Ä NFT/TON) –∏ API –∫–ª—é—á
TON_API_BASE = (settings.NFT_PROVIDER_BASE_URL or "https://tonapi.io").rstrip("/")
TON_API_KEY = settings.NFT_PROVIDER_API_KEY

# EFHC jetton –∞–¥—Ä–µ—Å (–¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö JettonTransfer, –µ—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç EFHC –∫–∞–∫ —Ç–æ–∫–µ–Ω)
EFHC_JETTON_ADDRESS = (settings.EFHC_TOKEN_ADDRESS or "").strip()
EFHC_DECIMALS = int(getattr(settings, "EFHC_DECIMALS", 3) or 3)

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: USDT Jetton –∞–¥—Ä–µ—Å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å USDT –≤ –±—É–¥—É—â–µ–º (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
USDT_JETTON_ADDRESS = (getattr(settings, "USDT_JETTON_ADDRESS", "") or "").strip()

# -----------------------------------------------------------------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –∏ –µ–¥–∏–Ω–∏—Ü—ã
# -----------------------------------------------------------------------------
NANO_TON_DECIMALS = Decimal("1e9")   # 1 TON = 1e9 nanoton
DEC3 = Decimal("0.001")              # 3 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π (EFHC/kWh/bonus)
DEC9 = Decimal("0.000000001")        # 9 –∑–Ω–∞–∫–æ–≤ (TON, raw jetton amounts –≤–æ–∑–º–æ–∂–Ω–æ)

def _d3(x: Decimal) -> Decimal:
    """
    –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 3 –∑–Ω–∞–∫–æ–≤ (EFHC/kWh/bonus). ROUND_DOWN ‚Äî –∏–∑–±–µ–≥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏,
    –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –±–∞–ª–∞–Ω—Å–æ–≤.
    """
    return x.quantize(DEC3, rounding=ROUND_DOWN)

def _d9(x: Decimal) -> Decimal:
    """
    –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 9 –∑–Ω–∞–∫–æ–≤ (TON –∏ –Ω–∞—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã).
    """
    return x.quantize(DEC9, rounding=ROUND_DOWN)


# -----------------------------------------------------------------------------
# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü (idempotent) ‚Äî —Å–æ–∑–¥–∞—ë–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
# -----------------------------------------------------------------------------
CREATE_TABLES_SQL = """
-- –õ–æ–≥ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ TonAPI: —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –∏ –Ω–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è
CREATE TABLE IF NOT EXISTS efhc_core.ton_events_log (
    event_id TEXT PRIMARY KEY,
    ts TIMESTAMPTZ DEFAULT now(),
    action_type TEXT,
    asset TEXT,
    amount NUMERIC(30, 9),
    decimals INT,
    from_addr TEXT,
    to_addr TEXT,
    memo TEXT,
    telegram_id BIGINT NULL,
    parsed_amount_efhc NUMERIC(30, 3) NULL,
    vip_requested BOOLEAN DEFAULT FALSE,
    processed BOOLEAN DEFAULT TRUE,
    processed_at TIMESTAMPTZ DEFAULT now()
);

-- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ EFHC (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ; –ø—Ä–æ–µ–∫—Ç –º–æ–∂–µ—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å –ø–æ–ª—è)
CREATE TABLE IF NOT EXISTS efhc_core.users (
    telegram_id BIGINT PRIMARY KEY,
    username TEXT NULL,
    created_at TIMESTAMPTZ DEFAULT now()
);

-- –ë–∞–ª–∞–Ω—Å—ã EFHC/bonus/kWh
CREATE TABLE IF NOT EXISTS efhc_core.balances (
    telegram_id BIGINT PRIMARY KEY REFERENCES efhc_core.users(telegram_id) ON DELETE CASCADE,
    efhc NUMERIC(30, 3) DEFAULT 0,
    bonus NUMERIC(30, 3) DEFAULT 0,
    kwh  NUMERIC(30, 3) DEFAULT 0
);

-- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ù–ï –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø)
CREATE TABLE IF NOT EXISTS efhc_core.user_vip (
    telegram_id BIGINT PRIMARY KEY REFERENCES efhc_core.users(telegram_id) ON DELETE CASCADE,
    since TIMESTAMPTZ DEFAULT now()
);
"""

async def ensure_ton_tables(db: AsyncSession) -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è/–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω—ã).
    –ò–¥—ë–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ: –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –Ω–µ —Å–ª–æ–º–∞–µ—Ç —Å—Ö–µ–º—É.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ process_incoming_payments().
    """
    await db.execute(text(CREATE_TABLES_SQL))
    await db.commit()


# -----------------------------------------------------------------------------
# –ü–∞—Ä—Å–µ—Ä MEMO/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤)
# -----------------------------------------------------------------------------
# –î–ª—è "—Å—Ç–∞—Ä–æ–≥–æ" —Ñ–æ—Ä–º–∞—Ç–∞: "id telegram 4357333, 100 EFHC" / "id:4357333 vip"
MEMO_RE = re.compile(
    r"""
    (?:
        id[\s:_-]*telegram   # 'id telegram' (–≤–æ–∑–º–æ–∂–Ω—ã : _ -)
        |id                  # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ 'id'
        |tg
        |telegram
    )?
    [\s:_-]*                 # —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    (?P<tg>\d{5,15})?        # Telegram ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    [^\dA-Za-z]+             # —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    (?P<amount>\d+(?:[.,]\d{1,9})?)? # —Å—É–º–º–∞ (–≤ —Ç.—á. –¥–µ—Å—è—Ç–∏—á–Ω–∞—è) ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ EFHC —á–∏—Å–ª–æ
    \s*
    (?P<asset>efhc|vip|nft|vip\s*nft)? # –∞–∫—Ç–∏–≤/—Ç–∏–ø ('EFHC', 'VIP', 'VIP NFT')
    """,
    re.IGNORECASE | re.VERBOSE,
)

# –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ Shop-–∫–æ–¥–æ–≤: "362746228 EFHC_100_TON", "tg=362746228 code=VIP_USDT"
RE_ID_CODE_SIMPLE = re.compile(r"(?P<tg>\d+)\s*[:=\s]\s*(?P<code>[A-Za-z0-9_]+)")
RE_TG_CODE_KV = re.compile(r"tg\s*[:=\s]\s*(?P<tg>\d+)\s+code\s*[:=\s]\s*(?P<code>[A-Za-z0-9_]+)", re.IGNORECASE)

VIP_RE = re.compile(r"\b(vip(?:\s*nft)?)\b", re.IGNORECASE)
EFHC_RE = re.compile(r"\befhc\b", re.IGNORECASE)

EFHC_PREFIX = "EFHC"   # –ü—Ä–µ—Ñ–∏–∫—Å Shop-–∫–æ–¥–∞ –¥–ª—è EFHC (EFHC_100_TON)
VIP_PREFIX = "VIP"     # –ü—Ä–µ—Ñ–∏–∫—Å Shop-–∫–æ–¥–∞ –¥–ª—è VIP (VIP_TON, VIP_USDT)

def parse_memo_for_payment(memo: str) -> Tuple[Optional[int], Optional[Decimal], Optional[str], bool]:
    """
    –†–∞–∑–±–∏—Ä–∞–µ—Ç "—Å—Ç–∞—Ä—ã–π" —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (telegram_id, amount, asset, vip_flag)
        telegram_id: int|None
        amount: Decimal|None (–≤ EFHC)
        asset: "EFHC" –∏–ª–∏ None
        vip_flag: True, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ VIP/VIP NFT (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ —Å—É–º–º—ã)
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:
        "id telegram 4357333, 100 EFHC"
        "id:4357333 100 efhc"
        "tg 4357333 vip"
        "4357333 vip nft"
    """
    if not memo:
        return (None, None, None, False)

    memo_norm = memo.strip()
    vip_flag = bool(VIP_RE.search(memo_norm))

    m = MEMO_RE.search(memo_norm)
    tg_id: Optional[int] = None
    amount: Optional[Decimal] = None
    asset: Optional[str] = None

    if m:
        tg_str = m.group("tg")
        amt_str = m.group("amount")
        asset_str = m.group("asset")

        if tg_str:
            try:
                tg_id = int(tg_str)
            except Exception:
                tg_id = None

        if amt_str:
            amt_str = amt_str.replace(",", ".")
            try:
                amount = Decimal(amt_str)
            except Exception:
                amount = None

        if asset_str:
            if "vip" in asset_str.lower():
                asset = "VIP"
                vip_flag = True
            elif "efhc" in asset_str.lower():
                asset = "EFHC"

    if asset is None and EFHC_RE.search(memo_norm):
        asset = "EFHC"

    return (tg_id, amount, asset, vip_flag)


def _parse_shop_comment(comment: str) -> Dict[str, Any]:
    """
    –ü–∞—Ä—Å–∏—Ç "shop-—Ñ–æ—Ä–º–∞—Ç" –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:
        "362746228 EFHC_100_TON"
        "362746228:VIP_USDT"
        "tg=362746228 code=EFHC_1000_TON"
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      {
        "ok": True/False,
        "telegram_id": int|None,
        "code": str|None (–Ω–∞–ø—Ä–∏–º–µ—Ä, EFHC_100_TON, VIP_TON)
      }
    """
    c = (comment or "").strip()
    if not c:
        return {"ok": False, "telegram_id": None, "code": None}

    m = RE_TG_CODE_KV.search(c)
    if m:
        return {"ok": True, "telegram_id": int(m.group("tg")), "code": m.group("code").upper()}

    m2 = RE_ID_CODE_SIMPLE.search(c)
    if m2:
        return {"ok": True, "telegram_id": int(m2.group("tg")), "code": m2.group("code").upper()}

    return {"ok": False, "telegram_id": None, "code": None}


def _guess_shop_item_by_code(code: str) -> Dict[str, Any]:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –∑–∞ —Ç–æ–≤–∞—Ä –ø–æ –∫–æ–¥—É: 'EFHC_100_TON', 'VIP_USDT' –∏ —Ç.–ø.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É:
    {
        "action_type": "SHOP_PURCHASE" –∏–ª–∏ "VIP_BUY" –∏–ª–∏ "UNKNOWN",
        "efhc_amount": Decimal(...) –∏–ª–∏ None,
        "vip_requested": bool
    }
    """
    code = (code or "").strip().upper()
    if not code:
        return {"action_type": "UNKNOWN", "efhc_amount": None, "vip_requested": False}

    if code.startswith(EFHC_PREFIX):
        # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: EFHC_{—á–∏—Å–ª–æ}_ASSET
        m = re.search(r"EFHC[_-](\d+)", code)
        if m:
            amt = Decimal(m.group(1))
            return {"action_type": "SHOP_PURCHASE", "efhc_amount": amt, "vip_requested": False}

    if code.startswith(VIP_PREFIX):
        return {"action_type": "VIP_BUY", "efhc_amount": None, "vip_requested": True}

    return {"action_type": "UNKNOWN", "efhc_amount": None, "vip_requested": False}


# -----------------------------------------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞–º–∏/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—á–µ—Ä–µ–∑ SQL)
# -----------------------------------------------------------------------------
async def _ensure_user_exists(db: AsyncSession, telegram_id: int) -> None:
    """
    –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ efhc_core.users –∏ efhc_core.balances.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º. –ë–µ–∑ commit ‚Äî –≤—ã–∑—ã–≤–∞—é—â–∏–π —Ä–µ—à–∞–µ—Ç, –∫–æ–≥–¥–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.
    """
    await db.execute(
        text("""
            INSERT INTO efhc_core.users (telegram_id)
            VALUES (:tg)
            ON CONFLICT (telegram_id) DO NOTHING
        """),
        {"tg": telegram_id},
    )
    await db.execute(
        text("""
            INSERT INTO efhc_core.balances (telegram_id)
            VALUES (:tg)
            ON CONFLICT (telegram_id) DO NOTHING
        """),
        {"tg": telegram_id},
    )

async def credit_efhc(db: AsyncSession, telegram_id: int, amount_efhc: Decimal) -> None:
    """
    –ù–∞—á–∏—Å–ª–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    amount_efhc ‚Äî Decimal (–≤ EFHC), –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 3 –∑–Ω–∞–∫–æ–≤.
    """
    await _ensure_user_exists(db, telegram_id)
    await db.execute(
        text("""
            UPDATE efhc_core.balances
               SET efhc = COALESCE(efhc, 0) + :amt
             WHERE telegram_id = :tg
        """),
        {"amt": str(_d3(amount_efhc)), "tg": telegram_id},
    )

async def set_user_vip(db: AsyncSession, telegram_id: int) -> None:
    """
    –ü–æ–º–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ VIP (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ–ª–∞–≥, –≤–ª–∏—è–µ—Ç –Ω–∞ +7% –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏).
    –≠—Ç–æ –ù–ï –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø (–∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø –ø–æ NFT whitelist –≤ admin_routes/nft_checker).
    """
    await _ensure_user_exists(db, telegram_id)
    await db.execute(
        text("""
            INSERT INTO efhc_core.user_vip (telegram_id)
            VALUES (:tg)
            ON CONFLICT (telegram_id) DO NOTHING
        """),
        {"tg": telegram_id},
    )


# -----------------------------------------------------------------------------
# –í—ã–∑–æ–≤—ã TonAPI (tonapi.io) ‚Äî HTTP-–∫–ª–∏–µ–Ω—Ç –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
# -----------------------------------------------------------------------------
def _tonapi_headers() -> Dict[str, str]:
    """
    –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ TonAPI.
    –í–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Ç—Ä–µ–±—É—é—Ç –ª–∏–±–æ 'X-API-Key: <key>', –ª–∏–±–æ 'Authorization: Bearer <token>'.
    –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º X-API-Key, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è tonapi.io –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç.
    """
    hdrs = {"Accept": "application/json"}
    if TON_API_KEY:
        hdrs["X-API-Key"] = TON_API_KEY
    return hdrs

async def fetch_address_events(address: str, limit: int = 50, before_lt: Optional[int] = None) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∞–¥—Ä–µ—Å–∞ (account events) —Å TonAPI v2.
    –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: GET /v2/accounts/{address}/events
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
      - address: –Ω–∞—à TON_WALLET_ADDRESS (–∫—É–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç –ø–µ—Ä–µ–≤–æ–¥—ã).
      - limit: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π.
      - before_lt: –ø–∞–≥–∏–Ω–∞—Ü–∏—è (–∏–¥—ë–º –Ω–∞–∑–∞–¥ –ø–æ lt) ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON dict —Å –∫–ª—é—á–∞–º–∏ –≤–∏–¥–∞ "events" –∏–ª–∏ "items".
    """
    base = TON_API_BASE
    url = f"{base}/v2/accounts/{address}/events?limit={limit}"
    if before_lt is not None:
        url += f"&before_lt={before_lt}"

    async with httpx.AsyncClient(timeout=20.0) as client:
        r = await client.get(url, headers=_tonapi_headers())
        r.raise_for_status()
        return r.json()


# -----------------------------------------------------------------------------
# –£—Ç–∏–ª–∏—Ç—ã: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ/–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤/–¥–µ–∫–æ–¥–µ—Ä—ã —Å—É–º–º
# -----------------------------------------------------------------------------
async def _is_event_seen(db: AsyncSession, event_id: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ event_id –≤ –ª–æ–≥–∞—Ö (—á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–≤–∞–∂–¥—ã).
    """
    q = await db.execute(
        text("SELECT 1 FROM efhc_core.ton_events_log WHERE event_id = :eid"),
        {"eid": event_id},
    )
    return q.scalar() is not None

async def _log_event(
    db: AsyncSession,
    event_id: str,
    action_type: str,
    asset: str,
    amount: Decimal,
    decimals: int,
    from_addr: str,
    to_addr: str,
    memo: Optional[str],
    telegram_id: Optional[int],
    parsed_amount_efhc: Optional[Decimal],
    vip_requested: bool,
) -> None:
    """
    –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –ª–æ–≥ (processed=TRUE, —Ç–∞–∫ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–∞–∑—É).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–∂–¥–æ–≥–æ action/—Å–æ–±—ã—Ç–∏—è.
    """
    await db.execute(
        text("""
            INSERT INTO efhc_core.ton_events_log(
                event_id, action_type, asset, amount, decimals, from_addr, to_addr, memo,
                telegram_id, parsed_amount_efhc, vip_requested, processed
            )
            VALUES (:eid, :atype, :asset, :amt, :dec, :from_addr, :to_addr, :memo,
                    :tg, :pa, :vip, TRUE)
            ON CONFLICT (event_id) DO NOTHING
        """),
        {
            "eid": event_id,
            "atype": action_type,
            "asset": asset,
            "amt": str(amount),
            "dec": decimals,
            "from_addr": from_addr,
            "to_addr": to_addr,
            "memo": memo or "",
            "tg": telegram_id,
            "pa": str(parsed_amount_efhc) if parsed_amount_efhc is not None else None,
            "vip": vip_requested,
        },
    )

def _decode_ton_amount(nano: int) -> Decimal:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ nanoton ‚Üí TON (Decimal —Å 9 –∑–Ω–∞–∫–∞–º–∏).
    """
    return _d9(Decimal(nano) / NANO_TON_DECIMALS)

def _decode_jetton_amount(raw: str, decimals: int) -> Decimal:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—É—é —Å—É–º–º—É jetton (–≤ "–º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö" –µ–¥–∏–Ω–∏—Ü–∞—Ö) –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π Decimal.
    raw: —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "123000" (–∫–∞–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç TonAPI).
    decimals: –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π —É jetton (–¥–ª—è EFHC ‚Äî 3).
    """
    q = Decimal(f"1e{decimals}")
    return (Decimal(raw) / q).quantize(Decimal(f"1e-{decimals}"), rounding=ROUND_DOWN)


# -----------------------------------------------------------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è "—É—à–∞–Ω–∏—Ü" –ª–æ–≥–∏–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏
# -----------------------------------------------------------------------------
async def process_incoming_payments(db: AsyncSession, limit: int = 50) -> int:
    """
    –ü—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç TonAPI –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤—Ö–æ–¥—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (action), –∞ –Ω–µ —Å–æ–±—ã—Ç–∏–π (event).

    –ê–ª–≥–æ—Ä–∏—Ç–º:
      1) ensure_ton_tables() ‚Äî —Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç.
      2) fetch_address_events ‚Äî –ø–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–æ—à–µ–ª—å–∫–∞ TON_WALLET_ADDRESS.
      3) –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è:
            - –µ—Å–ª–∏ event_id —É–∂–µ –≤ –ª–æ–≥–µ ‚Üí –ø—Ä–æ–ø—É—Å–∫–∞–µ–º,
            - –∏–Ω–∞—á–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º actions (TonTransfer / JettonTransfer):
                ‚Ä¢ TonTransfer ‚Üí –ø–∞—Ä—Å–∏–º memo:
                    - –ø–æ —Å—Ç–∞—Ä–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É: "id:4357333 100 EFHC" / "tg 4357333 vip"
                    - –ø–æ shop-–∫–æ–¥—É: "362746228 EFHC_100_TON" / "tg=362746228 code=VIP_USDT"
                  –ï—Å–ª–∏ code=EFHC_*_* ‚Üí –Ω–∞—á–∏—Å–ª—è–µ–º EFHC.
                  –ï—Å–ª–∏ code=VIP_* ‚Üí —Å—Ç–∞–≤–∏–º VIP.
                  –ï—Å–ª–∏ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç EFHC N ‚Üí –Ω–∞—á–∏—Å–ª—è–µ–º N EFHC.
                ‚Ä¢ JettonTransfer EFHC ‚Üí –Ω–∞—á–∏—Å–ª—è–µ–º EFHC –Ω–∞ –≤–µ–ª–∏—á–∏–Ω—É jetton (–ª—É—á—à–µ —Å tg_id –∏–∑ memo).
                  –ï—Å–ª–∏ tg_id –Ω–µ—Ç ‚Äî –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –∑–∞—á–∏—Å–ª—è–µ–º (–∏–Ω–∞—á–µ –Ω–µ –∑–Ω–∞–µ–º –∫–æ–º—É).
                ‚Ä¢ USDT/–ø—Ä–æ—á–∏–µ jetton ‚Üí –ª–æ–≥–∏—Ä—É–µ–º (–Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å).
            - –õ–æ–≥–∏—Ä—É–µ–º ton_events_log –¥–ª—è –∞—É–¥–∏—Ç–∞/–¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–π.
      4) –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Å–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö action.
    """
    await ensure_ton_tables(db)

    wallet = TON_WALLET_ADDRESS
    if not wallet:
        print("[EFHC][TON] WARN: TON_WALLET_ADDRESS –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ TON –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return 0

    try:
        data = await fetch_address_events(address=wallet, limit=limit)
    except httpx.HTTPError as e:
        print(f"[EFHC][TON] fetch events error: {e}")
        return 0

    events: List[Dict[str, Any]] = data.get("events", []) or data.get("items", []) or []
    handled_actions = 0

    efhc_addr = (EFHC_JETTON_ADDRESS or "").strip()
    usdt_addr = (USDT_JETTON_ADDRESS or "").strip()

    for ev in events:
        event_id = ev.get("event_id") or ev.get("id") or ""
        if not event_id:
            # –ï—Å–ª–∏ TonAPI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π id ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue

        # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è (–≤–∞–∂–Ω–æ!)
        if await _is_event_seen(db, event_id=event_id):
            continue

        actions = ev.get("actions", []) or []
        for action in actions:
            try:
                atype = action.get("type") or ""

                # ---------------------------------------------------------
                # 1) –í—Ö–æ–¥—è—â–∏–π –Ω–∞—Ç–∏–≤–Ω—ã–π TON
                # ---------------------------------------------------------
                if atype == "TonTransfer" and action.get("TonTransfer"):
                    obj = action["TonTransfer"]
                    to_addr = (obj.get("recipient", {}) or {}).get("address") or ""
                    if (to_addr or "").lower() != wallet.lower():
                        continue  # –Ω–µ –Ω–∞—à –ø–µ—Ä–µ–≤–æ–¥

                    amount_nano = int(obj.get("amount", 0))
                    amount_ton = _decode_ton_amount(amount_nano)
                    comment = obj.get("comment") or obj.get("payload") or ""
                    from_addr = (obj.get("sender", {}) or {}).get("address") or ""

                    # 1) –ü—Ä–æ–±—É–µ–º shop —Ñ–æ—Ä–º–∞—Ç:
                    shop = _parse_shop_comment(comment)
                    if shop["ok"]:
                        tg_id = shop["telegram_id"]
                        item = _guess_shop_item_by_code(shop["code"])
                        if item["action_type"] == "VIP_BUY" and tg_id:
                            # –£—Å—Ç–∞–Ω–æ–≤–∏–º VIP (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ–ª–∞–≥)
                            await set_user_vip(db, tg_id)
                            await _log_event(
                                db=db,
                                event_id=event_id,
                                action_type=atype,
                                asset="TON",
                                amount=amount_ton,
                                decimals=9,
                                from_addr=from_addr,
                                to_addr=wallet,
                                memo=comment,
                                telegram_id=tg_id,
                                parsed_amount_efhc=None,  # VIP –Ω–µ EFHC
                                vip_requested=True,
                            )
                            handled_actions += 1
                            continue
                        elif item["action_type"] == "SHOP_PURCHASE" and tg_id and item["efhc_amount"]:
                            # –ù–∞—á–∏—Å–ª—è–µ–º EFHC –Ω–∞ –±–∞–ª–∞–Ω—Å
                            await credit_efhc(db, tg_id, _d3(Decimal(item["efhc_amount"])))
                            await _log_event(
                                db=db,
                                event_id=event_id,
                                action_type=atype,
                                asset="TON",
                                amount=amount_ton,
                                decimals=9,
                                from_addr=from_addr,
                                to_addr=wallet,
                                memo=comment,
                                telegram_id=tg_id,
                                parsed_amount_efhc=_d3(Decimal(item["efhc_amount"])),
                                vip_requested=False,
                            )
                            handled_actions += 1
                            continue
                        # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ ‚Äî –∏–¥—ë–º –¥–∞–ª—å—à–µ, –ø—Ä–æ–±—É–µ–º "—Å—Ç–∞—Ä—ã–π" —Ñ–æ—Ä–º–∞—Ç

                    # 2) –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: "id telegram 4357333, 100 EFHC", "tg 4357333 vip"
                    tg_id, parsed_amt, asset, vip_flag = parse_memo_for_payment(comment)

                    # VIP ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ: —Å—Ç–∞–≤–∏–º VIP, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∏ –µ—Å—Ç—å tg_id
                    if vip_flag and tg_id:
                        await set_user_vip(db, tg_id)
                        await _log_event(
                            db=db,
                            event_id=event_id,
                            action_type=atype,
                            asset="TON",
                            amount=amount_ton,
                            decimals=9,
                            from_addr=from_addr,
                            to_addr=wallet,
                            memo=comment,
                            telegram_id=tg_id,
                            parsed_amount_efhc=None,
                            vip_requested=True,
                        )
                        handled_actions += 1
                        continue

                    # –ï—Å–ª–∏ –≤ memo —É–∫–∞–∑–∞–Ω EFHC –∏ —á–∏—Å–ª–æ ‚Üí –Ω–∞—á–∏—Å–ª—è–µ–º EFHC
                    if tg_id and asset == "EFHC" and parsed_amt and parsed_amt > 0:
                        await credit_efhc(db, tg_id, _d3(parsed_amt))
                        await _log_event(
                            db=db,
                            event_id=event_id,
                            action_type=atype,
                            asset="TON",
                            amount=amount_ton,
                            decimals=9,
                            from_addr=from_addr,
                            to_addr=wallet,
                            memo=comment,
                            telegram_id=tg_id,
                            parsed_amount_efhc=_d3(parsed_amt),
                            vip_requested=False,
                        )
                        handled_actions += 1
                        continue

                    # –ò–Ω–∞—á–µ ‚Äî TON –±–µ–∑ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ memo: –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    await _log_event(
                        db=db,
                        event_id=event_id,
                        action_type=atype,
                        asset="TON",
                        amount=amount_ton,
                        decimals=9,
                        from_addr=from_addr,
                        to_addr=wallet,
                        memo=comment,
                        telegram_id=tg_id,
                        parsed_amount_efhc=None,
                        vip_requested=False,
                    )
                    handled_actions += 1
                    continue

                # ---------------------------------------------------------
                # 2) –í—Ö–æ–¥—è—â–∏–π JettonTransfer (EFHC/USDT/–ø—Ä–æ—á–µ–µ)
                # ---------------------------------------------------------
                if atype == "JettonTransfer" and action.get("JettonTransfer"):
                    obj = action["JettonTransfer"]
                    jetton_addr = ((obj.get("jetton", {}) or {}).get("address") or "").strip()
                    to_addr = (obj.get("recipient", {}) or {}).get("address") or ""
                    if (to_addr or "").lower() != wallet.lower():
                        continue  # –Ω–µ –∫ –Ω–∞–º

                    raw_amount = obj.get("amount") or "0"
                    decimals = int(obj.get("decimals") or obj.get("jetton", {}).get("decimals") or EFHC_DECIMALS)
                    comment = obj.get("comment") or ""
                    from_addr = (obj.get("sender", {}) or {}).get("address") or ""

                    # EFHC jetton?
                    if efhc_addr and jetton_addr == efhc_addr:
                        amount_efhc = _decode_jetton_amount(raw_amount, decimals=decimals)

                        # –í–æ–∑–º–æ–∂–Ω–æ —É–∫–∞–∑–∞–ª–∏ tg_id –≤ memo (–∏–ª–∏ code). –ò–Ω–∞—á–µ ‚Äî –Ω–µ –∑–Ω–∞–µ–º –∫–æ–º—É –∑–∞—á–∏—Å–ª—è—Ç—å.
                        # 1) Shop —Ñ–æ—Ä–º–∞—Ç
                        shop = _parse_shop_comment(comment)
                        if shop["ok"] and shop["telegram_id"]:
                            await credit_efhc(db, shop["telegram_id"], amount_efhc)
                            await _log_event(
                                db=db,
                                event_id=event_id,
                                action_type=atype,
                                asset="EFHC",
                                amount=amount_efhc,
                                decimals=decimals,
                                from_addr=from_addr,
                                to_addr=wallet,
                                memo=comment,
                                telegram_id=shop["telegram_id"],
                                parsed_amount_efhc=_d3(amount_efhc),
                                vip_requested=False,
                            )
                            handled_actions += 1
                            continue

                        # 2) –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–≤–¥—Ä—É–≥): "id:4357333 100 efhc"
                        tg_id, parsed_amt, asset, vip_flag = parse_memo_for_payment(comment)
                        if tg_id:
                            await credit_efhc(db, tg_id, amount_efhc)
                            await _log_event(
                                db=db,
                                event_id=event_id,
                                action_type=atype,
                                asset="EFHC",
                                amount=amount_efhc,
                                decimals=decimals,
                                from_addr=from_addr,
                                to_addr=wallet,
                                memo=comment,
                                telegram_id=tg_id,
                                parsed_amount_efhc=_d3(amount_efhc),
                                vip_requested=False,
                            )
                            handled_actions += 1
                        else:
                            # –ë–µ–∑ tg_id ‚Äî –ª–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç, –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ–º
                            await _log_event(
                                db=db,
                                event_id=event_id,
                                action_type=atype,
                                asset="EFHC",
                                amount=amount_efhc,
                                decimals=decimals,
                                from_addr=from_addr,
                                to_addr=wallet,
                                memo=comment,
                                telegram_id=None,
                                parsed_amount_efhc=None,
                                vip_requested=False,
                            )
                            handled_actions += 1
                        continue

                    # USDT jetton (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                    if usdt_addr and jetton_addr == usdt_addr:
                        amount_usdt = _decode_jetton_amount(raw_amount, decimals=decimals)
                        await _log_event(
                            db=db,
                            event_id=event_id,
                            action_type=atype,
                            asset="USDT",
                            amount=amount_usdt,
                            decimals=decimals,
                            from_addr=from_addr,
                            to_addr=wallet,
                            memo=comment,
                            telegram_id=None,
                            parsed_amount_efhc=None,
                            vip_requested=False,
                        )
                        handled_actions += 1
                        continue

                    # –ò–Ω–æ–π jetton ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    jetton_amount = _decode_jetton_amount(raw_amount, decimals=decimals)
                    await _log_event(
                        db=db,
                        event_id=event_id,
                        action_type=atype,
                        asset=f"JETTON:{jetton_addr}",
                        amount=jetton_amount,
                        decimals=decimals,
                        from_addr=from_addr,
                        to_addr=wallet,
                        memo=comment,
                        telegram_id=None,
                        parsed_amount_efhc=None,
                        vip_requested=False,
                    )
                    handled_actions += 1
                    continue

                # –ü—Ä–æ—á–∏–µ —Ç–∏–ø—ã action –º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏.
                continue

            except Exception as e:
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø–æ action, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
                print(f"[EFHC][TON] action error in event {ev.get('event_id')}: {e}")
                continue

        # –ï—Å–ª–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–∞ ¬´—Ñ–∏–∫—Å–∞—Ü–∏—è¬ª —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—Å–µ—Ö action —Å–æ–±—ã—Ç–∏—è ‚Äî commit –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ.

    return handled_actions


# -----------------------------------------------------------------------------
# –§–æ–Ω–æ–≤–æ–π —Ü–∏–∫–ª (watcher): —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç TonAPI –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è
# -----------------------------------------------------------------------------
async def ton_watcher_loop(poll_interval: int = 30) -> None:
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ¬´watcher¬ª:
        - –ö–∞–∂–¥—ã–µ poll_interval —Å–µ–∫—É–Ω–¥ –≤—ã–∑—ã–≤–∞–µ—Ç process_incoming_payments().
        - –ü–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –≤ main.py —á–µ—Ä–µ–∑ asyncio.create_task(ton_watcher_loop()).
    –ë–µ–∑–æ–ø–∞—Å–µ–Ω –∫ –æ—à–∏–±–∫–∞–º: –ª—é–±—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è, —Ü–∏–∫–ª –∂–∏–≤—ë—Ç –¥–∞–ª—å—à–µ.
    """
    await asyncio.sleep(3)  # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
    print(f"[EFHC][TON] Watcher loop started. poll_interval={poll_interval}s, wallet={TON_WALLET_ADDRESS or 'NOT SET'}")

    while True:
        try:
            async with get_session() as db:
                cnt = await process_incoming_payments(db, limit=50)
                # –í—Å–µ DML –≤—ã—à–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –±–µ–∑ commit ‚Äî commit –¥–µ–ª–∞–µ–º –≤ –∫–æ–Ω—Ü–µ –ø–∞—á–∫–∏
                await db.commit()
                if cnt > 0:
                    print(f"[EFHC][TON] Processed actions: {cnt}")
        except Exception as e:
            print(f"[EFHC][TON] ERROR in watcher loop: {e}")
        await asyncio.sleep(poll_interval)


# -----------------------------------------------------------------------------
# –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ (admin-–∫–µ–π—Å—ã –∏–ª–∏ –æ—Ç–ª–∞–¥–∫–∞)
# -----------------------------------------------------------------------------
async def manual_process_once(limit: int = 50) -> Dict[str, Any]:
    """
    –†—É—á–Ω–æ–π —Ç—Ä–∏–≥–≥–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –∞–¥–º–∏–Ω–∫–∏ –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã):
        - –û–¥–∏–Ω –≤—ã–∑–æ–≤ process_incoming_payments()
        - –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON-—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
    """
    try:
        async with get_session() as db:
            cnt = await process_incoming_payments(db, limit=limit)
            await db.commit()
        return {"ok": True, "processed_actions": cnt}
    except Exception as e:
        return {"ok": False, "error": str(e)}
