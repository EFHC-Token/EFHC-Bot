# üìÇ backend/app/transactions.py ‚Äî —É—á—ë—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π EFHC, –≤–Ω—É—Ç—Ä. –ø–µ—Ä–µ–≤–æ–¥—ã, –ª–æ—Ç–µ—Ä–µ–∏, –∑–∞–¥–∞–Ω–∏—è
# -----------------------------------------------------------------------------
# –ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏:
# - –ø–æ–∫—É–ø–∫–∞ –ø–∞–Ω–µ–ª–∏ (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ bonus‚Üímain),
# - –ø–æ–∫—É–ø–∫–∞ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ –∑–∞ EFHC,
# - –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö EFHC –∑–∞ –∑–∞–¥–∞–Ω–∏—è,
# - –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø–µ—Ä–µ–¥–∞—á–∞ EFHC ¬´–æ—Ç –∞–¥–º–∏–Ω–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é¬ª –ø—Ä–∏ –æ–ø–ª–∞—Ç–∞—Ö –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∫—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª—å–∫–æ–≤ (Shop).
# –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∞—Ç–æ–º–∞—Ä–Ω—ã (–æ–¥–Ω–∞ DB-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è), —Å –ª–æ–≥–∞–º–∏ –≤ transaction_logs.

from __future__ import annotations
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, func, and_
from decimal import Decimal
from .models import (
    User, Panel, TransactionLog,
    Lottery, LotteryTicket, Task, TaskCompletion, ShopPayment
)
from .utils import q3, dec, can_buy_more_tickets
from .config import get_settings
from .referral import mark_user_active_and_reward_referrer

settings = get_settings()
PANEL_PRICE = q3("100.000")

# --------------------
# –ü–æ–∫—É–ø–∫–∞ –ø–∞–Ω–µ–ª–∏
# --------------------
async def buy_panel(user_id: int, db: AsyncSession) -> dict:
    async with db.begin():
        res = await db.execute(select(User).where(User.id == user_id).with_for_update())
        u = res.scalar_one_or_none()
        if not u:
            return {"success": False, "error": "USER_NOT_FOUND"}

        bonus = dec(u.bonus_balance)
        main = dec(u.main_balance)
        total = q3(bonus + main)
        if total < PANEL_PRICE:
            return {
                "success": False,
                "error": "INSUFFICIENT_FUNDS",
                "message": f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: {total} EFHC (–±–æ–Ω—É—Å–Ω—ã—Ö {q3(bonus)} + –æ—Å–Ω–æ–≤–Ω—ã—Ö {q3(main)}). –ù—É–∂–Ω–æ {PANEL_PRICE}."
            }

        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –±–æ–Ω—É—Å–Ω—ã–µ
        use_bonus = q3(min(bonus, PANEL_PRICE))
        remaining = q3(PANEL_PRICE - use_bonus)
        use_main = q3(remaining if remaining > 0 else dec("0.000"))

        u.bonus_balance = q3(bonus - use_bonus)
        u.main_balance = q3(main - use_main)

        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å
        p = Panel(user_id=u.id)
        db.add(p)
        await db.flush()  # p.id

        # –õ–æ–≥–∏
        if use_bonus > 0:
            db.add(TransactionLog(user_id=u.id, op_type="buy_panel", amount=use_bonus, source="bonus", meta={"panel_id": p.id}))
        if use_main > 0:
            db.add(TransactionLog(user_id=u.id, op_type="buy_panel", amount=use_main, source="main", meta={"panel_id": p.id}))
        db.add(TransactionLog(user_id=u.id, op_type="buy_panel_summary", amount=PANEL_PRICE, source="combined", meta={"panel_id": p.id, "used_bonus": str(use_bonus), "used_main": str(use_main)}))

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø–∞–Ω–µ–ª—å ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏ –Ω–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ. –±–æ–Ω—É—Å—ã
        if not u.active_user:
            await mark_user_active_and_reward_referrer(u.id, db)

        return {
            "success": True,
            "panel_id": p.id,
            "charged": {"bonus": str(use_bonus), "main": str(use_main), "total": str(PANEL_PRICE)},
            "balances_after": {
                "main_balance": str(u.main_balance),
                "bonus_balance": str(u.bonus_balance),
                "kwh_balance": str(u.kwh_balance),
                "total_generated_kwh": str(u.total_generated_kwh),
            }
        }

# --------------------
# –ü–æ–∫—É–ø–∫–∞ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤
# --------------------
async def buy_lottery_tickets(user_id: int, lottery_id: int, n: int, db: AsyncSession) -> dict:
    if n <= 0 or n > settings.LOTTERY_MAX_TICKETS_PER_USER:
        return {"success": False, "error": "INVALID_TICKETS"}

    price_all = q3(dec(settings.LOTTERY_TICKET_PRICE_EFHC) * n)

    async with db.begin():
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ª–æ—Ç–µ—Ä–µ—é
        res_u = await db.execute(select(User).where(User.id == user_id).with_for_update())
        u = res_u.scalar_one_or_none()
        if not u:
            return {"success": False, "error": "USER_NOT_FOUND"}

        res_l = await db.execute(select(Lottery).where(Lottery.id == lottery_id).with_for_update())
        l = res_l.scalar_one_or_none()
        if not l or not l.is_active:
            return {"success": False, "error": "LOTTERY_INACTIVE"}

        # –°–∫–æ–ª—å–∫–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –±–∏–ª–µ—Ç–æ–≤
        res_ct = await db.execute(select(func.count(LotteryTicket.id)).where(and_(LotteryTicket.user_id == user_id, LotteryTicket.lottery_id == lottery_id)))
        already = int(res_ct.scalar_one() or 0)
        if not can_buy_more_tickets(already, n):
            return {"success": False, "error": "TICKETS_LIMIT", "max_per_user": settings.LOTTERY_MAX_TICKETS_PER_USER}

        if dec(u.main_balance) < price_all:
            return {"success": False, "error": "INSUFFICIENT_FUNDS"}

        # –°–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ EFHC
        u.main_balance = q3(dec(u.main_balance) - price_all)
        # –°–æ–∑–¥–∞–µ–º –±–∏–ª–µ—Ç—ã (–Ω–æ–º–µ—Ä–∞ = —Ç–µ–∫—É—â–∏–π total+1..)
        res_total = await db.execute(select(func.count(LotteryTicket.id)).where(LotteryTicket.lottery_id == lottery_id))
        total_before = int(res_total.scalar_one() or 0)
        created = []
        for i in range(n):
            ticket = LotteryTicket(lottery_id=lottery_id, user_id=user_id, ticket_number=total_before + 1 + i)
            db.add(ticket)
            created.append(ticket)

        # –õ–æ–≥ —Å–ø–∏—Å–∞–Ω–∏—è
        db.add(TransactionLog(
            user_id=user_id,
            op_type="lottery_tickets_buy",
            amount=price_all,
            source="main",
            meta={"lottery_id": lottery_id, "tickets": n}
        ))

        return {"success": True, "bought": n, "your_total": already + n, "balances_after": {
            "main_balance": str(u.main_balance),
            "bonus_balance": str(u.bonus_balance),
            "kwh_balance": str(u.kwh_balance),
            "total_generated_kwh": str(u.total_generated_kwh),
        }}

# --------------------
# –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö EFHC –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
# --------------------
async def award_task_bonus(user_id: int, task_id: int, db: AsyncSession, proof: str | None = None) -> dict:
    async with db.begin():
        res_u = await db.execute(select(User).where(User.id == user_id).with_for_update())
        u = res_u.scalar_one_or_none()
        if not u:
            return {"success": False, "error": "USER_NOT_FOUND"}

        res_t = await db.execute(select(Task).where(Task.id == task_id).with_for_update())
        t = res_t.scalar_one_or_none()
        if not t or not t.is_active or (t.available_count <= 0):
            return {"success": False, "error": "TASK_NOT_AVAILABLE"}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª?
        res_c = await db.execute(select(TaskCompletion).where(TaskCompletion.user_id == user_id, TaskCompletion.task_id == task_id))
        if res_c.scalar_one_or_none():
            return {"success": False, "error": "ALREADY_DONE"}

        # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ EFHC
        reward = q3(dec(t.reward_bonus_efhc))
        u.bonus_balance = q3(dec(u.bonus_balance) + reward)

        # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        comp = TaskCompletion(user_id=user_id, task_id=task_id, proof=proof)
        db.add(comp)

        # –£–º–µ–Ω—å—à–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        t.available_count -= 1

        # –õ–æ–≥
        db.add(TransactionLog(user_id=user_id, op_type="task_bonus", amount=reward, source="bonus", meta={"task_id": task_id}))

        return {"success": True, "reward": str(reward), "bonus_balance": str(u.bonus_balance)}

# --------------------
# –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è ¬´–≤—ã–ø–ª–∞—Ç–∞¬ª –æ—Ç –ê–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ø–æ—Å–ª–µ –≤–Ω–µ—à–Ω–µ–π –æ–ø–ª–∞—Ç—ã –≤ TON/USDT/EFHC)
# --------------------
async def admin_credit_user_from_shop(user_id: int, amount_efhc: Decimal, db: AsyncSession, shop_code: str, memo: str | None = None) -> dict:
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ñ–∞–∫—Ç–∞ –≤—Ö–æ–¥—è—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –∫–æ—à–µ–ª–µ–∫ –±–æ—Ç–∞/–∞–¥–º–∏–Ω–∞:
    - –ê–¥–º–∏–Ω ¬´–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç¬ª –ø–æ–∫—É–ø–∫—É (–∏–ª–∏ –∞–≤—Ç–æ-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ webhook),
    - –ø–µ—Ä–µ–≤–æ–¥–∏–º amount_efhc –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    - –ø–∏—à–µ–º TransactionLog source='admin_credit'.
    """
    amt = q3(amount_efhc)
    if amt <= 0:
        return {"success": False, "error": "INVALID_AMOUNT"}

    async with db.begin():
        res_u = await db.execute(select(User).where(User.id == user_id).with_for_update())
        u = res_u.scalar_one_or_none()
        if not u:
            return {"success": False, "error": "USER_NOT_FOUND"}

        u.main_balance = q3(dec(u.main_balance) + amt)
        db.add(TransactionLog(user_id=user_id, op_type="shop_credit", amount=amt, source="main", meta={"shop_code": shop_code, "memo": memo}))
        db.add(ShopPayment(user_id=user_id, code=shop_code, amount_efhc=amt, memo=memo, status="credited"))

        return {"success": True, "amount": str(amt), "main_balance": str(u.main_balance)}

