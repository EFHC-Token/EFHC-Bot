# üìÇ backend/app/efhc_transactions.py ‚Äî –º–æ–¥—É–ª—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π EFHC
# -----------------------------------------------------------------------------
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
#   ‚Ä¢ –ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –±–∞–Ω–∫–∞.
#   ‚Ä¢ –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç—å, –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å (—á–µ—Ä–µ–∑ idempotency_key), –∞—É–¥–∏—Ç (EFHCTransfersLog).
#   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö —Ä—É—á–∫–∞—Ö (shop_routes, withdraw_routes, exchange_routes, admin_routes).
#
# –ë–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞ (—Ä–µ–∑—é–º–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π):
#   ‚Ä¢ EFHC –∏ kWh = NUMERIC(30,8), 8 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ (Decimal).
#   ‚Ä¢ –í—Å–µ EFHC-–æ–ø–µ—Ä–∞—Ü–∏–∏ (—Å–ø–∏—Å–∞–Ω–∏—è, –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è) –∏–¥—É—Ç —á–µ—Ä–µ–∑ EFHCTransfersLog.
#   ‚Ä¢ –ë–∞–Ω–∫ EFHC ‚Äî Telegram ID –∏–∑ AdminBankConfig.current_bank_telegram_id.
#   ‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–µ EFHC –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π; –ø—Ä–∏ —Ç—Ä–∞—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –ë–∞–Ω–∫ (reason='shop_panel_bonus').
#   ‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –ø–∞–Ω–µ–ª–µ–π:
#       - —Å–Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å—ã–≤–∞–µ–º bonus_efhc ‚Üí –ë–∞–Ω–∫,
#       - –∑–∞—Ç–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é —á–∞—Å—Ç—å efhc ‚Üí –ë–∞–Ω–∫.
#   ‚Ä¢ –í—ã–≤–æ–¥ EFHC:
#       - –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ EFHC —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è user ‚Üí –ë–∞–Ω–∫ (reason='withdraw_lock').
#       - –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –ë–∞–Ω–∫ ‚Üí user (reason='withdraw_refund').
#   ‚Ä¢ –§—É–Ω–∫—Ü–∏–∏ debit_user_to_bank / credit_user_from_bank / transfer_between_users ‚Äî –æ–±—â–∏–π API.
# -----------------------------------------------------------------------------

from __future__ import annotations

from datetime import datetime
from decimal import Decimal, ROUND_DOWN
from typing import Optional

from sqlalchemy.orm import Session
from sqlalchemy import select, update

from .models import Balance, EFHCTransfersLog, AdminBankConfig

# -----------------------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# -----------------------------------------------------------------------------
DECIMAL_CTX = Decimal("0.00000001")  # 8 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏


# -----------------------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------------------------------------------------------------
def quantize_amount(amount: Decimal | str | float) -> Decimal:
    """
    –û–∫—Ä—É–≥–ª—è–µ—Ç —Å—É–º–º—É –¥–æ 8 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π EFHC/kWh.
    """
    if not isinstance(amount, Decimal):
        amount = Decimal(str(amount))
    return amount.quantize(DECIMAL_CTX, rounding=ROUND_DOWN)


def get_current_bank_id(db: Session) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π Telegram ID –±–∞–Ω–∫–∞ (–∞–¥–º–∏–Ω-—Å—á—ë—Ç EFHC).
    """
    cfg = db.execute(select(AdminBankConfig).order_by(AdminBankConfig.updated_at.desc())).scalar_one_or_none()
    if not cfg:
        raise RuntimeError("Admin bank config not initialized")
    return cfg.current_bank_telegram_id


def log_transfer(
    db: Session,
    from_id: int,
    to_id: int,
    amount: Decimal,
    reason: str,
    idempotency_key: Optional[str] = None,
    meta: Optional[dict] = None,
) -> EFHCTransfersLog:
    """
    –°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–µ EFHCTransfersLog.
    """
    entry = EFHCTransfersLog(
        from_id=from_id,
        to_id=to_id,
        amount=quantize_amount(amount),
        reason=reason,
        idempotency_key=idempotency_key,
        meta=meta,
        ts=datetime.utcnow(),
    )
    db.add(entry)
    return entry


# -----------------------------------------------------------------------------
# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
# -----------------------------------------------------------------------------
def debit_user_to_bank(
    db: Session,
    user_id: int,
    amount: Decimal,
    reason: str,
    idempotency_key: Optional[str] = None,
    use_bonus: bool = False,
) -> None:
    """
    –°–ø–∏—Å—ã–≤–∞–µ—Ç EFHC (–∏–ª–∏ bonus_efhc) —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞—á–∏—Å–ª—è–µ—Ç –≤ –ë–∞–Ω–∫.
    ‚Ä¢ reason: 'shop_panel_bonus', 'shop_panel_efhc', 'withdraw_lock' –∏ —Ç.–ø.
    ‚Ä¢ use_bonus=True ‚Üí —Å–ø–∏—Å—ã–≤–∞–µ–º —Å bonus_efhc, –∏–Ω–∞—á–µ —Å efhc.
    """
    amount = quantize_amount(amount)
    bank_id = get_current_bank_id(db)

    balance = db.get(Balance, user_id)
    if not balance:
        raise ValueError(f"User {user_id} has no balance")

    if use_bonus:
        if balance.bonus_efhc < amount:
            raise ValueError("Insufficient bonus EFHC")
        balance.bonus_efhc -= amount
    else:
        if balance.efhc < amount:
            raise ValueError("Insufficient EFHC")
        balance.efhc -= amount

    # –ë–∞–Ω–∫ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –∑–¥–µ—Å—å, —Ç.–∫. –±–∞–Ω–∫ = –ø—Ä–æ—Å—Ç–æ –∞–¥–º–∏–Ω-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ –ª–æ–≥–∞—Ö.
    # –î–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: –º–æ–∂–µ–º –∑–∞–≤–µ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å –±–∞–Ω–∫–∞ –∫–∞–∫ Balance(bank_id), –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
    log_transfer(db, from_id=user_id, to_id=bank_id, amount=amount, reason=reason, idempotency_key=idempotency_key)


def credit_user_from_bank(
    db: Session,
    user_id: int,
    amount: Decimal,
    reason: str,
    idempotency_key: Optional[str] = None,
) -> None:
    """
    –ù–∞—á–∏—Å–ª—è–µ—Ç EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –ë–∞–Ω–∫–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∫—É–ø–æ–∫ EFHC, –≤–æ–∑–≤—Ä–∞—Ç–æ–≤, –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π.
    """
    amount = quantize_amount(amount)
    bank_id = get_current_bank_id(db)

    balance = db.get(Balance, user_id)
    if not balance:
        raise ValueError(f"User {user_id} has no balance")

    balance.efhc += amount

    log_transfer(db, from_id=bank_id, to_id=user_id, amount=amount, reason=reason, idempotency_key=idempotency_key)


def transfer_between_users(
    db: Session,
    from_user: int,
    to_user: int,
    amount: Decimal,
    reason: str,
    idempotency_key: Optional[str] = None,
) -> None:
    """
    –ü–µ—Ä–µ–≤–æ–¥ EFHC –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    """
    amount = quantize_amount(amount)

    from_balance = db.get(Balance, from_user)
    to_balance = db.get(Balance, to_user)
    if not from_balance or not to_balance:
        raise ValueError("Balances not found")

    if from_balance.efhc < amount:
        raise ValueError("Insufficient funds")

    from_balance.efhc -= amount
    to_balance.efhc += amount

    log_transfer(db, from_id=from_user, to_id=to_user, amount=amount, reason=reason, idempotency_key=idempotency_key)


# -----------------------------------------------------------------------------
# –û–ø–µ—Ä–∞—Ü–∏–∏, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –±–æ–Ω—É—Å–Ω—ã—Ö EFHC –∏ –ø–∞–Ω–µ–ª–µ–π
# -----------------------------------------------------------------------------
def spend_bonus_for_panels(
    db: Session,
    user_id: int,
    amount: Decimal,
    idempotency_key: Optional[str] = None,
) -> None:
    """
    –°–ø–∏—Å–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö EFHC –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–∞–Ω–µ–ª–µ–π.
    ‚Ä¢ –°–ø–∏—Å—ã–≤–∞–µ–º bonus_efhc —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ë–∞–Ω–∫.
    ‚Ä¢ reason = 'shop_panel_bonus'
    """
    debit_user_to_bank(
        db=db,
        user_id=user_id,
        amount=amount,
        reason="shop_panel_bonus",
        idempotency_key=idempotency_key,
        use_bonus=True,
    )


def spend_regular_for_panels(
    db: Session,
    user_id: int,
    amount: Decimal,
    idempotency_key: Optional[str] = None,
) -> None:
    """
    –°–ø–∏—Å–∞–Ω–∏–µ –æ–±—ã—á–Ω—ã—Ö EFHC –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–∞–Ω–µ–ª–µ–π.
    ‚Ä¢ –°–ø–∏—Å—ã–≤–∞–µ–º efhc —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –ë–∞–Ω–∫.
    ‚Ä¢ reason = 'shop_panel_efhc'
    """
    debit_user_to_bank(
        db=db,
        user_id=user_id,
        amount=amount,
        reason="shop_panel_efhc",
        idempotency_key=idempotency_key,
        use_bonus=False,
    )


# -----------------------------------------------------------------------------
# –í—ã–≤–æ–¥ EFHC
# -----------------------------------------------------------------------------
def lock_withdrawal(
    db: Session,
    user_id: int,
    amount: Decimal,
    withdraw_id: int,
    idempotency_key: Optional[str] = None,
) -> None:
    """
    –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ EFHC:
    ‚Ä¢ EFHC —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è user ‚Üí –ë–∞–Ω–∫ (–±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è).
    ‚Ä¢ reason = 'withdraw_lock'
    ‚Ä¢ meta = {"withdraw_id": withdraw_id}
    """
    amount = quantize_amount(amount)
    bank_id = get_current_bank_id(db)

    balance = db.get(Balance, user_id)
    if not balance or balance.efhc < amount:
        raise ValueError("Insufficient EFHC")

    balance.efhc -= amount

    log_transfer(
        db,
        from_id=user_id,
        to_id=bank_id,
        amount=amount,
        reason="withdraw_lock",
        idempotency_key=idempotency_key,
        meta={"withdraw_id": withdraw_id},
    )


def refund_withdrawal(
    db: Session,
    user_id: int,
    amount: Decimal,
    withdraw_id: int,
    idempotency_key: Optional[str] = None,
) -> None:
    """
    –í–æ–∑–≤—Ä–∞—Ç EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏/–æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏.
    ‚Ä¢ reason = 'withdraw_refund'
    ‚Ä¢ meta = {"withdraw_id": withdraw_id}
    """
    amount = quantize_amount(amount)
    bank_id = get_current_bank_id(db)

    balance = db.get(Balance, user_id)
    if not balance:
        raise ValueError(f"User {user_id} has no balance")

    balance.efhc += amount

    log_transfer(
        db,
        from_id=bank_id,
        to_id=user_id,
        amount=amount,
        reason="withdraw_refund",
        idempotency_key=idempotency_key,
        meta={"withdraw_id": withdraw_id},
    )


# -----------------------------------------------------------------------------
# TODO: –≤ –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
#   ‚Ä¢ airdrop_bonus(db, user_id, amount, reason="airdrop_bonus")
#   ‚Ä¢ admin_adjustment(db, user_id, amount, reason="admin_adjustment")
#   ‚Ä¢ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ (—á–µ—Ä–µ–∑ bonus_efhc)
# -----------------------------------------------------------------------------
