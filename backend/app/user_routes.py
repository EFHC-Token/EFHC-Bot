# üìÇ backend/app/user_routes.py ‚Äî –ø—É–±–ª–∏—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
# -----------------------------------------------------------------------------
# –ß—Ç–æ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç:
#   ‚Ä¢ POST   /api/user/register         ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (idempotent)
#   ‚Ä¢ GET    /api/user/balance          ‚Äî –±–∞–ª–∞–Ω—Å EFHC/bonus/kWh + –∞–≥—Ä–µ–≥–∞—Ç—ã (–ø–∞–Ω–µ–ª–∏)
#   ‚Ä¢ POST   /api/user/panels/buy       ‚Äî –ø–æ–∫—É–ø–∫–∞ –ø–∞–Ω–µ–ª–∏ (100 EFHC) —Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∞–Ω–∏–µ–º
#   ‚Ä¢ POST   /api/user/exchange         ‚Äî –æ–±–º–µ–Ω –∫–í—Ç ‚Üí EFHC (1:1, –º–∏–Ω–∏–º—É–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
#   ‚Ä¢ GET    /api/user/tasks            ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π + —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
#   ‚Ä¢ POST   /api/user/tasks/complete   ‚Äî –ø–æ–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º (+–±–æ–Ω—É—Å–Ω—ã–µ EFHC)
#   ‚Ä¢ GET    /api/user/referrals        ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä)
#   ‚Ä¢ GET    /api/user/lotteries        ‚Äî —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π
#   ‚Ä¢ POST   /api/user/lottery/buy      ‚Äî –∫—É–ø–∏—Ç—å N –±–∏–ª–µ—Ç–æ–≤ –ª–æ—Ç–µ—Ä–µ–∏ –∑–∞ EFHC
#
# –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
#   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–æ–∫ "X-Telegram-Id" (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!)
#   ‚Ä¢ –í—Å–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è EFHC/kWh ‚Äî –¥–æ 3 –∑–Ω–∞–∫–æ–≤ (Decimal).
#   ‚Ä¢ –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ ‚Äî —Å–æ–∑–¥–∞—ë–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (—Ç–æ–≤–∞—Ä—ã/–∑–∞–¥–∞—á–∏/–ª–æ—Ç–µ—Ä–µ–∏) –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏.
#
# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
#   ‚Ä¢ database.get_session ‚Äî –¥–ª—è –≤—ã–¥–∞—á–∏ AsyncSession
#   ‚Ä¢ models.py ‚Äî ORM-–∫–ª–∞—Å—Å—ã
#   ‚Ä¢ config.py ‚Äî –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
#
# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
#   ‚Ä¢ –≠—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
#   ‚Ä¢ –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî –≤ admin_routes.py (–æ—Ç–¥–µ–ª—å–Ω–æ), –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –ø–æ NFT whitelist.
# -----------------------------------------------------------------------------

from __future__ import annotations

from datetime import datetime, timedelta
from decimal import Decimal, ROUND_DOWN
from typing import List, Optional, Tuple, Dict

from fastapi import APIRouter, Depends, Header, HTTPException, status
from pydantic import BaseModel, Field
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, insert, func, text, and_

from .database import get_session
from .config import get_settings
from .models import (
    Base,
    User,
    Balance,
    UserPanel,
    UserVIP,
    Referral,
    ReferralStat,
    Task,
    UserTask,
    Lottery,
    LotteryTicket,
)

settings = get_settings()
router = APIRouter()

# ------------------------------------------------------------
# –£—Ç–∏–ª–∏—Ç—ã –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
# ------------------------------------------------------------
DEC3 = Decimal("0.001")

def d3(x: Decimal) -> Decimal:
    return x.quantize(DEC3, rounding=ROUND_DOWN)


# ------------------------------------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è)
# ------------------------------------------------------------

async def ensure_defaults(db: AsyncSession) -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç –≤ –ë–î –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è/–ª–æ—Ç–µ—Ä–µ–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ª–µ–Ω–∏–≤–æ –∏–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤.
    """
    # –ó–ê–î–ê–ù–ò–Ø (–µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –Ω–∞–∫–∏–¥—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–∫–∏)
    res = await db.execute(select(func.count()).select_from(Task))
    task_count = int(res.scalar() or 0)
    if task_count == 0 and settings.TASKS_ENABLED:
        # –ü–∞—Ä–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:
        tasks = [
            Task(title="–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/efhc_official", reward_bonus_efhc=Decimal("1.000")),
            Task(title="–†–µ–ø–æ—Å—Ç–Ω–∏ –ø–æ—Å—Ç", url="https://t.me/efhc_official/1", reward_bonus_efhc=Decimal("0.500")),
        ]
        db.add_all(tasks)
        await db.commit()

    # –õ–û–¢–ï–†–ï–ò (–µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ LOTTERY_DEFAULTS)
    res = await db.execute(select(func.count()).select_from(Lottery))
    lot_count = int(res.scalar() or 0)
    if lot_count == 0 and settings.LOTTERY_ENABLED:
        for item in settings.LOTTERY_DEFAULTS:
            code = item.get("id") or item.get("code") or "lottery_code"
            title = item.get("title", "Prize")
            target = int(item.get("target_participants", "100"))
            prize_type = item.get("prize_type", "EFHC")
            db.add(Lottery(code=code, title=title, target_participants=target, prize_type=prize_type, active=True))
        await db.commit()


# ------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è / –±–∞–ª–∞–Ω—Å–∞
# ------------------------------------------------------------

async def ensure_user_and_balance(db: AsyncSession, telegram_id: int, username: Optional[str] = None) -> None:
    """
    –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ–≥–æ –±–∞–ª–∞–Ω—Å —Å—É—â–µ—Å—Ç–≤—É—é—Ç (idempotent).
    """
    # users
    await db.execute(
        text(f"""
            INSERT INTO {settings.DB_SCHEMA_CORE}.users (telegram_id, username)
            VALUES (:tg, :un)
            ON CONFLICT (telegram_id) DO UPDATE SET username = COALESCE(EXCLUDED.username, {settings.DB_SCHEMA_CORE}.users.username)
        """),
        {"tg": telegram_id, "un": username or None}
    )
    # balances
    await db.execute(
        text(f"""
            INSERT INTO {settings.DB_SCHEMA_CORE}.balances (telegram_id)
            VALUES (:tg)
            ON CONFLICT (telegram_id) DO NOTHING
        """),
        {"tg": telegram_id}
    )
    await db.commit()


async def get_balance_snapshot(db: AsyncSession, telegram_id: int) -> Dict[str, str]:
    """
    –û—Ç–¥–∞—ë—Ç —Å–ª–æ–≤–∞—Ä—å —Å –±–∞–ª–∞–Ω—Å–æ–º –≤ —Å—Ç—Ä–æ–∫–∞—Ö (—Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ 3 –∑–Ω–∞–∫–æ–≤).
    """
    q = await db.execute(select(Balance).where(Balance.telegram_id == telegram_id))
    row: Optional[Balance] = q.scalar_one_or_none()
    if not row:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: —Å–æ–∑–¥–∞—ë–º
        await ensure_user_and_balance(db, telegram_id)
        q = await db.execute(select(Balance).where(Balance.telegram_id == telegram_id))
        row = q.scalar_one_or_none()

    efhc = Decimal(row.efhc or 0)
    bonus = Decimal(row.bonus or 0)
    kwh = Decimal(row.kwh or 0)
    return {
        "efhc": f"{d3(efhc):.3f}",
        "bonus": f"{d3(bonus):.3f}",
        "kwh": f"{d3(kwh):.3f}",
    }


async def count_active_panels(db: AsyncSession, telegram_id: int) -> int:
    """
    –ü–æ–¥—Å—á—ë—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö (–Ω–µ –∏—Å—Ç—ë–∫—à–∏—Ö) –ø–∞–Ω–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    now = datetime.utcnow()
    q = await db.execute(
        select(func.count()).select_from(UserPanel).where(
            and_(UserPanel.telegram_id == telegram_id, UserPanel.active == True, UserPanel.expires_at > now)
        )
    )
    return int(q.scalar() or 0)


# ------------------------------------------------------------
# –°—Ö–µ–º—ã (Pydantic) –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤/–æ—Ç–≤–µ—Ç–æ–≤
# ------------------------------------------------------------

class RegisterRequest(BaseModel):
    username: Optional[str] = Field(None, description="Telegram username –±–µ–∑ @ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)")


class ExchangeRequest(BaseModel):
    amount_kwh: Decimal = Field(..., description="–°–∫–æ–ª—å–∫–æ –∫–í—Ç –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ EFHC (1:1). –ú–∏–Ω–∏–º—É–º –∏–∑ EXCHANGE_MIN_KWH.")


class LotteryBuyRequest(BaseModel):
    lottery_id: str = Field(..., description="–ö–æ–¥ –ª–æ—Ç–µ—Ä–µ–∏ (Lottery.code)")
    count: int = Field(..., ge=1, le=100, description="–°–∫–æ–ª—å–∫–æ –±–∏–ª–µ—Ç–æ–≤ –∫—É–ø–∏—Ç—å –∑–∞ —Ä–∞–∑")


# ------------------------------------------------------------
# –ú–∞—Ä—à—Ä—É—Ç—ã
# ------------------------------------------------------------

@router.post("/user/register")
async def user_register(
    payload: RegisterRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. Idempotent.
    –¢—Ä–µ–±—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Telegram-Id.
    """
    if not x_telegram_id or not x_telegram_id.isdigit():
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="X-Telegram-Id header required")

    tg = int(x_telegram_id)
    await ensure_defaults(db)
    await ensure_user_and_balance(db, tg, payload.username)

    return {"ok": True, "telegram_id": tg}


@router.get("/user/balance")
async def user_balance(
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
):
    """
    –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: EFHC, –±–æ–Ω—É—Å—ã, kWh + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π.
    """
    if not x_telegram_id or not x_telegram_id.isdigit():
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="X-Telegram-Id header required")

    tg = int(x_telegram_id)
    await ensure_defaults(db)
    await ensure_user_and_balance(db, tg)

    bal = await get_balance_snapshot(db, tg)
    panels_cnt = await count_active_panels(db, tg)

    # –ü—Ä–æ–≤–µ—Ä–∏–º VIP-—Ñ–ª–∞–≥ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π)
    r_vip = await db.execute(select(UserVIP).where(UserVIP.telegram_id == tg))
    vip = bool(r_vip.scalar_one_or_none())

    return {
        "efhc": bal["efhc"],
        "bonus": bal["bonus"],
        "kwh": bal["kwh"],
        "panels_active": panels_cnt,
        "vip": vip,
        "panel_price": f"{Decimal(settings.PANEL_PRICE_EFHC):.3f}",
    }


@router.post("/user/panels/buy")
async def user_panels_buy(
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
):
    """
    –ü–æ–∫—É–ø–∫–∞ –ø–∞–Ω–µ–ª–∏ –∑–∞ 100 EFHC —Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∞–Ω–∏–µ–º:
      ‚Ä¢ —Å–Ω–∞—á–∞–ª–∞ –±–æ–Ω—É—Å–Ω—ã–µ EFHC,
      ‚Ä¢ –∑–∞—Ç–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Å–ø–∏—Å–∞–Ω–æ –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞.
    """
    if not x_telegram_id or not x_telegram_id.isdigit():
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="X-Telegram-Id header required")

    tg = int(x_telegram_id)
    await ensure_user_and_balance(db, tg)

    # –ß–∏—Ç–∞–µ–º –±–∞–ª–∞–Ω—Å
    q = await db.execute(select(Balance).where(Balance.telegram_id == tg))
    bal: Optional[Balance] = q.scalar_one_or_none()
    if not bal:
        raise HTTPException(status_code=500, detail="Balance not found")

    price = Decimal(settings.PANEL_PRICE_EFHC)
    total = Decimal(bal.efhc or 0) + Decimal(bal.bonus or 0)
    if total < price:
        raise HTTPException(
            status_code=400,
            detail=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ EFHC. –¢—Ä–µ–±—É–µ—Ç—Å—è {price:.3f}, –¥–æ—Å—Ç—É–ø–Ω–æ {total:.3f} (–±–æ–Ω—É—Å {Decimal(bal.bonus or 0):.3f} + –æ—Å–Ω–æ–≤–Ω–æ–π {Decimal(bal.efhc or 0):.3f})"
        )

    # –û–≥—Ä–∞–Ω–∏—á–∏–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π
    active_cnt = await count_active_panels(db, tg)
    if active_cnt >= settings.MAX_ACTIVE_PANELS_PER_USER:
        raise HTTPException(status_code=400, detail="–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π")

    # –°–ø–∏—Å—ã–≤–∞–µ–º: —Å–Ω–∞—á–∞–ª–∞ —Å –±–æ–Ω—É—Å–Ω—ã—Ö
    bonus_av = Decimal(bal.bonus or 0)
    main_av = Decimal(bal.efhc or 0)

    use_bonus = min(bonus_av, price)
    rest = price - use_bonus
    use_main = rest if rest > 0 else Decimal("0.000")

    # –û–±–Ω–æ–≤–∏–º –±–∞–ª–∞–Ω—Å
    new_bonus = d3(bonus_av - use_bonus)
    new_main = d3(main_av - use_main)

    await db.execute(
        update(Balance)
        .where(Balance.telegram_id == tg)
        .values(bonus=str(new_bonus), efhc=str(new_main))
    )

    # –î–æ–±–∞–≤–∏–º –ø–∞–Ω–µ–ª—å
    now = datetime.utcnow()
    expires = now + timedelta(days=int(settings.PANEL_LIFESPAN_DAYS))
    daily_gen = Decimal(settings.DAILY_GEN_BASE_KWH)
    # –ï—Å–ª–∏ VIP ‚Äî –º–æ–∂–µ–º –ø–æ–¥–º–µ–Ω–∏—Ç—å daily_gen (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):
    r_vip = await db.execute(select(UserVIP).where(UserVIP.telegram_id == tg))
    if r_vip.scalar_one_or_none():
        # –ª–∏–±–æ —É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ VIP_MULTIPLIER, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–∫—Å settings.DAILY_GEN_VIP_KWH
        daily_gen = Decimal(settings.DAILY_GEN_VIP_KWH)

    db.add(UserPanel(
        telegram_id=tg,
        price_eFHC=str(d3(price)),
        purchased_at=now,
        expires_at=expires,
        active=True,
        daily_gen_kwh=str(d3(daily_gen)),
    ))

    await db.commit()

    return {
        "ok": True,
        "bonus_used": f"{d3(use_bonus):.3f}",
        "main_used": f"{d3(use_main):.3f}",
        "panel_expires_at": expires.isoformat(),
        "panels_active": active_cnt + 1,
    }


@router.post("/user/exchange")
async def user_exchange_kwh_to_efhc(
    payload: ExchangeRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
):
    """
    –û–±–º–µ–Ω –∫–í—Ç ‚Üí EFHC (1:1). –ú–∏–Ω–∏–º—É–º ‚Äî EXCHANGE_MIN_KWH.
    """
    if not x_telegram_id or not x_telegram_id.isdigit():
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="X-Telegram-Id header required")

    tg = int(x_telegram_id)
    amount = d3(payload.amount_kwh)

    if amount < Decimal(str(settings.EXCHANGE_MIN_KWH)):
        raise HTTPException(status_code=400, detail=f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±–º–µ–Ω: {settings.EXCHANGE_MIN_KWH}")

    # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ kWh
    q = await db.execute(select(Balance).where(Balance.telegram_id == tg))
    bal: Optional[Balance] = q.scalar_one_or_none()
    if not bal:
        raise HTTPException(status_code=500, detail="Balance not found")

    kwh = Decimal(bal.kwh or 0)
    if kwh < amount:
        raise HTTPException(status_code=400, detail=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–í—Ç. –î–æ—Å—Ç—É–ø–Ω–æ {kwh:.3f}")

    # –°–ø–∏—Å—ã–≤–∞–µ–º kWh, –¥–æ–±–∞–≤–ª—è–µ–º EFHC 1:1
    new_kwh = d3(kwh - amount)
    new_efhc = d3(Decimal(bal.efhc or 0) + amount)

    await db.execute(
        update(Balance)
        .where(Balance.telegram_id == tg)
        .values(kwh=str(new_kwh), efhc=str(new_efhc))
    )
    await db.commit()

    return {"ok": True, "efhc_added": f"{amount:.3f}", "kwh_spent": f"{amount:.3f}"}


@router.get("/user/tasks")
async def user_tasks_list(
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
):
    """
    –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π (–∞–∫—Ç–∏–≤–Ω—ã–µ), —Å –ø–æ–º–µ—Ç–∫–æ–π ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    if not x_telegram_id or not x_telegram_id.isdigit():
        raise HTTPException(status_code=400, detail="X-Telegram-Id header required")
    tg = int(x_telegram_id)

    await ensure_defaults(db)
    # –í–æ–∑—å–º—ë–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    q = await db.execute(select(Task).where(Task.active == True).order_by(Task.id.asc()))
    tasks: List[Task] = list(q.scalars().all())

    # –í—ã–±–æ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–∞–∂–¥–æ–º—É –∑–∞–¥–∞–Ω–∏—é
    out = []
    for t in tasks:
        qu = await db.execute(
            select(UserTask).where(UserTask.task_id == t.id, UserTask.telegram_id == tg)
        )
        ut: Optional[UserTask] = qu.scalar_one_or_none()
        out.append({
            "id": t.id,
            "title": t.title,
            "url": t.url,
            "reward": f"{Decimal(t.reward_bonus_efhc or 0):.3f}",
            "completed": bool(ut.completed) if ut else False
        })

    return out


@router.post("/user/tasks/complete")
async def user_task_complete(
    task_id: int,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
):
    """
    –ü–æ–º–µ—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å–Ω—ã–µ EFHC.
    """
    if not x_telegram_id or not x_telegram_id.isdigit():
        raise HTTPException(status_code=400, detail="X-Telegram-Id header required")
    tg = int(x_telegram_id)

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–Ω–∞
    qt = await db.execute(select(Task).where(Task.id == task_id, Task.active == True))
    t = qt.scalar_one_or_none()
    if not t:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ")

    # –ü—Ä–æ–≤–µ—Ä–∏–º –∑–∞–ø–∏—Å—å user_task
    qu = await db.execute(
        select(UserTask).where(UserTask.task_id == task_id, UserTask.telegram_id == tg)
    )
    ut: Optional[UserTask] = qu.scalar_one_or_none()

    if ut and ut.completed:
        return {"ok": True, "already_completed": True}

    now = datetime.utcnow()
    reward = Decimal(t.reward_bonus_efhc or 0)

    if not ut:
        ut = UserTask(task_id=t.id, telegram_id=tg, completed=True, completed_at=now)
        db.add(ut)
    else:
        ut.completed = True
        ut.completed_at = now

    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ EFHC
    qbal = await db.execute(select(Balance).where(Balance.telegram_id == tg))
    bal: Optional[Balance] = qbal.scalar_one_or_none()
    if not bal:
        await ensure_user_and_balance(db, tg)
        qbal = await db.execute(select(Balance).where(Balance.telegram_id == tg))
        bal = qbal.scalar_one_or_none()

    new_bonus = d3(Decimal(bal.bonus or 0) + reward)
    await db.execute(
        update(Balance)
        .where(Balance.telegram_id == tg)
        .values(bonus=str(new_bonus))
    )

    await db.commit()
    return {"ok": True, "reward_bonus": f"{reward:.3f}"}


@router.get("/user/referrals")
async def user_referrals(
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
):
    """
    –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã–¥–∞—á–∞ –ø—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–¥–µ–º–æ).
    –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –º–µ—Ö–∞–Ω–∏–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π/—Ç—Ä–µ–∫–µ—Ä–æ–≤ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∑–¥–µ—Å—å (–æ–±—ã—á–Ω–æ —á–µ—Ä–µ–∑ deep link).
    """
    if not x_telegram_id or not x_telegram_id.isdigit():
        raise HTTPException(status_code=400, detail="X-Telegram-Id header required")
    tg = int(x_telegram_id)

    # –ü–æ–∫–∞–∂–µ–º –ø—Ä–æ—Å—Ç–æ, –∫–æ–≥–æ –æ–Ω –ø—Ä–∏–≥–ª–∞—Å–∏–ª –∏ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏
    q = await db.execute(
        select(Referral).where(Referral.inviter_id == tg).order_by(Referral.created_at.desc())
    )
    rows: List[Referral] = list(q.scalars().all())

    return [
        {"invitee_id": r.invitee_id, "active": r.active, "created_at": r.created_at.isoformat()}
        for r in rows
    ]


@router.get("/user/lotteries")
async def user_lotteries(
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
):
    """
    –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞/–±–æ—Ç–∞.
    """
    if not x_telegram_id or not x_telegram_id.isdigit():
        raise HTTPException(status_code=400, detail="X-Telegram-Id header required")

    await ensure_defaults(db)

    q = await db.execute(
        select(Lottery).where(Lottery.active == True).order_by(Lottery.created_at.asc())
    )
    lots: List[Lottery] = list(q.scalars().all())

    return [
        {
            "id": l.code,
            "title": l.title,
            "target": l.target_participants,
            "tickets_sold": l.tickets_sold,
            "prize_type": l.prize_type,
        }
        for l in lots
    ]


@router.post("/user/lottery/buy")
async def user_lottery_buy(
    payload: LotteryBuyRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
):
    """
    –ü—Ä–æ–¥–∞–∂–∞ –±–∏–ª–µ—Ç–æ–≤ –ª–æ—Ç–µ—Ä–µ–∏.
    –¶–µ–Ω–∞ ‚Äî settings.LOTTERY_TICKET_PRICE_EFHC –∑–∞ 1 —à—Ç (—Å EFHC).
    –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ‚Äî settings.LOTTERY_MAX_TICKETS_PER_USER –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å (—É–∂–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ –≤ Pydantic).
    """
    if not x_telegram_id or not x_telegram_id.isdigit():
        raise HTTPException(status_code=400, detail="X-Telegram-Id header required")
    tg = int(x_telegram_id)

    # –õ–æ—Ç–µ—Ä–µ—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–Ω–∞?
    ql = await db.execute(select(Lottery).where(Lottery.code == payload.lottery_id, Lottery.active == True))
    lot: Optional[Lottery] = ql.scalar_one_or_none()
    if not lot:
        raise HTTPException(status_code=404, detail="–õ–æ—Ç–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    count = int(payload.count)
    if count < 1 or count > int(settings.LOTTERY_MAX_TICKETS_PER_USER):
        raise HTTPException(status_code=400, detail=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ {settings.LOTTERY_MAX_TICKETS_PER_USER}")

    # –°–∫–æ–ª—å–∫–æ EFHC –Ω–∞–¥–æ —Å–ø–∏—Å–∞—Ç—å
    price_per = Decimal(settings.LOTTERY_TICKET_PRICE_EFHC)
    total_price = d3(price_per * Decimal(count))

    # –ü—Ä–æ–≤–µ—Ä–∏–º –±–∞–ª–∞–Ω—Å
    qb = await db.execute(select(Balance).where(Balance.telegram_id == tg))
    bal: Optional[Balance] = qb.scalar_one_or_none()
    if not bal:
        await ensure_user_and_balance(db, tg)
        qb = await db.execute(select(Balance).where(Balance.telegram_id == tg))
        bal = qb.scalar_one_or_none()

    efhc = Decimal(bal.efhc or 0)
    if efhc < total_price:
        raise HTTPException(status_code=400, detail=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ EFHC. –ù—É–∂–Ω–æ {total_price:.3f}, –¥–æ—Å—Ç—É–ø–Ω–æ {efhc:.3f}")

    # –°–ø–∏—Å—ã–≤–∞–µ–º EFHC
    new_efhc = d3(efhc - total_price)
    await db.execute(
        update(Balance)
        .where(Balance.telegram_id == tg)
        .values(efhc=str(new_efhc))
    )

    # –°–æ–∑–¥–∞—ë–º –±–∏–ª–µ—Ç—ã
    now = datetime.utcnow()
    for _ in range(count):
        db.add(LotteryTicket(lottery_code=lot.code, telegram_id=tg, purchased_at=now))

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö
    lot.tickets_sold = (lot.tickets_sold or 0) + count

    await db.commit()
    return {"ok": True, "tickets_bought": count, "efhc_spent": f"{total_price:.3f}"}
