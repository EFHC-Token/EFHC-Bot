# üìÇ backend/app/user_routes.py ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã EFHC (WebApp + –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å + –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞)
# -----------------------------------------------------------------------------
# –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –º–æ–¥—É–ª—å:
#   ‚Ä¢ –†–µ–∞–ª–∏–∑—É–µ—Ç API FastAPI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π:
#       - /user/register               ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#       - /user/balance                ‚Äî –±–∞–ª–∞–Ω—Å EFHC / kWh / bonus
#       - /user/exchange               ‚Äî –æ–±–º–µ–Ω EFHC ‚áÑ kWh (1 EFHC = 1 kWh)
#       - /user/panels                 ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –ø–∞–Ω–µ–ª–µ–π
#       - /user/panels/buy             ‚Äî –ø–æ–∫—É–ø–∫–∞ –ø–∞–Ω–µ–ª–µ–π (—Ü–µ–Ω–∞ 100 EFHC, –ª–∏–º–∏—Ç 1000, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è 0.598 kWh)
#       - /user/referrals              ‚Äî —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞ (—Å–æ–∑–¥–∞—Ç—å –∫–æ–¥, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
#       - /user/tasks, /user/tasks/complete ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ bonus EFHC)
#       - /user/lotteries, /user/lottery/buy ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–∞ –ª–æ—Ç–µ—Ä–µ–∏
#       - /user/withdraw               ‚Äî –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ EFHC (–∑–∞–≥–æ—Ç–æ–≤–∫–∞, —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å)
#   ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
#       - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ª–µ–≥–∏—Ç–∏–º–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram WebApp:
#           * –¢—Ä–µ–±—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ `X-Telegram-Init-Data` (–ø–æ–ª–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ initData).
#           * –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å HMAC-SHA256 —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram.
#           * –†–∞–∑–±–∏—Ä–∞–µ–º user.id ‚Üí telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
#           * –ë–µ—Ä—ë–º —Ç–∞–∫–∂–µ username (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
#       - –≠—Ç–æ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –ø–æ–¥–¥–µ–ª–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ `X-Telegram-Id` –∏ —Ä—É—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
#   ‚Ä¢ –ü–∞–Ω–µ–ª–∏:
#       - –ü–∞–Ω–µ–ª–∏ —É –Ω–∞—Å –µ–¥–∏–Ω–æ–≥–æ —Ç–∏–ø–∞ (–Ω–µ—Ç 12 —É—Ä–æ–≤–Ω–µ–π).
#       - –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞–Ω–µ–ª–∏: 100 EFHC (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ config.PANEL_PRICE_EFHC).
#       - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: 0.598 kWh/—Å—É—Ç–∫–∏ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ config.PANEL_DAILY_KWH).
#       - –ú–∞–∫—Å–∏–º—É–º: 1000 –ø–∞–Ω–µ–ª–µ–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
#       - –°–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ efhc_core.user_panels –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å—å—é level=1 (–∏–ª–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å).
#   ‚Ä¢ –û–±–º–µ–Ω–Ω–∏–∫:
#       - 1 EFHC = 1 kWh, –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã, —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ 3 –∑–Ω–∞–∫–æ–≤.
#   ‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—ã:
#       - –ü—Ä–∏–≤—è–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ä–µ—Ñ–µ—Ä–µ—Ä—É (referral_code), –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω —Ä–∞–Ω–µ–µ.
#       - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, —Å—É–º–º–∞—Ä–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –ø–∞–Ω–µ–ª–µ–π.
#       - (–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –≤ scheduler/ton_integration ‚Äî –ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é.)
#   ‚Ä¢ –ó–∞–¥–∞–Ω–∏—è:
#       - /user/tasks ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ efhc_tasks.tasks.
#       - /user/tasks/complete ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –Ω–∞—á–∏—Å–ª–∏—Ç—å bonus EFHC (reward_bonus_efhc).
#   ‚Ä¢ –õ–æ—Ç–µ—Ä–µ–∏:
#       - /user/lotteries ‚Äî —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö.
#       - /user/lottery/buy ‚Äî –ø–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–∞ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å EFHC —Å –±–∞–ª–∞–Ω—Å–∞).
#       - –ó–∞–∫—Ä—ã—Ç–∏–µ –∏ –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –¥–µ–ª–∞–µ—Ç scheduler.draw_lotteries().
#
# –°–≤—è–∑—å —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏:
#   ‚Ä¢ config.py           ‚Äî –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è PANEL_PRICE_EFHC=100, PANEL_DAILY_KWH=0.598.
#   ‚Ä¢ database.py         ‚Äî get_session() –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ë–î.
#   ‚Ä¢ models.py           ‚Äî –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–µ ORM –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ —É—á—Ç–µ–Ω—ã), –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º SQL (text).
#   ‚Ä¢ scheduler.py        ‚Äî daily accrual (kWh) –ø–æ –ø–∞–Ω–µ–ª—è–º, VIP +7% (–µ—Å–ª–∏ –µ—Å—Ç—å user_vip).
#   ‚Ä¢ nft_checker.py      ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ NFT –¥–ª—è VIP (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ).
#   ‚Ä¢ admin_routes.py     ‚Äî –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Å–ø–∏—Å–∫–∏, –ø—Ä–∞–≤–∫–∏, whitelist NFT).
#
# –¢–∞–±–ª–∏—Ü—ã/—Å—Ö–µ–º—ã:
#   –°—Ö–µ–º—ã: efhc_core (–±–∞–ª–∞–Ω—Å—ã, –ø–∞–Ω–µ–ª–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, vip), efhc_tasks, efhc_lottery, efhc_referrals.
#   –¢–∞–±–ª–∏—Ü—ã: 
#       - efhc_core.users (telegram_id, username, created_at, wallet_address? [–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ]),
#       - efhc_core.balances (efhc, bonus, kwh),
#       - efhc_core.user_panels (telegram_id, level=1, count),
#       - efhc_core.user_vip (telegram_id),
#       - efhc_tasks.tasks (id, title, url, reward_bonus_efhc, active),
#       - efhc_tasks.user_tasks (id, telegram_id, task_id, completed_at),
#       - efhc_lottery.lotteries (code, title, target_participants, active, ...),
#       - efhc_lottery.lottery_tickets (lottery_code, telegram_id, purchased_at),
#       - efhc_referrals.referral_links (telegram_id -> referral_code UNIQUE),
#       - efhc_referrals.referrals (telegram_id -> referred_by, –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–æ–¥—É).
#
# –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï:
#   –ï—Å–ª–∏ –ª—é–±–∞—è –∏–∑ —Ç–∞–±–ª–∏—Ü –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –º–æ–¥—É–ª—å —Å–æ–∑–¥–∞—Å—Ç –∏—Ö idempotent (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä).
#   –î–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è Alembic.
# -----------------------------------------------------------------------------

from __future__ import annotations

import base64
import hashlib
import hmac
import json
from datetime import datetime, timezone
from decimal import Decimal, ROUND_DOWN
from typing import Any, Dict, List, Optional

from fastapi import APIRouter, Depends, Header, HTTPException, status
from pydantic import BaseModel, Field
from sqlalchemy import text
from sqlalchemy.ext.asyncio import AsyncSession

from .config import get_settings
from .database import get_session

# -----------------------------------------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# -----------------------------------------------------------------------------
settings = get_settings()

SCHEMA_CORE = settings.DB_SCHEMA_CORE or "efhc_core"
SCHEMA_TASKS = settings.DB_SCHEMA_TASKS or "efhc_tasks"
SCHEMA_LOTTERY = settings.DB_SCHEMA_LOTTERY or "efhc_lottery"
SCHEMA_REFERRAL = settings.DB_SCHEMA_REFERRAL or "efhc_referrals"
SCHEMA_ADMIN = settings.DB_SCHEMA_ADMIN or "efhc_admin"

# –ï–¥–∏–Ω—ã–π —Ç–∏–ø –ø–∞–Ω–µ–ª–µ–π:
PANEL_PRICE_EFHC = Decimal(str(settings.PANEL_PRICE_EFHC or "100"))       # —Ü–µ–Ω–∞ –∑–∞ 1 –ø–∞–Ω–µ–ª—å –≤ EFHC
PANEL_DAILY_KWH = Decimal(str(settings.PANEL_DAILY_KWH or "0.598"))       # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è kWh/—Å—É—Ç–∫–∏ –Ω–∞ 1 –ø–∞–Ω–µ–ª—å (–¥–ª—è scheduler)
PANEL_MAX_COUNT = int(settings.PANEL_MAX_COUNT or 1000)                   # —Å—Ç—Ä–æ–≥–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É

# –ö—É—Ä—Å EFHC <-> kWh
EXCHANGE_RATE_EFHC_TO_KWH = Decimal("1.000")  # 1 EFHC = 1 kWh
EXCHANGE_RATE_KWH_TO_EFHC = Decimal("1.000")  # –æ–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ

# –û–∫—Ä—É–≥–ª–µ–Ω–∏—è
DEC3 = Decimal("0.001")
def d3(x: Decimal) -> Decimal:
    return x.quantize(DEC3, rounding=ROUND_DOWN)

# -----------------------------------------------------------------------------
# Telegram WebApp initData ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
# -----------------------------------------------------------------------------
def _compute_telegram_webapp_hash(init_data: str, bot_token: str) -> str:
    """
    –°—á–∏—Ç–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π —Ö—ç—à –¥–∞–Ω–Ω—ã—Ö initData —Å–æ–≥–ª–∞—Å–Ω–æ Telegram WebApp:
      1) secret_key = SHA256(bot_token)
      2) data_check_string = –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–∞—Ä key=value (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–ª—é—á–∞–º) —á–µ—Ä–µ–∑ \n (–±–µ–∑ hash)
      3) hash = HMAC_SHA256(data_check_string, secret_key), hex-—Å—Ç—Ä–æ–∫–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç hex —Å—Ç—Ä–æ–∫—É.
    """
    # init_data ‚Äî —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "query_id=...&user=...&auth_date=...&hash=..."
    # –ù–∞–º –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å –∏ –≤—ã—á–∏—Å–ª–∏—Ç—å —Ö—ç—à –ø–æ –ø–æ–ª—è–º –∫—Ä–æ–º–µ hash.
    try:
        pairs = init_data.split("&")
        data_map: Dict[str, str] = {}
        for p in pairs:
            if "=" in p:
                k, v = p.split("=", 1)
                data_map[k] = v
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid initData format")

    # –ò–∑–≤–ª–µ—á—ë–º hash
    recv_hash = data_map.get("hash")
    if not recv_hash:
        raise HTTPException(status_code=400, detail="Missing 'hash' in initData")

    # data_check_string: —Å–æ–±—Ä–∞—Ç—å key=value –¥–ª—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π, –∫—Ä–æ–º–µ 'hash', –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ key
    check_kv = []
    for k in sorted([k for k in data_map.keys() if k != "hash"]):
        check_kv.append(f"{k}={data_map[k]}")
    data_check_string = "\n".join(check_kv)

    # –°—á–∏—Ç–∞–µ–º HMAC: —Å–µ–∫—Ä–µ—Ç = SHA256(bot_token)
    secret_key = hashlib.sha256(bot_token.encode("utf-8")).digest()
    mac = hmac.new(secret_key, msg=data_check_string.encode("utf-8"), digestmod=hashlib.sha256)
    calc_hash = mac.hexdigest()

    return calc_hash, recv_hash

def _parse_user_from_init_data(init_data: str) -> Dict[str, Any]:
    """
    –ü–∞—Ä—Å–∏—Ç –ø–æ–ª–µ 'user=<json>' –∏–∑ initData –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
      {id: <telegram_id>, username: <...>, ...}
    """
    # init_data: –Ω–∞–ø—Ä–∏–º–µ—Ä "query_id=...&user=%7B%22id%22%3A12345%2C...%7D&auth_date=...&hash=..."
    # user –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è url-encoded; FastAPI –º–æ–∂–µ—Ç –Ω–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Ç–∞–∫ —á—Ç–æ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –≤—Ä—É—á–Ω—É—é.
    try:
        pairs = init_data.split("&")
        kv: Dict[str, str] = {}
        for p in pairs:
            if "=" in p:
                k, v = p.split("=", 1)
                kv[k] = v

        user_raw = kv.get("user")
        if not user_raw:
            raise HTTPException(status_code=400, detail="Missing 'user' in initData")
        # user_raw url-encoded JSON:
        user_json = base64.urlsafe_b64decode(_to_base64url_clean(user_raw)).decode("utf-8")
        # user_json —Ç–µ–ø–µ—Ä—å ‚Äî —Å—Ç—Ä–æ–∫–∞ JSON, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ dict
        # –ù–æ —á–∞—â–µ Telegram –ø–µ—Ä–µ–¥–∞—ë—Ç user –∫–∞–∫ URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å %7B ... –ï—Å–ª–∏ —Ç–∞–∫ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º urllib.parse.unquote_plus.
    except Exception:
        # –§–æ–ª–ª–±—ç–∫: –ø–∞—Ä—Å–∏–º —á–µ—Ä–µ–∑ unquote_plus
        try:
            from urllib.parse import unquote_plus
            user_json = unquote_plus(user_raw)
        except Exception:
            raise HTTPException(status_code=400, detail="InitData 'user' parse error")

    try:
        user_dict = json.loads(user_json)
    except Exception:
        # –ë—ã–≤–∞–µ—Ç, —á—Ç–æ user_json —É–∂–µ dict-like; fallback
        raise HTTPException(status_code=400, detail="InitData user JSON parse error")

    if "id" not in user_dict:
        raise HTTPException(status_code=400, detail="InitData user missing id")

    return user_dict

def _to_base64url_clean(s: str) -> bytes:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É s –∫ base64url –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–ª–∏–Ω—ã.
    Telegram –º–æ–∂–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å user=... –≤ –Ω–µ–æ–±—ã—á–Ω–æ–º –≤–∏–¥–µ. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å.
    """
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ "%7B%22id...%7D" ‚Äî —ç—Ç–æ urlencoded. –ò—Å–ø–æ–ª—å–∑—É–µ–º unquote_plus
        from urllib.parse import unquote_plus
        s2 = unquote_plus(s)
        # –ü—Ä–µ–≤—Ä–∞—Ç–∏–º –≤ base64url:
        b = s2.encode("utf-8")
        return base64.urlsafe_b64encode(b)
    except Exception:
        return s.encode("utf-8")

async def _verify_webapp_request(
    x_telegram_init_data: Optional[str] = None,
    settings_token: Optional[str] = None
) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Telegram-Init-Data –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å:
      {
        "telegram_id": int,
        "username": Optional[str],
        "raw_user": dict
      }
    –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –Ω–µ–≤–µ—Ä–Ω–∞ ‚Äî –ø–æ–¥–Ω–∏–º–∞–µ—Ç HTTP 403.
    """
    if not x_telegram_init_data:
        raise HTTPException(status_code=401, detail="Missing X-Telegram-Init-Data header")

    bot_token = settings_token or settings.TELEGRAM_BOT_TOKEN
    if not bot_token:
        raise HTTPException(status_code=500, detail="Server misconfigured: no TELEGRAM_BOT_TOKEN")

    calc_hash, recv_hash = _compute_telegram_webapp_hash(x_telegram_init_data, bot_token)
    if not hmac.compare_digest(calc_hash, recv_hash):
        raise HTTPException(status_code=403, detail="Invalid Telegram initData signature")

    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –æ–∫ ‚Äî –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = _parse_user_from_init_data(x_telegram_init_data)
    telegram_id = int(user.get("id"))
    username = user.get("username") or None

    return {"telegram_id": telegram_id, "username": username, "raw_user": user}

# -----------------------------------------------------------------------------
# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü (idempotent) ‚Äî –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
# -----------------------------------------------------------------------------
CREATE_CORE_TABLES_SQL = f"""
-- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ EFHC
CREATE TABLE IF NOT EXISTS {SCHEMA_CORE}.users (
    telegram_id BIGINT PRIMARY KEY,
    username TEXT NULL,
    wallet_address TEXT NULL,
    created_at TIMESTAMPTZ DEFAULT now()
);

-- –ë–∞–ª–∞–Ω—Å—ã EFHC/bonus/kWh
CREATE TABLE IF NOT EXISTS {SCHEMA_CORE}.balances (
    telegram_id BIGINT PRIMARY KEY REFERENCES {SCHEMA_CORE}.users(telegram_id) ON DELETE CASCADE,
    efhc NUMERIC(30, 3) DEFAULT 0,
    bonus NUMERIC(30, 3) DEFAULT 0,
    kwh  NUMERIC(30, 3) DEFAULT 0
);

-- –ü–∞–Ω–µ–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ–¥–∏–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–∏–ø "—É—Ä–æ–≤–Ω—è" (level=1)
CREATE TABLE IF NOT EXISTS {SCHEMA_CORE}.user_panels (
    telegram_id BIGINT NOT NULL REFERENCES {SCHEMA_CORE}.users(telegram_id) ON DELETE CASCADE,
    level INT NOT NULL DEFAULT 1,
    count INT NOT NULL DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now(),
    PRIMARY KEY (telegram_id, level)
);

-- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π VIP —Ñ–ª–∞–≥ (–¥–ª—è –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø–∞–Ω–µ–ª—è–º)
CREATE TABLE IF NOT EXISTS {SCHEMA_CORE}.user_vip (
    telegram_id BIGINT PRIMARY KEY REFERENCES {SCHEMA_CORE}.users(telegram_id) ON DELETE CASCADE,
    since TIMESTAMPTZ DEFAULT now()
);
"""

CREATE_TASKS_TABLES_SQL = f"""
CREATE SCHEMA IF NOT EXISTS {SCHEMA_TASKS};

-- –ó–∞–¥–∞–Ω–∏—è (–∞–¥–º–∏–Ω–æ–º —Å–æ–∑–¥–∞—é—Ç—Å—è)
CREATE TABLE IF NOT EXISTS {SCHEMA_TASKS}.tasks (
    id SERIAL PRIMARY KEY,
    title TEXT NOT NULL,
    url TEXT NULL,
    reward_bonus_efhc NUMERIC(30, 3) NOT NULL DEFAULT 0,
    active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMPTZ DEFAULT now()
);

-- –õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
CREATE TABLE IF NOT EXISTS {SCHEMA_TASKS}.user_tasks (
    id SERIAL PRIMARY KEY,
    telegram_id BIGINT NOT NULL,
    task_id INT NOT NULL REFERENCES {SCHEMA_TASKS}.tasks(id) ON DELETE CASCADE,
    completed_at TIMESTAMPTZ DEFAULT now()
);
"""

CREATE_LOTTERY_TABLES_SQL = f"""
CREATE SCHEMA IF NOT EXISTS {SCHEMA_LOTTERY};

CREATE TABLE IF NOT EXISTS {SCHEMA_LOTTERY}.lotteries (
    id SERIAL PRIMARY KEY,
    code TEXT UNIQUE NOT NULL,
    title TEXT NOT NULL,
    prize_type TEXT NOT NULL,
    target_participants INT NOT NULL DEFAULT 100,
    tickets_sold INT NOT NULL DEFAULT 0,
    active BOOLEAN NOT NULL DEFAULT TRUE,
    winner_telegram_id BIGINT NULL,
    created_at TIMESTAMPTZ DEFAULT now(),
    closed_at TIMESTAMPTZ NULL
);

CREATE TABLE IF NOT EXISTS {SCHEMA_LOTTERY}.lottery_tickets (
    id SERIAL PRIMARY KEY,
    lottery_code TEXT NOT NULL REFERENCES {SCHEMA_LOTTERY}.lotteries(code) ON DELETE CASCADE,
    telegram_id BIGINT NOT NULL,
    purchased_at TIMESTAMPTZ DEFAULT now()
);
"""

CREATE_REFERRAL_TABLES_SQL = f"""
CREATE SCHEMA IF NOT EXISTS {SCHEMA_REFERRAL};

-- –°—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π referral_code
CREATE TABLE IF NOT EXISTS {SCHEMA_REFERRAL}.referral_links (
    telegram_id BIGINT PRIMARY KEY,
    referral_code TEXT UNIQUE NOT NULL,
    created_at TIMESTAMPTZ DEFAULT now()
);

-- –§–∞–∫—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: –∫—Ç–æ –∫–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª
CREATE TABLE IF NOT EXISTS {SCHEMA_REFERRAL}.referrals (
    telegram_id BIGINT PRIMARY KEY,
    referred_by BIGINT NULL,  -- –∫–∞–∫–æ–π telegram_id –ø—Ä–∏–≥–ª–∞—Å–∏–ª —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    created_at TIMESTAMPTZ DEFAULT now()
);
"""

async def ensure_user_routes_tables(db: AsyncSession) -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã EFHC Core/Tasks/Lottery/Referral, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.
    """
    await db.execute(text(CREATE_CORE_TABLES_SQL))
    await db.execute(text(CREATE_TASKS_TABLES_SQL))
    await db.execute(text(CREATE_LOTTERY_TABLES_SQL))
    await db.execute(text(CREATE_REFERRAL_TABLES_SQL))
    await db.commit()

# -----------------------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –ë–î
# -----------------------------------------------------------------------------
async def _ensure_user_exists(db: AsyncSession, telegram_id: int, username: Optional[str] = None) -> None:
    """
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ efhc_core.users –∏ efhc_core.balances.
    """
    await db.execute(
        text(f"""
            INSERT INTO {SCHEMA_CORE}.users (telegram_id, username)
            VALUES (:tg, :un)
            ON CONFLICT (telegram_id) DO UPDATE SET username = COALESCE(EXCLUDED.username, {SCHEMA_CORE}.users.username)
        """),
        {"tg": telegram_id, "un": username},
    )
    await db.execute(
        text(f"""
            INSERT INTO {SCHEMA_CORE}.balances (telegram_id)
            VALUES (:tg)
            ON CONFLICT (telegram_id) DO NOTHING
        """),
        {"tg": telegram_id},
    )

async def _get_balance(db: AsyncSession, telegram_id: int) -> Dict[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å {efhc, bonus, kwh} –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ —Å 3 –∑–Ω–∞–∫–∞–º–∏.
    """
    q = await db.execute(
        text(f"""
            SELECT efhc, bonus, kwh
              FROM {SCHEMA_CORE}.balances
             WHERE telegram_id = :tg
        """),
        {"tg": telegram_id},
    )
    row = q.fetchone()
    if not row:
        return {"efhc": "0.000", "bonus": "0.000", "kwh": "0.000"}
    efhc, bonus, kwh = (Decimal(row[0] or 0), Decimal(row[1] or 0), Decimal(row[2] or 0))
    return {"efhc": f"{d3(efhc):.3f}", "bonus": f"{d3(bonus):.3f}", "kwh": f"{d3(kwh):.3f}"}

async def _update_balance(db: AsyncSession, telegram_id: int, efhc_delta: Decimal = Decimal("0"), bonus_delta: Decimal = Decimal("0"), kwh_delta: Decimal = Decimal("0")) -> None:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –±–∞–ª–∞–Ω—Å—É EFHC/bonus/kWh —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await db.execute(
        text(f"""
            UPDATE {SCHEMA_CORE}.balances
               SET efhc = COALESCE(efhc, 0) + :d_e,
                   bonus = COALESCE(bonus, 0) + :d_b,
                   kwh = COALESCE(kwh, 0) + :d_k
             WHERE telegram_id = :tg
        """),
        {"tg": telegram_id, "d_e": str(d3(efhc_delta)), "d_b": str(d3(bonus_delta)), "d_k": str(d3(kwh_delta))},
    )

async def _get_panels_count(db: AsyncSession, telegram_id: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π (level=1) —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    q = await db.execute(
        text(f"""
            SELECT count
              FROM {SCHEMA_CORE}.user_panels
             WHERE telegram_id = :tg AND level = 1
        """),
        {"tg": telegram_id},
    )
    row = q.fetchone()
    return int(row[0]) if row else 0

async def _set_panels_count(db: AsyncSession, telegram_id: int, new_count: int) -> None:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π (level=1) —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await db.execute(
        text(f"""
            INSERT INTO {SCHEMA_CORE}.user_panels (telegram_id, level, count)
            VALUES (:tg, 1, :c)
            ON CONFLICT (telegram_id, level) DO UPDATE SET count = :c, updated_at = now()
        """),
        {"tg": telegram_id, "c": new_count},
    )

# -----------------------------------------------------------------------------
# Pydantic-—Å—Ö–µ–º—ã –∑–∞–ø—Ä–æ—Å–æ–≤/–æ—Ç–≤–µ—Ç–æ–≤
# -----------------------------------------------------------------------------
class RegisterRequest(BaseModel):
    referral_code: Optional[str] = Field(None, description="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å)")

class BalanceResponse(BaseModel):
    efhc: str
    bonus: str
    kwh: str
    panels: int
    vip: bool

class ExchangeRequest(BaseModel):
    direction: str = Field(..., description="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: 'efhc_to_kwh' –∏–ª–∏ 'kwh_to_efhc'")
    amount: Decimal = Field(..., ge=Decimal("0.001"), description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–±–º–µ–Ω–∞ (—Å—Ç—Ä–æ–≥–æ >0)")

class ExchangeResponse(BaseModel):
    ok: bool
    efhc: str
    kwh: str
    bonus: Optional[str] = None

class BuyPanelsRequest(BaseModel):
    count: int = Field(..., ge=1, le=PANEL_MAX_COUNT, description="–°–∫–æ–ª—å–∫–æ –ø–∞–Ω–µ–ª–µ–π –∫—É–ø–∏—Ç—å (1..1000)")

class BuyPanelsResponse(BaseModel):
    ok: bool
    panels: int
    efhc: str

class ReferralsResponse(BaseModel):
    code: str
    total_referrals: int
    total_panels_by_refs: int

class TasksResponse(BaseModel):
    items: List[Dict[str, Any]]

class TaskCompleteRequest(BaseModel):
    task_id: int

class TaskCompleteResponse(BaseModel):
    ok: bool
    reward_bonus_efhc: str

class LotteriesResponse(BaseModel):
    items: List[Dict[str, Any]]

class LotteryBuyRequest(BaseModel):
    code: str
    pay_with: str = Field("EFHC", description="—á–µ–º –ø–ª–∞—Ç–∏–º: –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ EFHC")

class LotteryBuyResponse(BaseModel):
    ok: bool
    tickets_sold: int
    efhc: Optional[str] = None

class WithdrawRequest(BaseModel):
    amount_efhc: Decimal = Field(..., gt=Decimal("0.000"))
    to_wallet: str = Field(..., description="TON –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
    memo: Optional[str] = None

class WithdrawResponse(BaseModel):
    ok: bool
    request_id: int

# -----------------------------------------------------------------------------
# –†–æ—É—Ç–µ—Ä
# -----------------------------------------------------------------------------
router = APIRouter()

# -----------------------------------------------------------------------------
# –≠–Ω–¥–ø–æ–∏–Ω—Ç: /user/register ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–∏–≤—è–∑–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω referral_code)
# -----------------------------------------------------------------------------
@router.post("/user/register")
async def user_register(
    payload: RegisterRequest,
    db: AsyncSession = Depends(get_session),
    x_tg_init_data: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Init-Data"),
):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ Telegram WebApp initData:
      - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å initData (Telegram) ‚Äî –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–¥–¥–µ–ª–∫–∏.
      - –°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –≤ efhc_core.users, efhc_core.balances.
      - –ï—Å–ª–∏ –±—ã–ª referral_code, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –≤ efhc_referrals.referrals (–µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è).
      - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π/VIP.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ initData –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ telegram_id
    auth = await _verify_webapp_request(x_tg_init_data, settings_token=settings.TELEGRAM_BOT_TOKEN)
    telegram_id = auth["telegram_id"]
    username = auth["username"]

    await ensure_user_routes_tables(db)
    await _ensure_user_exists(db, telegram_id, username)

    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞
    if payload.referral_code:
        code = payload.referral_code.strip()
        # –ù–∞–π–¥—ë–º –∫—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–≥–æ –∫–æ–¥–∞
        q = await db.execute(
            text(f"""
                SELECT telegram_id
                  FROM {SCHEMA_REFERRAL}.referral_links
                 WHERE referral_code = :code
            """),
            {"code": code},
        )
        row = q.fetchone()
        if row:
            referrer = int(row[0])
            # –ü—Ä–∏–≤—è–∂–µ–º –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω —Ä–∞–Ω–µ–µ (–∏ –Ω–µ —Å–∞–º —Å–µ–±—è)
            if referrer != telegram_id:
                await db.execute(
                    text(f"""
                        INSERT INTO {SCHEMA_REFERRAL}.referrals (telegram_id, referred_by)
                        VALUES (:tg, :ref)
                        ON CONFLICT (telegram_id) DO NOTHING
                    """),
                    {"tg": telegram_id, "ref": referrer},
                )

    # –ë–∞–ª–∞–Ω—Å
    bal = await _get_balance(db, telegram_id)
    panels = await _get_panels_count(db, telegram_id)

    # VIP —Ñ–ª–∞–≥
    q_v = await db.execute(
        text(f"SELECT 1 FROM {SCHEMA_CORE}.user_vip WHERE telegram_id = :tg"),
        {"tg": telegram_id},
    )
    vip = q_v.scalar() is not None

    await db.commit()
    return {
        "ok": True,
        "telegram_id": telegram_id,
        "balance": bal,
        "panels": panels,
        "vip": vip,
        "panel_price_efhc": f"{PANEL_PRICE_EFHC:.3f}",
        "panel_daily_kwh": f"{PANEL_DAILY_KWH:.3f}",
        "panel_limit": PANEL_MAX_COUNT,
    }

# -----------------------------------------------------------------------------
# –≠–Ω–¥–ø–æ–∏–Ω—Ç: /user/balance ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø–∞–Ω–µ–ª–µ–π
# -----------------------------------------------------------------------------
@router.get("/user/balance", response_model=BalanceResponse)
async def user_balance(
    db: AsyncSession = Depends(get_session),
    x_tg_init_data: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Init-Data")
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–ª–∞–Ω—Å EFHC/bonus/kWh, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π –∏ —Ñ–ª–∞–≥ VIP –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫—É Telegram WebApp initData.
    """
    auth = await _verify_webapp_request(x_tg_init_data, settings_token=settings.TELEGRAM_BOT_TOKEN)
    telegram_id = auth["telegram_id"]
    username = auth["username"]

    await ensure_user_routes_tables(db)
    await _ensure_user_exists(db, telegram_id, username)

    bal = await _get_balance(db, telegram_id)
    panels = await _get_panels_count(db, telegram_id)

    q_v = await db.execute(
        text(f"SELECT 1 FROM {SCHEMA_CORE}.user_vip WHERE telegram_id = :tg"),
        {"tg": telegram_id},
    )
    vip = q_v.scalar() is not None

    await db.commit()
    return BalanceResponse(
        efhc=bal["efhc"],
        bonus=bal["bonus"],
        kwh=bal["kwh"],
        panels=panels,
        vip=vip
    )

# -----------------------------------------------------------------------------
# –≠–Ω–¥–ø–æ–∏–Ω—Ç: /user/exchange ‚Äî –æ–±–º–µ–Ω EFHC ‚áÑ kWh
# -----------------------------------------------------------------------------
@router.post("/user/exchange", response_model=ExchangeResponse)
async def user_exchange(
    payload: ExchangeRequest,
    db: AsyncSession = Depends(get_session),
    x_tg_init_data: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Init-Data")
):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±–º–µ–Ω EFHC ‚áÑ kWh –ø–æ –∫—É—Ä—Å—É 1:1. 
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å, –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 3 –∑–Ω–∞–∫–æ–≤.
      - direction = 'efhc_to_kwh': —É–º–µ–Ω—å—à–∞–µ–º EFHC, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º kWh.
      - direction = 'kwh_to_efhc': —É–º–µ–Ω—å—à–∞–µ–º kWh, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º EFHC.
    """
    auth = await _verify_webapp_request(x_tg_init_data, settings_token=settings.TELEGRAM_BOT_TOKEN)
    telegram_id = auth["telegram_id"]
    username = auth["username"]

    await ensure_user_routes_tables(db)
    await _ensure_user_exists(db, telegram_id, username)

    if payload.direction not in ("efhc_to_kwh", "kwh_to_efhc"):
        raise HTTPException(status_code=400, detail="Invalid direction")

    amount = d3(Decimal(payload.amount))
    if amount <= 0:
        raise HTTPException(status_code=400, detail="Amount must be > 0")

    # –ü–æ–ª—É—á–∏–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    q = await db.execute(
        text(f"SELECT efhc, kwh FROM {SCHEMA_CORE}.balances WHERE telegram_id = :tg"),
        {"tg": telegram_id},
    )
    row = q.fetchone()
    efhc_cur = Decimal(row[0] or 0) if row else Decimal("0.000")
    kwh_cur = Decimal(row[1] or 0) if row else Decimal("0.000")

    if payload.direction == "efhc_to_kwh":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ EFHC
        if efhc_cur < amount:
            raise HTTPException(status_code=400, detail="Insufficient EFHC balance")
        # 1 EFHC -> 1 kWh
        await _update_balance(db, telegram_id, efhc_delta=-amount, kwh_delta=amount)
    else:
        # kwh_to_efhc
        if kwh_cur < amount:
            raise HTTPException(status_code=400, detail="Insufficient kWh balance")
        await _update_balance(db, telegram_id, efhc_delta=amount, kwh_delta=-amount)

    bal = await _get_balance(db, telegram_id)
    await db.commit()
    return ExchangeResponse(ok=True, efhc=bal["efhc"], kwh=bal["kwh"], bonus=bal["bonus"])

# -----------------------------------------------------------------------------
# –≠–Ω–¥–ø–æ–∏–Ω—Ç: /user/panels ‚Äî —Å–ø–∏—Å–æ–∫/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π
# -----------------------------------------------------------------------------
@router.get("/user/panels")
async def user_panels(
    db: AsyncSession = Depends(get_session),
    x_tg_init_data: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Init-Data")
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–Ω–µ–ª–∏ (—Ü–µ–Ω–∞, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è).
    """
    auth = await _verify_webapp_request(x_tg_init_data, settings_token=settings.TELEGRAM_BOT_TOKEN)
    telegram_id = auth["telegram_id"]
    username = auth["username"]

    await ensure_user_routes_tables(db)
    await _ensure_user_exists(db, telegram_id, username)

    panels = await _get_panels_count(db, telegram_id)
    bal = await _get_balance(db, telegram_id)

    return {
        "panels": panels,
        "panel_price_efhc": f"{PANEL_PRICE_EFHC:.3f}",
        "panel_daily_kwh": f"{PANEL_DAILY_KWH:.3f}",
        "panel_limit": PANEL_MAX_COUNT,
        "balance": bal
    }

# -----------------------------------------------------------------------------
# –≠–Ω–¥–ø–æ–∏–Ω—Ç: /user/panels/buy ‚Äî –ø–æ–∫—É–ø–∫–∞ –ø–∞–Ω–µ–ª–µ–π
# -----------------------------------------------------------------------------
@router.post("/user/panels/buy", response_model=BuyPanelsResponse)
async def user_panels_buy(
    payload: BuyPanelsRequest,
    db: AsyncSession = Depends(get_session),
    x_tg_init_data: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Init-Data")
):
    """
    –ü–æ–∫—É–ø–∫–∞ N –ø–∞–Ω–µ–ª–µ–π. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1000.
    –°—Ç–æ–∏–º–æ—Å—Ç—å: N * 100 EFHC (PANEL_PRICE_EFHC).
    –°–ø–∏—Å—ã–≤–∞–µ–º EFHC –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π (level=1).
    –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç —ç–Ω–µ—Ä–≥–∏—é ‚Äî –æ–Ω–∞ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º scheduler'–æ–º.
    """
    auth = await _verify_webapp_request(x_tg_init_data, settings_token=settings.TELEGRAM_BOT_TOKEN)
    telegram_id = auth["telegram_id"]
    username = auth["username"]

    await ensure_user_routes_tables(db)
    await _ensure_user_exists(db, telegram_id, username)

    buy_count = int(payload.count)
    if buy_count <= 0:
        raise HTTPException(status_code=400, detail="Invalid count")

    cur_panels = await _get_panels_count(db, telegram_id)
    if cur_panels + buy_count > PANEL_MAX_COUNT:
        raise HTTPException(status_code=400, detail=f"Cannot exceed panel limit ({PANEL_MAX_COUNT})")

    total_price = d3(PANEL_PRICE_EFHC * Decimal(buy_count))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å EFHC
    q = await db.execute(text(f"""
        SELECT efhc FROM {SCHEMA_CORE}.balances WHERE telegram_id = :tg
    """), {"tg": telegram_id})
    row = q.fetchone()
    efhc_cur = Decimal(row[0] or 0) if row else Decimal("0.000")
    if efhc_cur < total_price:
        raise HTTPException(status_code=400, detail="Insufficient EFHC for purchase")

    # –°–ø–∏—Å–∞—Ç—å EFHC
    await _update_balance(db, telegram_id, efhc_delta=-total_price)
    # –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π
    new_count = cur_panels + buy_count
    await _set_panels_count(db, telegram_id, new_count)

    bal = await _get_balance(db, telegram_id)
    await db.commit()
    return BuyPanelsResponse(ok=True, panels=new_count, efhc=bal["efhc"])

# -----------------------------------------------------------------------------
# –≠–Ω–¥–ø–æ–∏–Ω—Ç: /user/referrals ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å/—Å–æ–∑–¥–∞—Ç—å ref-–∫–æ–¥, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
# -----------------------------------------------------------------------------
@router.get("/user/referrals", response_model=ReferralsResponse)
async def user_referrals(
    db: AsyncSession = Depends(get_session),
    x_tg_init_data: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Init-Data")
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç referral_code –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–∑–¥–∞—ë—Ç, –µ—Å–ª–∏ –Ω–µ—Ç),
    –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: –æ–±—â–µ–µ —á–∏—Å–ª–æ, —Å—É–º–º–∞—Ä–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –ø–∞–Ω–µ–ª–µ–π.
    """
    auth = await _verify_webapp_request(x_tg_init_data, settings_token=settings.TELEGRAM_BOT_TOKEN)
    telegram_id = auth["telegram_id"]
    username = auth["username"]

    await ensure_user_routes_tables(db)
    await _ensure_user_exists(db, telegram_id, username)

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å referral_link
    q = await db.execute(
        text(f"SELECT referral_code FROM {SCHEMA_REFERRAL}.referral_links WHERE telegram_id = :tg"),
        {"tg": telegram_id},
    )
    row = q.fetchone()
    if row:
        code = row[0]
    else:
        # –°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –∫–∞–∫ 'EFHC{telegram_id}' –∏–ª–∏ –ø–æ –∏–Ω–æ–π –ª–æ–≥–∏–∫–µ
        code = f"EFHC{telegram_id}"
        # –í —Å–ª—É—á–∞–µ –∫–æ–ª–ª–∏–∑–∏–∏ ‚Äî –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å suffix.
        try:
            await db.execute(
                text(f"""
                    INSERT INTO {SCHEMA_REFERRAL}.referral_links (telegram_id, referral_code)
                    VALUES (:tg, :code)
                """),
                {"tg": telegram_id, "code": code},
            )
        except Exception:
            # fallback –ø—Ä–∏ –∫–æ–ª–ª–∏–∑–∏–∏
            code = f"EFHC{telegram_id}X"
            await db.execute(
                text(f"""
                    INSERT INTO {SCHEMA_REFERRAL}.referral_links (telegram_id, referral_code)
                    VALUES (:tg, :code)
                    ON CONFLICT (telegram_id) DO UPDATE SET referral_code = EXCLUDED.referral_code
                """),
                {"tg": telegram_id, "code": code},
            )

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    q2 = await db.execute(
        text(f"""
            SELECT COUNT(*) 
              FROM {SCHEMA_REFERRAL}.referrals
             WHERE referred_by = :tg
        """),
        {"tg": telegram_id},
    )
    total_refs = int(q2.scalar() or 0)

    # –°—É–º–º–∞—Ä–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –ø–∞–Ω–µ–ª–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏: –ø—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É count –≤ user_panels
    # –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –º–æ–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é/–ª–æ–≥ –ø–æ–∫—É–ø–æ–∫.
    q3 = await db.execute(
        text(f"""
            SELECT COALESCE(SUM(up.count), 0)
              FROM {SCHEMA_CORE}.user_panels up
             WHERE up.telegram_id IN (
                SELECT r.telegram_id FROM {SCHEMA_REFERRAL}.referrals r WHERE r.referred_by = :tg
             )
        """),
        {"tg": telegram_id},
    )
    total_panels_by_refs = int(q3.scalar() or 0)

    await db.commit()
    return ReferralsResponse(code=code, total_referrals=total_refs, total_panels_by_refs=total_panels_by_refs)

# -----------------------------------------------------------------------------
# –≠–Ω–¥–ø–æ–∏–Ω—Ç: /user/tasks ‚Äî —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
# -----------------------------------------------------------------------------
@router.get("/user/tasks", response_model=TasksResponse)
async def user_tasks_list(
    db: AsyncSession = Depends(get_session),
    x_tg_init_data: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Init-Data")
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
      [{id, title, url, reward_bonus_efhc}, ...]
    """
    auth = await _verify_webapp_request(x_tg_init_data, settings_token=settings.TELEGRAM_BOT_TOKEN)
    telegram_id = auth["telegram_id"]
    username = auth["username"]

    await ensure_user_routes_tables(db)
    await _ensure_user_exists(db, telegram_id, username)

    q = await db.execute(
        text(f"""
            SELECT id, title, url, reward_bonus_efhc
              FROM {SCHEMA_TASKS}.tasks
             WHERE active = TRUE
             ORDER BY id ASC
        """)
    )
    items = []
    for r in q.all() or []:
        items.append({
            "id": int(r[0]),
            "title": r[1],
            "url": r[2],
            "reward_bonus_efhc": f"{d3(Decimal(r[3] or 0)):.3f}"
        })
    await db.commit()
    return TasksResponse(items=items)

# -----------------------------------------------------------------------------
# –≠–Ω–¥–ø–æ–∏–Ω—Ç: /user/tasks/complete ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
# -----------------------------------------------------------------------------
@router.post("/user/tasks/complete", response_model=TaskCompleteResponse)
async def user_task_complete(
    payload: TaskCompleteRequest,
    db: AsyncSession = Depends(get_session),
    x_tg_init_data: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Init-Data")
):
    """
    –ü–æ–º–µ—á–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç bonus EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ).
    –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–∂–Ω–æ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä.
    """
    auth = await _verify_webapp_request(x_tg_init_data, settings_token=settings.TELEGRAM_BOT_TOKEN)
    telegram_id = auth["telegram_id"]
    username = auth["username"]

    await ensure_user_routes_tables(db)
    await _ensure_user_exists(db, telegram_id, username)

    # –ù–∞–π–¥—ë–º –Ω–∞–≥—Ä–∞–¥—É
    q = await db.execute(
        text(f"SELECT reward_bonus_efhc FROM {SCHEMA_TASKS}.tasks WHERE id = :tid AND active = TRUE"),
        {"tid": payload.task_id},
    )
    row = q.fetchone()
    if not row:
        raise HTTPException(status_code=404, detail="Task not found or not active")

    reward = d3(Decimal(row[0] or 0))
    if reward <= 0:
        raise HTTPException(status_code=400, detail="Task reward is zero")

    # –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏
    q2 = await db.execute(
        text(f"""
            SELECT 1 FROM {SCHEMA_TASKS}.user_tasks
             WHERE telegram_id = :tg AND task_id = :tid
        """),
        {"tg": telegram_id, "tid": payload.task_id},
    )
    if q2.scalar():
        raise HTTPException(status_code=400, detail="Task already completed")

    # –ù–∞—á–∏—Å–ª—è–µ–º bonus EFHC
    await _update_balance(db, telegram_id, bonus_delta=reward)

    # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    await db.execute(
        text(f"""
            INSERT INTO {SCHEMA_TASKS}.user_tasks (telegram_id, task_id)
            VALUES (:tg, :tid)
        """),
        {"tg": telegram_id, "tid": payload.task_id},
    )

    await db.commit()
    return TaskCompleteResponse(ok=True, reward_bonus_efhc=f"{reward:.3f}")

# -----------------------------------------------------------------------------
# –≠–Ω–¥–ø–æ–∏–Ω—Ç: /user/lotteries ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏
# -----------------------------------------------------------------------------
@router.get("/user/lotteries", response_model=LotteriesResponse)
async def user_lotteries(
    db: AsyncSession = Depends(get_session),
    x_tg_init_data: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Init-Data")
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π:
      [{code, title, prize_type, target_participants, tickets_sold}, ...]
    """
    auth = await _verify_webapp_request(x_tg_init_data, settings_token=settings.TELEGRAM_BOT_TOKEN)
    telegram_id = auth["telegram_id"]
    username = auth["username"]

    await ensure_user_routes_tables(db)
    await _ensure_user_exists(db, telegram_id, username)

    q = await db.execute(
        text(f"""
            SELECT code, title, prize_type, target_participants, tickets_sold
              FROM {SCHEMA_LOTTERY}.lotteries
             WHERE active = TRUE
             ORDER BY created_at ASC
        """)
    )
    items = []
    for r in q.all() or []:
        items.append({
            "code": r[0],
            "title": r[1],
            "prize_type": r[2],
            "target_participants": int(r[3] or 0),
            "tickets_sold": int(r[4] or 0),
        })
    await db.commit()
    return LotteriesResponse(items=items)

# -----------------------------------------------------------------------------
# –≠–Ω–¥–ø–æ–∏–Ω—Ç: /user/lottery/buy ‚Äî –ø–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–∞ –ª–æ—Ç–µ—Ä–µ–∏
# -----------------------------------------------------------------------------
@router.post("/user/lottery/buy", response_model=LotteryBuyResponse)
async def user_lottery_buy(
    payload: LotteryBuyRequest,
    db: AsyncSession = Depends(get_session),
    x_tg_init_data: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Init-Data")
):
    """
    –ü–æ–∫—É–ø–∫–∞ 1 –±–∏–ª–µ—Ç–∞ –ª–æ—Ç–µ—Ä–µ–∏ code.
    –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –æ–ø–ª–∞—Ç–∞ EFHC; –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –Ω–∞ bonus EFHC –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏.
    –í–ê–ñ–ù–û: —Ü–µ–Ω—É –±–∏–ª–µ—Ç–∞ –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ lotteries (–æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ), –Ω–æ —Å–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ–º 1 EFHC –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞.
    **–£—Ç–æ—á–Ω–∏—Ç–µ —Ü–µ–Ω—É –±–∏–ª–µ—Ç–∞ –ª–æ—Ç–µ—Ä–µ–∏.** –ó–¥–µ—Å—å –ø–æ—Å—Ç–∞–≤–∏–º 1 EFHC –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç.
    """
    TICKET_PRICE_EFHC = Decimal("1.000")  # TODO: –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥ –∏–ª–∏ –ø–æ–ª–µ —Ç–∞–±–ª–∏—Ü—ã lotteries

    auth = await _verify_webapp_request(x_tg_init_data, settings_token=settings.TELEGRAM_BOT_TOKEN)
    telegram_id = auth["telegram_id"]
    username = auth["username"]

    await ensure_user_routes_tables(db)
    await _ensure_user_exists(db, telegram_id, username)

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ª–æ—Ç–µ—Ä–µ—è –∞–∫—Ç–∏–≤–Ω–∞
    q = await db.execute(
        text(f"""
            SELECT active, tickets_sold, target_participants
              FROM {SCHEMA_LOTTERY}.lotteries
             WHERE code = :code
        """),
        {"code": payload.code}
    )
    row = q.fetchone()
    if not row:
        raise HTTPException(status_code=404, detail="Lottery not found")
    active, tickets_sold, target_participants = bool(row[0]), int(row[1] or 0), int(row[2] or 0)
    if not active:
        raise HTTPException(status_code=400, detail="Lottery is not active")

    # –ü—Ä–æ–≤–µ—Ä–∏–º –±–∞–ª–∞–Ω—Å EFHC
    q2 = await db.execute(
        text(f"SELECT efhc FROM {SCHEMA_CORE}.balances WHERE telegram_id = :tg"),
        {"tg": telegram_id},
    )
    row2 = q2.fetchone()
    efhc_cur = Decimal(row2[0] or 0) if row2 else Decimal("0.000")
    if efhc_cur < TICKET_PRICE_EFHC:
        raise HTTPException(status_code=400, detail="Insufficient EFHC")

    # –°–ø–∏—Å—ã–≤–∞–µ–º EFHC –∏ —Å–æ–∑–¥–∞—ë–º –±–∏–ª–µ—Ç
    await _update_balance(db, telegram_id, efhc_delta=-TICKET_PRICE_EFHC)
    await db.execute(
        text(f"""
            INSERT INTO {SCHEMA_LOTTERY}.lottery_tickets (lottery_code, telegram_id)
            VALUES (:code, :tg)
        """),
        {"code": payload.code, "tg": telegram_id},
    )
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ tickets_sold
    await db.execute(
        text(f"""
            UPDATE {SCHEMA_LOTTERY}.lotteries
               SET tickets_sold = tickets_sold + 1
             WHERE code = :code
        """),
        {"code": payload.code},
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ –±–∏–ª–µ—Ç–æ–≤
    q3 = await db.execute(
        text(f"SELECT tickets_sold FROM {SCHEMA_LOTTERY}.lotteries WHERE code = :code"),
        {"code": payload.code},
    )
    ts = int(q3.scalar() or 0)

    bal = await _get_balance(db, telegram_id)
    await db.commit()
    return LotteryBuyResponse(ok=True, tickets_sold=ts, efhc=bal["efhc"])

# -----------------------------------------------------------------------------
# –≠–Ω–¥–ø–æ–∏–Ω—Ç: /user/withdraw ‚Äî –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ EFHC (—á–µ—Ä–µ–∑ TON/Jetton)
# -----------------------------------------------------------------------------
@router.post("/user/withdraw", response_model=WithdrawResponse)
async def user_withdraw(
    payload: WithdrawRequest,
    db: AsyncSession = Depends(get_session),
    x_tg_init_data: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Init-Data")
):
    """
    –°–æ–∑–¥–∞—ë—Ç –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ EFHC. –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
      - –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å EFHC, –±–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –≤—ã–≤–æ–¥ (—Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–∞–∑—É).
      - –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ efhc_core.withdraw_requests (–Ω—É–∂–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞).
      - –û–±—Ä–∞–±–æ—Ç—á–∏–∫/–∞–¥–º–∏–Ω –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª–Ω—è–µ—Ç –∑–∞—è–≤–∫—É (—Å–º. admin_routes/—Ç–æ–Ω-–ª–æ–≥–∏–∫–∞).
    –í —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ —Ç—É—Ç –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TonSmartContract –∏–ª–∏ TonAPI.
    """
    auth = await _verify_webapp_request(x_tg_init_data, settings_token=settings.TELEGRAM_BOT_TOKEN)
    telegram_id = auth["telegram_id"]
    username = auth["username"]

    await ensure_user_routes_tables(db)
    await _ensure_user_exists(db, telegram_id, username)

    amount = d3(Decimal(payload.amount_efhc))
    if amount <= 0:
        raise HTTPException(status_code=400, detail="Invalid amount")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å EFHC
    q = await db.execute(
        text(f"SELECT efhc FROM {SCHEMA_CORE}.balances WHERE telegram_id = :tg"),
        {"tg": telegram_id},
    )
    row = q.fetchone()
    efhc_cur = Decimal(row[0] or 0) if row else Decimal("0.000")
    if efhc_cur < amount:
        raise HTTPException(status_code=400, detail="Insufficient EFHC")

    # –°–ø–∏—Å—ã–≤–∞–µ–º EFHC (–±–ª–æ–∫–∏—Ä—É–µ–º)
    await _update_balance(db, telegram_id, efhc_delta=-amount)

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:
    await db.execute(text(f"""
        CREATE TABLE IF NOT EXISTS {SCHEMA_CORE}.withdraw_requests (
            id SERIAL PRIMARY KEY,
            telegram_id BIGINT NOT NULL,
            amount_efhc NUMERIC(30, 3) NOT NULL,
            to_wallet TEXT NOT NULL,
            memo TEXT NULL,
            status TEXT NOT NULL DEFAULT 'PENDING',
            created_at TIMESTAMPTZ DEFAULT now(),
            processed_at TIMESTAMPTZ NULL
        );
    """))

    # –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É
    res = await db.execute(
        text(f"""
            INSERT INTO {SCHEMA_CORE}.withdraw_requests (telegram_id, amount_efhc, to_wallet, memo)
            VALUES (:tg, :amt, :dst, :memo)
            RETURNING id
        """),
        {"tg": telegram_id, "amt": str(amount), "dst": payload.to_wallet, "memo": payload.memo or None},
    )
    req_id = int(res.fetchone()[0])

    await db.commit()
    return WithdrawResponse(ok=True, request_id=req_id)
