# üìÇ backend/app/admin_routes.py ‚Äî –∞–¥–º–∏–Ω-—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã EFHC
# -----------------------------------------------------------------------------
# –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
#   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
#       - –°—É–ø–µ—Ä–∞–¥–º–∏–Ω –ø–æ TELEGRAM ID: settings.ADMIN_TELEGRAM_ID.
#       - –ê–¥–º–∏–Ω –ø–æ NFT: –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Wallet-Address –∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
#         —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —Å whitelist (—Ç–∞–±–ª–∏—Ü–∞ efhc_admin.admin_nft_whitelist).
#         –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ TonAPI (settings.NFT_PROVIDER_BASE_URL / API_KEY).
#   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ whitelist'–æ–º NFT:
#       - –°–ø–∏—Å–æ–∫, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ.
#   ‚Ä¢ –†—É—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:
#       - –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ/—Å–ø–∏—Å–∞–Ω–∏–µ EFHC/bonus/kWh,
#       - –£—Å—Ç–∞–Ω–æ–≤–∫–∞/—Å–Ω—è—Ç–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ VIP-—Ñ–ª–∞–≥–∞.
#   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏:
#       - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á,
#       - –°–æ–∑–¥–∞–Ω–∏–µ, —á–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.
#   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ—è–º–∏:
#       - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö,
#       - –°–æ–∑–¥–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è.
#   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ TonAPI-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:
#       - –ü–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–±—ã—Ç–∏–π (efhc_core.ton_events_log).
#
# –í–ê–ñ–ù–û:
#   ‚Ä¢ –í—Å–µ –∞–¥–º–∏–Ω-—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Telegram-Id
#   ‚Ä¢ –î–ª—è NFT-–ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω—É–∂–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Wallet-Address (TON-–∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
#   ‚Ä¢ –ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª—è–µ–º: —ç—Ç–æ –Ω–∞–¥—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–¥ —Ç–µ–∫—É—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.
# -----------------------------------------------------------------------------

from __future__ import annotations

from datetime import datetime
from decimal import Decimal, ROUND_DOWN
from typing import List, Optional, Dict, Any

import httpx
from fastapi import APIRouter, Depends, Header, HTTPException, status, Path, Query
from pydantic import BaseModel, Field
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, delete, func, text, and_

from .database import get_session
from .config import get_settings
from .models import (
    User,
    Balance,
    UserVIP,
    Task,
    Lottery,
    LotteryTicket,
    TonEventLog,
    AdminNFTWhitelist,
)

settings = get_settings()
router = APIRouter()

# ---------------------------------------------------------------------
# –£—Ç–∏–ª–∏—Ç—ã –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –∏ Decimal
# ---------------------------------------------------------------------
DEC3 = Decimal("0.001")

def d3(x: Decimal) -> Decimal:
    return x.quantize(DEC3, rounding=ROUND_DOWN)


# ---------------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
# ---------------------------------------------------------------------
async def _fetch_account_nfts(owner: str) -> List[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ NFT-–∞–¥—Ä–µ—Å–æ–≤, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö owner (TON-–∞–¥—Ä–µ—Å), –∏—Å–ø–æ–ª—å–∑—É—è TonAPI.
    –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ TonAPI:
      - https://tonapi.io (v2)
    –ú—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ NFT –∞–∫–∫–∞—É–Ω—Ç–∞; –∑–∞—Ç–µ–º —Å–≤–µ—Ä—è–µ–º —Å whitelist.
    """
    base = (settings.NFT_PROVIDER_BASE_URL or "https://tonapi.io").rstrip("/")
    url = f"{base}/v2/accounts/{owner}/nfts"
    headers = {}
    if settings.NFT_PROVIDER_API_KEY:
        # TonAPI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Authorization: Bearer <token>
        headers["Authorization"] = f"Bearer {settings.NFT_PROVIDER_API_KEY}"

    try:
        async with httpx.AsyncClient(timeout=15.0) as client:
            r = await client.get(url, headers=headers, params={"collection": settings.VIP_NFT_COLLECTION or None})
            r.raise_for_status()
            data = r.json()
    except httpx.HTTPError as e:
        # –î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –≤–∞–ª–∏–º –≤—Å—ë ‚Äî –ø—Ä–æ—Å—Ç–æ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ 0 NFT
        print(f"[EFHC][ADMIN][NFT] TonAPI request failed: {e}")
        return []

    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ TonAPI –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è; –≤ v2 –æ–±—ã—á–Ω–æ nfts -> items
    items = []
    if isinstance(data, dict):
        items = data.get("nfts") or data.get("items") or []
    addrs: List[str] = []

    for it in items:
        # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∞–¥—Ä–µ—Å NFT (chain repr)
        # –û–±—ã—á–Ω–æ: it['address'] –∏–ª–∏ it['nft']['address'] ‚Äî –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        addr = it.get("address") or (it.get("nft") or {}).get("address")
        if addr:
            addrs.append(addr)

    return addrs


async def _is_admin_by_nft(db: AsyncSession, owner: Optional[str]) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —É owner –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω NFT –∏–∑ whitelist.
    owner ‚Äî TON –∞–¥—Ä–µ—Å (—Å—Ç—Ä–æ–∫–∞). –ï—Å–ª–∏ None/–ø—É—Å—Ç–æ ‚Üí False.
    """
    if not owner:
        return False

    # –ü–æ–ª—É—á–∏–º whitelist –∏–∑ –ë–î
    q = await db.execute(select(AdminNFTWhitelist.nft_address))
    wl = {row[0] for row in q.all()}  # –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤

    if not wl:
        # –ù–µ—Ç –Ω–∏—á–µ–≥–æ –≤ whitelist ‚Äî –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ NFT-–¥–æ—Å—Ç—É–ø –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω
        return False

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º NFT –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    user_nfts = await _fetch_account_nfts(owner)
    if not user_nfts:
        return False

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –æ–¥–Ω–æ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É (—É –∞–¥—Ä–µ—Å–æ–≤ –≤ TON –æ–±—ã—á–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä –≤–∞–∂–µ–Ω, –Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≤–æ–¥–∏–º)
    wl_norm = {s.strip() for s in wl}
    user_nfts_norm = {s.strip() for s in user_nfts}

    inter = wl_norm.intersection(user_nfts_norm)
    return len(inter) > 0


async def require_admin(
    db: AsyncSession,
    x_telegram_id: Optional[str],
    x_wallet_address: Optional[str],
) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ñ–ª–∞–≥–∞–º–∏:
      {
        "is_admin": bool,
        "by": "super" | "nft" | None
      }
    """
    if not x_telegram_id or not x_telegram_id.isdigit():
        raise HTTPException(status_code=400, detail="X-Telegram-Id header required")

    tg = int(x_telegram_id)
    # 1) –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –ø–æ Telegram ID
    if settings.ADMIN_TELEGRAM_ID and tg == int(settings.ADMIN_TELEGRAM_ID):
        return {"is_admin": True, "by": "super"}

    # 2) –ê–¥–º–∏–Ω –ø–æ NFT (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω –∫–æ—à–µ–ª—ë–∫)
    if await _is_admin_by_nft(db, x_wallet_address):
        return {"is_admin": True, "by": "nft"}

    # 3) –ù–µ –∞–¥–º–∏–Ω
    raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤: —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–¥–º–∏–Ω NFT –∏–ª–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω ID")


# ---------------------------------------------------------------------
# –°—Ö–µ–º—ã –∑–∞–ø—Ä–æ—Å–æ–≤/–æ—Ç–≤–µ—Ç–æ–≤ (Pydantic)
# ---------------------------------------------------------------------
class WhoAmIResponse(BaseModel):
    is_admin: bool
    by: Optional[str] = Field(None, description="'super' –∏–ª–∏ 'nft'")
    admin_telegram_id: Optional[int] = None
    vip_nft_collection: Optional[str] = None
    whitelist_count: int = 0


class WhitelistAddRequest(BaseModel):
    nft_address: str = Field(..., description="–ê–¥—Ä–µ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ NFT-—Ç–æ–∫–µ–Ω–∞ (GetGems/TonAPI —Ñ–æ—Ä–º–∞—Ç)")
    comment: Optional[str] = Field(None, description="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–ª–∞–¥–µ–ª–µ—Ü)")


class CreditRequest(BaseModel):
    telegram_id: int = Field(..., description="–ö–æ–º—É –Ω–∞—á–∏—Å–ª—è—Ç—å")
    efhc: Optional[Decimal] = Field(Decimal("0.000"), description="–°–∫–æ–ª—å–∫–æ EFHC (–æ—Å–Ω–æ–≤–Ω—ã—Ö) –¥–æ–±–∞–≤–∏—Ç—å")
    bonus: Optional[Decimal] = Field(Decimal("0.000"), description="–°–∫–æ–ª—å–∫–æ –±–æ–Ω—É—Å–Ω—ã—Ö EFHC –¥–æ–±–∞–≤–∏—Ç—å")
    kwh: Optional[Decimal] = Field(Decimal("0.000"), description="–°–∫–æ–ª—å–∫–æ kWh –¥–æ–±–∞–≤–∏—Ç—å")


class DebitRequest(BaseModel):
    telegram_id: int = Field(..., description="–£ –∫–æ–≥–æ —Å–ø–∏—Å—ã–≤–∞—Ç—å")
    efhc: Optional[Decimal] = Field(Decimal("0.000"), description="–°–∫–æ–ª—å–∫–æ EFHC (–æ—Å–Ω–æ–≤–Ω—ã—Ö) —Å–ø–∏—Å–∞—Ç—å")
    bonus: Optional[Decimal] = Field(Decimal("0.000"), description="–°–∫–æ–ª—å–∫–æ –±–æ–Ω—É—Å–Ω—ã—Ö EFHC —Å–ø–∏—Å–∞—Ç—å")
    kwh: Optional[Decimal] = Field(Decimal("0.000"), description="–°–∫–æ–ª—å–∫–æ kWh —Å–ø–∏—Å–∞—Ç—å")


class VipSetRequest(BaseModel):
    telegram_id: int = Field(..., description="–ö–æ–º—É —Å—Ç–∞–≤–∏–º/—Å–Ω–∏–º–∞–µ–º VIP")
    enabled: bool = Field(..., description="True ‚Äî –≤—ã–¥–∞—Ç—å VIP, False ‚Äî —Å–Ω—è—Ç—å VIP")


class TaskCreateRequest(BaseModel):
    title: str
    url: Optional[str] = None
    reward_bonus_efhc: Decimal = Field(Decimal("1.000"), ge=Decimal("0.000"))
    active: bool = True


class TaskPatchRequest(BaseModel):
    title: Optional[str] = None
    url: Optional[str] = None
    reward_bonus_efhc: Optional[Decimal] = Field(None, ge=Decimal("0.000"))
    active: Optional[bool] = None


class LotteryCreateRequest(BaseModel):
    code: str = Field(..., description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ª–æ—Ç–µ—Ä–µ–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'lottery_vip')")
    title: str = Field(..., description="–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è")
    prize_type: str = Field(..., description="–¢–∏–ø –ø—Ä–∏–∑–∞: VIP_NFT / PANEL / EFHC –∏ —Ç.–¥.")
    target_participants: int = Field(100, ge=1)
    active: bool = True


class LotteryPatchRequest(BaseModel):
    title: Optional[str] = None
    prize_type: Optional[str] = None
    target_participants: Optional[int] = Field(None, ge=1)
    active: Optional[bool] = None


# ---------------------------------------------------------------------
# –ú–∞—Ä—à—Ä—É—Ç—ã
# ---------------------------------------------------------------------

@router.get("/admin/whoami", response_model=WhoAmIResponse)
async def admin_whoami(
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, convert_underscores=False, alias="X-Wallet-Address"),
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–∑—ã–≤–∞—é—â–∏–π –∞–¥–º–∏–Ω–æ–º.
    - –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω: Telegram ID == settings.ADMIN_TELEGRAM_ID.
    - NFT-–∞–¥–º–∏–Ω: –≤–ª–∞–¥–µ–µ—Ç –æ–¥–Ω–∏–º –∏–∑ NFT –∏–∑ whitelist (–ø–æ X-Wallet-Address).
    –ë–æ—Ç –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–∞ /start –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–∫–∏ ¬´üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å¬ª.
    """
    # –ù–µ –±—Ä–æ—Å–∞–µ–º 403 –∑–¥–µ—Å—å ‚Äî –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–ª–∞–≥ False, —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª –∫–Ω–æ–ø–∫—É.
    is_admin = False
    by = None
    try:
        perm = await require_admin(db, x_telegram_id, x_wallet_address)
        is_admin = perm["is_admin"]
        by = perm["by"]
    except HTTPException:
        is_admin = False
        by = None

    # –°–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ whitelist
    q = await db.execute(select(func.count()).select_from(AdminNFTWhitelist))
    wl_count = int(q.scalar() or 0)

    return WhoAmIResponse(
        is_admin=is_admin,
        by=by,
        admin_telegram_id=int(settings.ADMIN_TELEGRAM_ID) if settings.ADMIN_TELEGRAM_ID else None,
        vip_nft_collection=settings.VIP_NFT_COLLECTION,
        whitelist_count=wl_count
    )


@router.get("/admin/nft/whitelist")
async def admin_nft_whitelist_list(
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, convert_underscores=False, alias="X-Wallet-Address"),
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ NFT-—Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ whitelist.
    """
    await require_admin(db, x_telegram_id, x_wallet_address)

    q = await db.execute(select(AdminNFTWhitelist).order_by(AdminNFTWhitelist.id.asc()))
    rows: List[AdminNFTWhitelist] = list(q.scalars().all())
    return [
        {
            "id": r.id,
            "nft_address": r.nft_address,
            "comment": r.comment,
            "created_at": r.created_at.isoformat(),
        }
        for r in rows
    ]


@router.post("/admin/nft/whitelist")
async def admin_nft_whitelist_add(
    payload: WhitelistAddRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, convert_underscores=False, alias="X-Wallet-Address"),
):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç NFT-—Ç–æ–∫–µ–Ω –≤ whitelist.
    """
    await require_admin(db, x_telegram_id, x_wallet_address)

    # –í—Å—Ç–∞–≤–∫–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–µ–π –ø–æ UniqueConstraint
    try:
        db.add(AdminNFTWhitelist(nft_address=payload.nft_address.strip(), comment=payload.comment))
        await db.commit()
    except Exception as e:
        await db.rollback()
        # –í–æ–∑–º–æ–∂–Ω–æ, –¥—É–±–ª–∏–∫–∞—Ç
        raise HTTPException(status_code=400, detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å: {e}")

    return {"ok": True}


@router.delete("/admin/nft/whitelist/{item_id}")
async def admin_nft_whitelist_delete(
    item_id: int = Path(..., ge=1),
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, convert_underscores=False, alias="X-Wallet-Address"),
):
    """
    –£–¥–∞–ª—è–µ—Ç NFT-—Ç–æ–∫–µ–Ω –∏–∑ whitelist –ø–æ ID.
    """
    await require_admin(db, x_telegram_id, x_wallet_address)

    q = await db.execute(select(AdminNFTWhitelist).where(AdminNFTWhitelist.id == item_id))
    row = q.scalar_one_or_none()
    if not row:
        raise HTTPException(status_code=404, detail="–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    await db.delete(row)
    await db.commit()
    return {"ok": True}


# -------------------- –†—É—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º ------------------------

@router.post("/admin/users/credit")
async def admin_users_credit(
    payload: CreditRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, convert_underscores=False, alias="X-Wallet-Address"),
):
    """
    –†—É—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ EFHC/bonus/kWh –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    await require_admin(db, x_telegram_id, x_wallet_address)

    tg = int(payload.telegram_id)
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –±–∞–ª–∞–Ω—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await db.execute(
        text(f"""
            INSERT INTO {settings.DB_SCHEMA_CORE}.users (telegram_id)
            VALUES (:tg)
            ON CONFLICT (telegram_id) DO NOTHING
        """),
        {"tg": tg}
    )
    await db.execute(
        text(f"""
            INSERT INTO {settings.DB_SCHEMA_CORE}.balances (telegram_id)
            VALUES (:tg)
            ON CONFLICT (telegram_id) DO NOTHING
        """),
        {"tg": tg}
    )

    # –û–±–Ω–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–∏—è
    q = await db.execute(select(Balance).where(Balance.telegram_id == tg))
    bal: Optional[Balance] = q.scalar_one_or_none()
    if not bal:
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")

    new_e = d3(Decimal(bal.efhc or 0) + Decimal(payload.efhc or 0))
    new_b = d3(Decimal(bal.bonus or 0) + Decimal(payload.bonus or 0))
    new_k = d3(Decimal(bal.kwh or 0) + Decimal(payload.kwh or 0))

    await db.execute(
        update(Balance)
        .where(Balance.telegram_id == tg)
        .values(efhc=str(new_e), bonus=str(new_b), kwh=str(new_k))
    )
    await db.commit()
    return {"ok": True, "efhc": f"{new_e:.3f}", "bonus": f"{new_b:.3f}", "kwh": f"{new_k:.3f}"}


@router.post("/admin/users/debit")
async def admin_users_debit(
    payload: DebitRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, convert_underscores=False, alias="X-Wallet-Address"),
):
    """
    –†—É—á–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ EFHC/bonus/kWh.
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Å—É–º–º—ã –∫ —Å–ø–∏—Å–∞–Ω–∏—é.
    """
    await require_admin(db, x_telegram_id, x_wallet_address)

    tg = int(payload.telegram_id)
    q = await db.execute(select(Balance).where(Balance.telegram_id == tg))
    bal: Optional[Balance] = q.scalar_one_or_none()
    if not bal:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/–±–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    req_e = Decimal(payload.efhc or 0)
    req_b = Decimal(payload.bonus or 0)
    req_k = Decimal(payload.kwh or 0)

    cur_e = Decimal(bal.efhc or 0)
    cur_b = Decimal(bal.bonus or 0)
    cur_k = Decimal(bal.kwh or 0)

    if cur_e < req_e or cur_b < req_b or cur_k < req_k:
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è")

    new_e = d3(cur_e - req_e)
    new_b = d3(cur_b - req_b)
    new_k = d3(cur_k - req_k)

    await db.execute(
        update(Balance)
        .where(Balance.telegram_id == tg)
        .values(efhc=str(new_e), bonus=str(new_b), kwh=str(new_k))
    )
    await db.commit()
    return {"ok": True, "efhc": f"{new_e:.3f}", "bonus": f"{new_b:.3f}", "kwh": f"{new_k:.3f}"}


@router.post("/admin/users/vip")
async def admin_users_vip_set(
    payload: VipSetRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, convert_underscores=False, alias="X-Wallet-Address"),
):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/—Å–Ω—è—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π VIP (–¥–ª—è –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø–∞–Ω–µ–ª—è–º).
    –ù–µ –ø—É—Ç–∞—Ç—å —Å –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø–æ–º (–æ–Ω –ø–æ NFT).
    """
    await require_admin(db, x_telegram_id, x_wallet_address)

    tg = int(payload.telegram_id)
    q = await db.execute(select(UserVIP).where(UserVIP.telegram_id == tg))
    row: Optional[UserVIP] = q.scalar_one_or_none()

    if payload.enabled:
        if not row:
            db.add(UserVIP(telegram_id=tg, since=datetime.utcnow()))
            await db.commit()
        return {"ok": True, "vip": True}
    else:
        if row:
            await db.delete(row)
            await db.commit()
        return {"ok": True, "vip": False}


# ------------------------------ –ó–ê–î–ê–ù–ò–Ø ---------------------------------------

@router.get("/admin/tasks")
async def admin_tasks_list(
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, convert_underscores=False, alias="X-Wallet-Address"),
):
    """
    –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ).
    """
    await require_admin(db, x_telegram_id, x_wallet_address)

    q = await db.execute(select(Task).order_by(Task.id.asc()))
    rows: List[Task] = list(q.scalars().all())
    return [
        {
            "id": t.id,
            "title": t.title,
            "url": t.url,
            "reward_bonus_efhc": f"{Decimal(t.reward_bonus_efhc or 0):.3f}",
            "active": t.active,
            "created_at": t.created_at.isoformat(),
        }
        for t in rows
    ]


@router.post("/admin/tasks")
async def admin_tasks_create(
    payload: TaskCreateRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, convert_underscores=False, alias="X-Wallet-Address"),
):
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
    """
    await require_admin(db, x_telegram_id, x_wallet_address)

    t = Task(
        title=payload.title.strip(),
        url=(payload.url or None),
        reward_bonus_efhc=d3(Decimal(payload.reward_bonus_efhc or 0)),
        active=bool(payload.active),
    )
    db.add(t)
    await db.commit()
    await db.refresh(t)
    return {"ok": True, "id": t.id}


@router.patch("/admin/tasks/{task_id}")
async def admin_tasks_patch(
    task_id: int = Path(..., ge=1),
    payload: TaskPatchRequest = None,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, convert_underscores=False, alias="X-Wallet-Address"),
):
    """
    –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: title/url/reward/active.
    """
    await require_admin(db, x_telegram_id, x_wallet_address)

    q = await db.execute(select(Task).where(Task.id == task_id))
    t: Optional[Task] = q.scalar_one_or_none()
    if not t:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    if payload.title is not None:
        t.title = payload.title.strip()
    if payload.url is not None:
        t.url = payload.url
    if payload.reward_bonus_efhc is not None:
        t.reward_bonus_efhc = d3(Decimal(payload.reward_bonus_efhc))
    if payload.active is not None:
        t.active = bool(payload.active)

    await db.commit()
    return {"ok": True}


# ------------------------------ –õ–û–¢–ï–†–ï–ò ---------------------------------------

@router.get("/admin/lotteries")
async def admin_lotteries_list(
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, convert_underscores=False, alias="X-Wallet-Address"),
):
    """
    –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–æ—Ç–µ—Ä–µ–π (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ).
    """
    await require_admin(db, x_telegram_id, x_wallet_address)

    q = await db.execute(select(Lottery).order_by(Lottery.created_at.asc()))
    rows: List[Lottery] = list(q.scalars().all())
    return [
        {
            "id": l.code,
            "title": l.title,
            "prize_type": l.prize_type,
            "target_participants": l.target_participants,
            "active": l.active,
            "tickets_sold": l.tickets_sold,
            "created_at": l.created_at.isoformat(),
        }
        for l in rows
    ]


@router.post("/admin/lotteries")
async def admin_lottery_create(
    payload: LotteryCreateRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, convert_underscores=False, alias="X-Wallet-Address"),
):
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ª–æ—Ç–µ—Ä–µ—é (–∫–æ–¥ —É–Ω–∏–∫–∞–ª–µ–Ω).
    """
    await require_admin(db, x_telegram_id, x_wallet_address)

    # –ü—Ä–æ–≤–µ—Ä–∏–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
    q = await db.execute(select(Lottery).where(Lottery.code == payload.code))
    if q.scalar_one_or_none():
        raise HTTPException(status_code=400, detail="–õ–æ—Ç–µ—Ä–µ—è —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    l = Lottery(
        code=payload.code.strip(),
        title=payload.title.strip(),
        prize_type=payload.prize_type.strip(),
        target_participants=int(payload.target_participants),
        active=bool(payload.active),
    )
    db.add(l)
    await db.commit()
    return {"ok": True}


@router.patch("/admin/lotteries/{code}")
async def admin_lottery_patch(
    code: str,
    payload: LotteryPatchRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, convert_underscores=False, alias="X-Wallet-Address"),
):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ–∏ –ø–æ –∫–æ–¥—É: title/prize_type/target/active.
    """
    await require_admin(db, x_telegram_id, x_wallet_address)

    q = await db.execute(select(Lottery).where(Lottery.code == code))
    l: Optional[Lottery] = q.scalar_one_or_none()
    if not l:
        raise HTTPException(status_code=404, detail="–õ–æ—Ç–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    if payload.title is not None:
        l.title = payload.title.strip()
    if payload.prize_type is not None:
        l.prize_type = payload.prize_type.strip()
    if payload.target_participants is not None:
        l.target_participants = int(payload.target_participants)
    if payload.active is not None:
        l.active = bool(payload.active)

    await db.commit()
    return {"ok": True}


# ------------------------------ –õ–û–ì–ò TON --------------------------------------

@router.get("/admin/ton/logs")
async def admin_ton_logs(
    limit: int = Query(50, ge=1, le=500),
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, convert_underscores=False, alias="X-Telegram-Id"),
    x_wallet_address: Optional[str] = Header(None, convert_underscores=False, alias="X-Wallet-Address"),
):
    """
    –ü–æ—Å–ª–µ–¥–Ω–∏–µ N –ª–æ–≥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥—è—â–∏—Ö TON/Jetton —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (—Ç–∞–±–ª–∏—Ü–∞: efhc_core.ton_events_log).
    """
    await require_admin(db, x_telegram_id, x_wallet_address)

    q = await db.execute(
        select(TonEventLog).order_by(TonEventLog.processed_at.desc()).limit(limit)
    )
    rows: List[TonEventLog] = list(q.scalars().all())
    out = []
    for r in rows:
        out.append({
            "event_id": r.event_id,
            "ts": r.ts.isoformat() if r.ts else None,
            "action_type": r.action_type,
            "asset": r.asset,
            "amount": f"{Decimal(r.amount or 0):.9f}" if r.amount is not None else None,
            "decimals": r.decimals,
            "from": r.from_addr,
            "to": r.to_addr,
            "memo": r.memo,
            "telegram_id": r.telegram_id,
            "parsed_amount_efhc": f"{Decimal(r.parsed_amount_efhc or 0):.3f}" if r.parsed_amount_efhc is not None else None,
            "vip_requested": bool(r.vip_requested),
            "processed": bool(r.processed),
            "processed_at": r.processed_at.isoformat() if r.processed_at else None,
        })
    return out
