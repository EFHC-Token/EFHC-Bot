# üìÇ backend/app/utils.py ‚Äî –æ–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã (Decimal, –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è, —Ö–µ–ª–ø–µ—Ä—ã, –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è, —Å–ø–∏—Å–∞–Ω–∏—è)
# -----------------------------------------------------------------------------
# –ó–¥–µ—Å—å:
# - –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å Decimal (–¥–µ–Ω–µ–∂–Ω—ã–µ/—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å 3 –∑–Ω–∞–∫–∞–º–∏),
# - split_spend (—Å–ø–∏—Å–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö/–æ—Å–Ω–æ–≤–Ω—ã—Ö EFHC),
# - –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 3—Ö –∑–Ω–∞–∫–æ–≤ (q3),
# - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ID (UUID),
# - –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤,
# - –ø—Ä–æ—Å—Ç–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è (8 —è–∑—ã–∫–æ–≤) –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ (–±–æ—Ç –∏ WebApp),
# - —Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–≤–Ω—è, —Ä–∞—Å—á—ë—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –ª–æ—Ç–µ—Ä–µ–∏.

from __future__ import annotations
from decimal import Decimal, ROUND_HALF_UP, getcontext
from typing import Dict, Any, Optional, Tuple, List
import uuid
from .config import get_settings

settings = get_settings()
getcontext().prec = 28  # –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π

# =========================
# üî¢ –†–∞–±–æ—Ç–∞ —Å Decimal
# =========================
def dec(x: Any) -> Decimal:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ Decimal"""
    if isinstance(x, Decimal):
        return x
    return Decimal(str(x))

def q3(x: Any) -> Decimal:
    """–û–∫—Ä—É–≥–ª—è–µ—Ç –∫ 3 –∑–Ω–∞–∫–∞–º –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π (–±–∞–Ω–∫–æ–≤—Å–∫–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ HALF_UP)."""
    return dec(x).quantize(Decimal("0.001"), rounding=ROUND_HALF_UP)

def split_spend(amount: Decimal, bonus_avail: Decimal, main_avail: Decimal) -> Tuple[Decimal, Decimal]:
    """
    –°–ø–∏—Å—ã–≤–∞–µ—Ç —Å–Ω–∞—á–∞–ª–∞ –±–æ–Ω—É—Å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã, –æ—Å—Ç–∞—Ç–æ–∫ ‚Äî —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (use_bonus, use_main).
    """
    use_bonus = min(bonus_avail, amount)
    remaining = amount - use_bonus
    use_main = remaining if remaining > 0 else Decimal("0")
    return q3(use_bonus), q3(use_main)

# =========================
# üÜî UUID
# =========================
def gen_uuid() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–≥–æ UUID (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–µ—Ç–æ–∫)."""
    return str(uuid.uuid4())

# =========================
# üìà –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è
# =========================
def level_progress(levels: List[Dict[str, str]], current_kwh: Decimal) -> Tuple[int, Optional[Decimal], Decimal]:
    """
    levels = —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π: idx, name, threshold_kwh (—Å—Ç—Ä–æ–∫–∞)
    current_kwh = Decimal –Ω–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–í—Ç
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (current_level_idx:int, next_threshold:Decimal|None, progress_0_1:Decimal)
    """
    current_kwh = dec(current_kwh)
    active_idx = 1
    next_thr: Optional[Decimal] = None
    for lvl in levels:
        thr = dec(lvl["threshold_kwh"])
        if current_kwh >= thr:
            active_idx = int(lvl["idx"])
        else:
            next_thr = thr
            break
    if next_thr is None:
        return active_idx, None, dec("1.0")

    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π threshold
    prev_thr = dec("0")
    for lvl in levels:
        if int(lvl["idx"]) == active_idx:
            prev_thr = dec(lvl["threshold_kwh"])
            break
    span = next_thr - prev_thr
    done = current_kwh - prev_thr
    progress = dec("0.0")
    if span > 0:
        progress = (done / span)
        if progress < 0:
            progress = dec("0.0")
        if progress > 1:
            progress = dec("1.0")
    return active_idx, next_thr, progress.quantize(Decimal("0.001"))

# =========================
# ‚ö° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–∏–∏
# =========================
def daily_generation_kwh(is_vip: bool) -> Decimal:
    """–†–∞—Å—á—ë—Ç –¥–Ω–µ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: VIP ‚Üí DAILY_GEN_VIP_KWH, –∏–Ω–∞—á–µ DAILY_GEN_BASE_KWH"""
    return q3(settings.DAILY_GEN_VIP_KWH if is_vip else settings.DAILY_GEN_BASE_KWH)

# =========================
# üéü –õ–æ—Ç–µ—Ä–µ—è
# =========================
def can_buy_more_tickets(current_count: int, add: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return (current_count + add) <= settings.LOTTERY_MAX_TICKETS_PER_USER

# =========================
# üåç –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
# =========================
I18N: Dict[str, Dict[str, str]] = {
    "RU": {
        "PANELS_PURCHASE_OK": "‚úÖ –ü–∞–Ω–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–∞. –°–ø–∏—Å–∞–Ω–æ: {bonus} –±–æ–Ω—É—Å–Ω—ã—Ö EFHC –∏ {main} EFHC.",
        "PANELS_FUNDS_ERROR": "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: {total} EFHC (–±–æ–Ω—É—Å–Ω—ã—Ö {bonus} + –æ—Å–Ω–æ–≤–Ω—ã—Ö {main}). –ù—É–∂–Ω–æ 100.000.",
        "TASK_DONE_BONUS": "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +{bonus} –±–æ–Ω—É—Å–Ω—ã—Ö EFHC.",
        "LOTTERY_TICKET_BOUGHT": "üéü –ë–∏–ª–µ—Ç(—ã) –∫—É–ø–ª–µ–Ω—ã: {n}. –í—Å–µ–≥–æ —Ç–≤–æ–∏—Ö –±–∏–ª–µ—Ç–æ–≤: {total}.",
    },
    "EN": {
        "PANELS_PURCHASE_OK": "‚úÖ Panel purchased. Charged: {bonus} bonus EFHC and {main} EFHC.",
        "PANELS_FUNDS_ERROR": "‚ùå Insufficient funds: {total} EFHC (bonus {bonus} + main {main}). Need 100.000.",
        "TASK_DONE_BONUS": "‚úÖ Task completed! +{bonus} bonus EFHC.",
        "LOTTERY_TICKET_BOUGHT": "üéü Ticket(s) bought: {n}. Your total tickets: {total}.",
    }
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —è–∑—ã–∫–∏ –¥–µ—Ä–∂–∏–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ; —Ç—É—Ç ‚Äî —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã.
}

def t(key: str, lang: Optional[str] = None, **kwargs) -> str:
    """–ü—Ä–æ—Å—Ç–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫."""
    lang = (lang or settings.DEFAULT_LANG).upper()
    mp = I18N.get(lang) or I18N.get("RU")
    s = mp.get(key) or I18N["RU"].get(key) or key
    return s.format(**kwargs)
