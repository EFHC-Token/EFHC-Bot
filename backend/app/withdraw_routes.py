# üìÑ backend/app/withdraw_routes.py
# -----------------------------------------------------------------------------
# –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –º–æ–¥—É–ª—å:
#   ‚Ä¢ –†–µ–∞–ª–∏–∑—É–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è/–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ EFHC:
#       - POST /api/withdraw        (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—ë—Ç –∑–∞—è–≤–∫—É);
#       - GET  /api/withdraw        (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏);
#       - GET  /api/admin/withdraws (–∞–¥–º–∏–Ω —Å–º–æ—Ç—Ä–∏—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏);
#       - POST /api/admin/withdraws/{withdraw_id}/process (–∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –≤—ã–ø–ª–∞—Ç—É).
#   ‚Ä¢ –ü–∏—à–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ efhc_core.withdrawals.
#   ‚Ä¢ –°–ø–∏—Å—ã–≤–∞–µ—Ç EFHC —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.
#   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å TON –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã EFHC Jetton –Ω–∞ –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (TON-–∫–æ—à–µ–ª—ë–∫).
#   ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≤ Telegram –ø—Ä–∏ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö.
#
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
#   ‚Ä¢ PostgreSQL, —Ç–∞–±–ª–∏—Ü–∞ efhc_core.withdrawals;
#   ‚Ä¢ –í config.py –µ—Å—Ç—å —Ç–æ–∫–µ–Ω—ã –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram WebApp, –∞–¥–º–∏–Ω—Å–∫–∏–π whitelist, TON-–∫–æ—à–µ–ª—ë–∫;
#   ‚Ä¢ ton_integration.py —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ EFHC jetton –∏–∑ –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (—Å–º. –Ω–∏–∂–µ).
#
# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
#   ‚Ä¢ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≤—ã–∑–æ–≤—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è —á–µ—Ä–µ–∑ X-Telegram-Init-Data (–≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–µ–±–∞–ø–ø-—Ç–æ–∫–µ–Ω–∞).
#   ‚Ä¢ –ê–¥–º–∏–Ω—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∑–∞—â–∏—â–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–æ–π is_admin (–ø–æ NFT whitelist –∏–ª–∏ —Å–ø–∏—Å–∫—É –∞–¥–º–∏–Ω–æ–≤).
# -----------------------------------------------------------------------------

from __future__ import annotations

from datetime import datetime, timezone
from decimal import Decimal, ROUND_DOWN
from typing import Any, Dict, List, Optional

from fastapi import APIRouter, Depends, HTTPException, Query, Path, Body
from pydantic import BaseModel, Field, validator
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text

from .config import get_settings
from .database import get_session
from .webapp_auth import verify_init_data  # –≤–∞–ª–∏–¥–∞—Ü–∏—è initData –∏–∑ Telegram WebApp (—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ)
from .ton_integration import (
    send_efhc_jetton_transfer,  # —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—ë—Ä—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ EFHC jetton (—Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –≤ ton_integration.py)
)
from .bot_notify import notify_admins  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º (—Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –≤ bot_notify.py)

settings = get_settings()
router = APIRouter(prefix="/api", tags=["withdraw"])

DEC3 = Decimal("0.001")


def d3(x: Decimal) -> Decimal:
    """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π EFHC –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π."""
    return x.quantize(DEC3, rounding=ROUND_DOWN)


CREATE_WITHDRAW_TABLE_SQL = """
CREATE TABLE IF NOT EXISTS efhc_core.withdrawals (
    id SERIAL PRIMARY KEY,
    telegram_id BIGINT REFERENCES efhc_core.users(telegram_id) ON DELETE CASCADE,
    amount NUMERIC(30,3) NOT NULL,
    ton_address TEXT NOT NULL,
    status TEXT DEFAULT 'pending',   -- pending / sent / failed
    tx_hash TEXT NULL,
    created_at TIMESTAMPTZ DEFAULT now(),
    processed_at TIMESTAMPTZ NULL
);
"""


async def ensure_withdraw_tables(db: AsyncSession) -> None:
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É efhc_core.withdrawals, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."""
    await db.execute(text(CREATE_WITHDRAW_TABLE_SQL))
    await db.commit()


# -----------------------------------------------------------------------------
# Pydantic-–º–æ–¥–µ–ª–∏ (schemas)
# -----------------------------------------------------------------------------

class WithdrawCreateRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)."""
    user_id: int = Field(..., description="Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç –∏–º–µ–Ω–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞—ë—Ç—Å—è –∑–∞—è–≤–∫–∞")
    ton_address: str = Field(..., description="TON-–∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤—ã–ø–ª–∞—Ç—ã")
    amount_efhc: Decimal = Field(..., gt=0, description="–°—É–º–º–∞ EFHC –Ω–∞ –≤—ã–≤–æ–¥")

    @validator("amount_efhc")
    def validate_amount(cls, v: Decimal) -> Decimal:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã: > 0 –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 3 –∑–Ω–∞–∫–æ–≤."""
        if v <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0")
        return d3(v)


class WithdrawResponse(BaseModel):
    """–ï–¥–∏–Ω–∏—á–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞—è–≤–∫–∏ (–¥–ª—è –æ—Ç–≤–µ—Ç–∞ API)."""
    id: int
    telegram_id: int
    amount: Decimal
    ton_address: str
    status: str
    tx_hash: Optional[str] = None
    created_at: datetime
    processed_at: Optional[datetime] = None


class WithdrawListResponse(BaseModel):
    """–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)."""
    items: List[WithdrawResponse]


class AdminWithdrawListResponse(BaseModel):
    """–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ (–¥–ª—è –∞–¥–º–∏–Ω–∞)."""
    items: List[WithdrawResponse]


class AdminProcessWithdrawRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–æ–º."""
    # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å "send_from" (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ—à–µ–ª—ë–∫ –ø—Ä–æ–µ–∫—Ç–∞/–ø–æ–¥–ø–∏—Å—ã–≤–∞—é—â–µ–≥–æ).
    # –ù–æ –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –≤—Å—ë –∑–∞—à–∏—Ç–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ton_integration.
    force_recheck: bool = False


class WithdrawCreateResult(BaseModel):
    """–û—Ç–≤–µ—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    ok: bool
    withdrawal: WithdrawResponse


# -----------------------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î
# -----------------------------------------------------------------------------

async def _get_user_balance(db: AsyncSession, telegram_id: int) -> Dict[str, Decimal]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–ª–∞–Ω—Å EFHC/kwh/bonus –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    q = await db.execute(
        text("""
            SELECT efhc, kwh, bonus
              FROM efhc_core.balances
             WHERE telegram_id = :tg
        """),
        {"tg": telegram_id},
    )
    row = q.mappings().first()
    if not row:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ ‚Äî —Å–æ–∑–¥–∞–¥–∏–º –ø—É—Å—Ç—ã–µ
        await db.execute(
            text("""
                INSERT INTO efhc_core.balances (telegram_id, efhc, kwh, bonus)
                VALUES (:tg, 0, 0, 0)
                ON CONFLICT (telegram_id) DO NOTHING
            """),
            {"tg": telegram_id},
        )
        await db.commit()
        return {"efhc": Decimal("0.000"), "kwh": Decimal("0.000"), "bonus": Decimal("0.000")}
    return {
        "efhc": row["efhc"] or Decimal("0"),
        "kwh": row["kwh"] or Decimal("0"),
        "bonus": row["bonus"] or Decimal("0"),
    }


async def _debit_user_efhc(db: AsyncSession, telegram_id: int, amount: Decimal) -> None:
    """
    –°–ø–∏—Å—ã–≤–∞–µ—Ç EFHC —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏).
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—É–º–º—ã –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —Ä–∞–Ω–µ–µ.
    """
    await db.execute(
        text("""
            UPDATE efhc_core.balances
               SET efhc = efhc - :amt
             WHERE telegram_id = :tg
        """),
        {"amt": str(d3(amount)), "tg": telegram_id},
    )


async def _insert_withdraw(db: AsyncSession, telegram_id: int, amount: Decimal, ton_addr: str) -> int:
    """
    –°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –≤ efhc_core.withdrawals (—Å—Ç–∞—Ç—É—Å ‚Äî 'pending').
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏.
    """
    q = await db.execute(
        text("""
            INSERT INTO efhc_core.withdrawals (telegram_id, amount, ton_address, status)
            VALUES (:tg, :amt, :addr, 'pending')
            RETURNING id
        """),
        {"tg": telegram_id, "amt": str(d3(amount)), "addr": ton_addr},
    )
    row = q.first()
    await db.commit()
    return row[0]


async def _get_user_withdraws(db: AsyncSession, telegram_id: int, limit: int = 50) -> List[Dict[str, Any]]:
    """
    –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    q = await db.execute(
        text("""
            SELECT id, telegram_id, amount, ton_address, status, tx_hash, created_at, processed_at
              FROM efhc_core.withdrawals
             WHERE telegram_id = :tg
             ORDER BY created_at DESC
             LIMIT :lim
        """),
        {"tg": telegram_id, "lim": limit},
    )
    return [dict(r) for r in q.mappings().fetchall()]


async def _get_all_withdraws(db: AsyncSession, limit: int = 200) -> List[Dict[str, Any]]:
    """
    –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ (–¥–ª—è –∞–¥–º–∏–Ω–∞).
    """
    q = await db.execute(
        text("""
            SELECT id, telegram_id, amount, ton_address, status, tx_hash, created_at, processed_at
              FROM efhc_core.withdrawals
             ORDER BY created_at DESC
             LIMIT :lim
        """),
        {"lim": limit},
    )
    return [dict(r) for r in q.mappings().fetchall()]


async def _get_withdraw(db: AsyncSession, withdraw_id: int) -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –∑–∞—è–≤–∫—É –ø–æ ID.
    """
    q = await db.execute(
        text("""
            SELECT id, telegram_id, amount, ton_address, status, tx_hash, created_at, processed_at
              FROM efhc_core.withdrawals
             WHERE id = :wid
        """),
        {"wid": withdraw_id},
    )
    r = q.mappings().first()
    return dict(r) if r else None


async def _mark_withdraw_sent(db: AsyncSession, withdraw_id: int, tx_hash: str) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –∫–∞–∫ 'sent' –∏ –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ—Ç tx_hash.
    """
    await db.execute(
        text("""
            UPDATE efhc_core.withdrawals
               SET status = 'sent', tx_hash = :tx, processed_at = now()
             WHERE id = :wid
        """),
        {"tx": tx_hash, "wid": withdraw_id},
    )
    await db.commit()


async def _mark_withdraw_failed(db: AsyncSession, withdraw_id: int, err_msg: str) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –∫–∞–∫ 'failed' (tx_hash –æ—Å—Ç–∞—ë—Ç—Å—è NULL).
    –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.
    """
    await db.execute(
        text("""
            UPDATE efhc_core.withdrawals
               SET status = 'failed', processed_at = now()
             WHERE id = :wid
        """),
        {"wid": withdraw_id},
    )
    await db.commit()


async def _insert_transaction_log(
    db: AsyncSession,
    telegram_id: int,
    amount: Decimal,
    event_type: str,
    note: str
) -> None:
    """
    –õ–æ–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ‚Äî –µ—Å–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ efhc_core.transactions.
    –ó–¥–µ—Å—å –º—ã –ª–æ–≥–∏—Ä—É–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ EFHC –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.
    """
    await db.execute(
        text("""
            INSERT INTO efhc_core.transactions (telegram_id, amount, event_type, note, created_at)
            VALUES (:tg, :amt, :etype, :note, now())
        """),
        {
            "tg": telegram_id,
            "amt": str(d3(amount)),
            "etype": event_type,
            "note": note,
        },
    )


# -----------------------------------------------------------------------------
# Telegram Notifications –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
# -----------------------------------------------------------------------------
async def notify_admins_new_withdraw(telegram_id: int, amount: Decimal, address: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ.
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ bot_notify.notify_admins —Ä–µ–∞–ª–∏–∑—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –¢–µ–ª–µ–≥—Ä–∞–º (—Å–ø–∏—Å–æ–∫ admin_ids).
    """
    msg = f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ EFHC\n" \
          f"ID: {telegram_id}\n" \
          f"–°—É–º–º–∞: {d3(amount)} EFHC\n" \
          f"–ê–¥—Ä–µ—Å: {address}\n" \
          f"–°—Ç–∞—Ç—É—Å: pending"
    try:
        await notify_admins(msg)
    except Exception as e:
        print("[NotifyAdmins] Error:", e)


async def notify_admins_withdraw_processed(withdraw_id: int, tx_hash: str) -> None:
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º/–ª–æ–≥ –∫–∞–Ω–∞–ª–∞ ‚Äî —É—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞.
    """
    msg = f"‚úÖ –ó–∞—è–≤–∫–∞ #{withdraw_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\nTx: {tx_hash}"
    try:
        await notify_admins(msg)
    except Exception as e:
        print("[NotifyAdmins] Error:", e)


async def notify_admins_withdraw_failed(withdraw_id: int, error_msg: str) -> None:
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º ‚Äî –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—ã–ø–ª–∞—Ç—ã.
    """
    msg = f"‚ùå –ó–∞—è–≤–∫–∞ #{withdraw_id} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n–û—à–∏–±–∫–∞: {error_msg}"
    try:
        await notify_admins(msg)
    except Exception as e:
        print("[NotifyAdmins] Error:", e)


# -----------------------------------------------------------------------------
# –ú–∞—Ä—à—Ä—É—Ç—ã (—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã)
# -----------------------------------------------------------------------------

@router.on_event("startup")
async def on_startup() -> None:
    """
    –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–¥–∏–º —Ç–∞–±–ª–∏—Ü—É withdrawals, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç.
    """
    async with get_session() as db:
        await ensure_withdraw_tables(db)


@router.post("/withdraw", response_model=WithdrawCreateResult)
async def create_withdraw(
    payload: WithdrawCreateRequest,
    init_data: str = Depends(verify_init_data),  # –ø—Ä–æ–≤–µ—Ä–∫–∞ "X-Telegram-Init-Data"
    db: AsyncSession = Depends(get_session)
):
    """
    –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ EFHC:
      - –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è initData (–∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp),
      - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ EFHC,
      - –°–ø–∏—Å–∞–Ω–∏–µ EFHC –∏ –∑–∞–ø–∏—Å—å –∑–∞—è–≤–∫–∏ –≤ withdrawals (status='pending'),
      - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    telegram_id = payload.user_id
    ton_address = payload.ton_address.strip()
    amount = d3(payload.amount_efhc)

    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ (–Ω–∞ –ø—Ä–æ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É TON Address checks)
    if not ton_address or len(ton_address) < 20:
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π TON-–∞–¥—Ä–µ—Å")

    # –ü—Ä–æ–≤–µ—Ä–∏–º –±–∞–ª–∞–Ω—Å
    balance = await _get_user_balance(db, telegram_id)
    if balance["efhc"] < amount:
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ EFHC –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")

    # –°–ø–∏—Å—ã–≤–∞–µ–º EFHC —Å –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É
    await _debit_user_efhc(db, telegram_id, amount)
    withdraw_id = await _insert_withdraw(db, telegram_id, amount, ton_address)

    # –õ–æ–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ efhc_core.transactions)
    try:
        await _insert_transaction_log(db, telegram_id, amount, "withdraw_request", f"Withdraw ID {withdraw_id}")
        await db.commit()
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü—ã transactions ‚Äî –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        print("[Withdraw] transaction log insert error:", e)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    await notify_admins_new_withdraw(telegram_id, amount, ton_address)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞
    q = await db.execute(
        text("""
            SELECT id, telegram_id, amount, ton_address, status, tx_hash, created_at, processed_at
              FROM efhc_core.withdrawals
             WHERE id = :wid
        """),
        {"wid": withdraw_id},
    )
    r = q.mappings().first()
    return {
        "ok": True,
        "withdrawal": {
            "id": r["id"],
            "telegram_id": r["telegram_id"],
            "amount": r["amount"],
            "ton_address": r["ton_address"],
            "status": r["status"],
            "tx_hash": r["tx_hash"],
            "created_at": r["created_at"],
            "processed_at": r["processed_at"],
        },
    }


@router.get("/withdraw", response_model=WithdrawListResponse)
async def list_user_withdraws(
    user_id: int = Query(..., description="Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    init_data: str = Depends(verify_init_data),
    db: AsyncSession = Depends(get_session),
):
    """
    –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    items = await _get_user_withdraws(db, telegram_id=user_id, limit=100)
    # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Å–ø–∏—Å–æ–∫ pydantic-–º–æ–¥–µ–ª–µ–π
    out = []
    for w in items:
        out.append({
            "id": w["id"],
            "telegram_id": w["telegram_id"],
            "amount": w["amount"],
            "ton_address": w["ton_address"],
            "status": w["status"],
            "tx_hash": w["tx_hash"],
            "created_at": w["created_at"],
            "processed_at": w["processed_at"],
        })
    return {"items": out}


# ------------------- –ê–¥–º–∏–Ω—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ -------------------

def _check_admin_access(init_data: str) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è:
      ‚Ä¢ verify_init_data –≤–µ—Ä–Ω—É–ª init_data –∏ –≤–Ω—É—Ç—Ä–∏ –¥–æ—Å—Ç—É–ø–µ–Ω user_id (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å).
      ‚Ä¢ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ whitelist –∞–¥–º–∏–Ω–æ–≤ –∏–ª–∏ –ø–æ NFT-–∞–¥—Ä–µ—Å—É.
    """
    # –ï—Å–ª–∏ –≤ verify_init_data —É–∂–µ –µ—Å—Ç—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π user_id ‚Äî –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.
    # –í –Ω–∞—à–µ–º —à–∞–±–ª–æ–Ω–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ verify_init_data –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É,
    # –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ verified_user_id.
    # –í—Ä–µ–º–µ–Ω–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞ settings.ADMINS_WHITELIST.
    # –ü—Ä–∏–º–µ—Ä:
    # if str(verified_user_id) not in settings.ADMINS_WHITELIST: raise HTTPException(403, "Forbidden")
    pass


@router.get("/admin/withdraws", response_model=AdminWithdrawListResponse)
async def admin_list_withdraws(
    limit: int = Query(200, ge=1, le=1000),
    init_data: str = Depends(verify_init_data),
    db: AsyncSession = Depends(get_session),
):
    """
    –ê–¥–º–∏–Ω: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏).
    """
    _check_admin_access(init_data)

    items = await _get_all_withdraws(db, limit=limit)
    out = []
    for w in items:
        out.append({
            "id": w["id"],
            "telegram_id": w["telegram_id"],
            "amount": w["amount"],
            "ton_address": w["ton_address"],
            "status": w["status"],
            "tx_hash": w["tx_hash"],
            "created_at": w["created_at"],
            "processed_at": w["processed_at"],
        })
    return {"items": out}


@router.post("/admin/withdraws/{withdraw_id}/process")
async def admin_process_withdraw(
    withdraw_id: int = Path(..., ge=1),
    payload: AdminProcessWithdrawRequest = Body(...),
    init_data: str = Depends(verify_init_data),
    db: AsyncSession = Depends(get_session),
):
    """
    –ê–¥–º–∏–Ω: –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É EFHC Jetton.
      ‚Ä¢ –°—Ç–∞—Ç—É—Å—ã: pending ‚Üí sent (–∏–ª–∏ failed).
      ‚Ä¢ –í—ã–∑–æ–≤ ton_integration.send_efhc_jetton_transfer(...).
    """
    _check_admin_access(init_data)

    # –ò—â–µ–º –∑–∞—è–≤–∫—É
    w = await _get_withdraw(db, withdraw_id)
    if not w:
        raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    if w["status"] != "pending":
        raise HTTPException(status_code=400, detail="–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")

    telegram_id = w["telegram_id"]
    amount = Decimal(w["amount"])
    ton_addr = w["ton_address"]

    # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ EFHC jetton
    try:
        # send_efhc_jetton_transfer ‚Äî —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –≤ ton_integration.py (–∏—Å–ø–æ–ª—å–∑—É—è –≤–∞—à signer/–∫–æ—à–µ–ª—ë–∫ –ø—Ä–æ–µ–∫—Ç–∞)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º tx_hash (–∏–ª–∏ raise –ø—Ä–∏ –æ—à–∏–±–∫–µ).
        tx_hash = await send_efhc_jetton_transfer(
            to_address=ton_addr,
            amount_efhc=amount,
            comment=f"EFHC withdraw for tg={telegram_id} id={withdraw_id}"
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ tx_hash
        await _mark_withdraw_sent(db, withdraw_id, tx_hash)
        await notify_admins_withdraw_processed(withdraw_id, tx_hash)
        return {"ok": True, "status": "sent", "tx_hash": tx_hash}
    except Exception as e:
        await _mark_withdraw_failed(db, withdraw_id, str(e))
        await notify_admins_withdraw_failed(withdraw_id, str(e))
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–ø–ª–∞—Ç—ã: {e}")
