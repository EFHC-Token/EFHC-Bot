# üìÇ backend/app/withdraw_routes.py ‚Äî –≤—ã–≤–æ–¥ EFHC —Å TON-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π (–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø)
# -----------------------------------------------------------------------------
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
#   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤—ã–≤–æ–¥ EFHC –Ω–∞ TON-–∫–æ—à–µ–ª—ë–∫ (–≤—ã–ø–ª–∞—Ç—ã –≤ TON/USDT –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ).
#   ‚Ä¢ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –ø—Ä–æ—Å–º–æ—Ç—Ä, approve/reject, –æ—Ç–ø—Ä–∞–≤–∫–∞ (manual/auto), —Å—Ç–∞—Ç—É—Å—ã.
#   ‚Ä¢ –í—Å–µ —Å–ø–∏—Å–∞–Ω–∏—è EFHC —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –Ω–∞ –ë–∞–Ω–∫ (ID=362746228).
#   ‚Ä¢ –ü—Ä–∏ reject ‚Äî –≤–æ–∑–≤—Ä–∞—Ç EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ –ë–∞–Ω–∫–∞ (–≤ –ø–æ–ª–Ω–æ–º –æ–±—ä—ë–º–µ).
#   ‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–≤–∏–∂–µ–Ω–∏–π EFHC –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ efhc_transactions.py (efhc_transfers_log).
#
# –ë–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞:
#   ‚Ä¢ EFHC ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –µ–¥–∏–Ω–∏—Ü–∞, 1 EFHC = 1 kWh (–ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –ø—Ä–æ–µ–∫—Ç–∞).
#   ‚Ä¢ –ö–£–†–°–´ –ù–ï –ù–£–ñ–ù–´ (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é). –î–ª—è –≤—ã–≤–æ–¥–∞ —Å—á–∏—Ç–∞–µ–º "1 EFHC = 1 TON" (–∏–ª–∏ USDT),
#     –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω –∞–≤—Ç–æ-—Ä–µ–∂–∏–º –≤—ã–ø–ª–∞—Ç. –ó–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ.
#   ‚Ä¢ bonus_EFHC –ù–ï–õ–¨–ó–Ø –≤—ã–≤–æ–¥–∏—Ç—å (–æ–Ω–∏ —Ç—Ä–∞—Ç—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–∞–Ω–µ–ª–µ–π).
#   ‚Ä¢ –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –º—ã —Å—Ä–∞–∑—É "–±–ª–æ–∫–∏—Ä—É–µ–º" EFHC:
#       - —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏ÃÅ–º –∏—Ö user ‚Üí –ë–∞–Ω–∫ (debit_user_to_bank), —Å—Ç–∞—Ç—É—Å=Pending.
#       - –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥–≤–æ–π–Ω–æ–µ —Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–∏–µ –¥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è.
#   ‚Ä¢ –ü—Ä–∏ Reject ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º EFHC (–ë–∞–Ω–∫ ‚Üí user).
#   ‚Ä¢ –ü—Ä–∏ Approve ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ (–Ω–∏—á–µ–≥–æ –ø–æ EFHC —É–∂–µ –Ω–µ –¥–µ–ª–∞–µ–º ‚Äî –æ–Ω–∏ —É –ë–∞–Ω–∫–∞).
#   ‚Ä¢ –ü—Ä–∏ Send ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –≤—ã–ø–ª–∞—Ç—É (manual/auto-–º–æ–¥), —Å–æ—Ö—Ä–∞–Ω—è–µ–º tx_hash, —Å—Ç–∞—Ç—É—Å=Sent.
#
# –¢–∞–±–ª–∏—Ü–∞ efhc_core.withdrawals:
#   ‚Ä¢ id BIGSERIAL PK
#   ‚Ä¢ telegram_id BIGINT NOT NULL ‚Äî –∫—Ç–æ –≤—ã–≤–µ–ª
#   ‚Ä¢ ton_address TEXT NOT NULL ‚Äî –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
#   ‚Ä¢ amount_efhc NUMERIC(30,3) NOT NULL ‚Äî —Å—É–º–º–∞ EFHC
#   ‚Ä¢ asset TEXT NOT NULL DEFAULT 'TON' ‚Äî –∫–∞–∫–æ–π –∞–∫—Ç–∏–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º (TON/USDT)
#   ‚Ä¢ status TEXT NOT NULL CHECK (status IN ('pending','approved','rejected','sent','failed','canceled'))
#   ‚Ä¢ idempotency_key TEXT UNIQUE NULL ‚Äî —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
#   ‚Ä¢ tx_hash TEXT NULL ‚Äî —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏)
#   ‚Ä¢ admin_id BIGINT NULL ‚Äî –∫—Ç–æ –æ–¥–æ–±—Ä–∏–ª/–æ—Ç–ø—Ä–∞–≤–∏–ª
#   ‚Ä¢ comment TEXT NULL ‚Äî –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∞–¥–º–∏–Ω–∞
#   ‚Ä¢ created_at TIMESTAMPTZ DEFAULT now()
#   ‚Ä¢ approved_at TIMESTAMPTZ NULL
#   ‚Ä¢ sent_at TIMESTAMPTZ NULL
#   ‚Ä¢ updated_at TIMESTAMPTZ DEFAULT now()
#
# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
#   ‚Ä¢ database.py ‚Äî get_session, engine –∏ –ø—Ä–æ—á–µ–µ.
#   ‚Ä¢ config.py ‚Äî get_settings() (TON-–∫–æ—à–µ–ª—ë–∫, payout —Ä–µ–∂–∏–º—ã).
#   ‚Ä¢ models.py ‚Äî Balance, User (ORM), –Ω–æ –∑–¥–µ—Å—å –º—ã –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º raw SQL –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã withdrawals.
#   ‚Ä¢ efhc_transactions.py ‚Äî –æ–ø–µ—Ä–∞—Ü–∏–∏ EFHC —á–µ—Ä–µ–∑ –ë–∞–Ω–∫ (debit/credit), –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
#   ‚Ä¢ admin_routes.py ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –∞–¥–º–∏–Ω–∫–∏ (—É–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω).
#
# –í–∞–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (config.py):
#   ‚Ä¢ ADMIN_TELEGRAM_ID ‚Äî —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω.
#   ‚Ä¢ BANK_TELEGRAM_ID ‚Äî 362746228 (–∂—ë—Å—Ç–∫–æ –∑–∞—à–∏—Ç –∏ –≤ efhc_transactions).
#   ‚Ä¢ DB_SCHEMA_CORE ‚Äî 'efhc_core' (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).
#   ‚Ä¢ WITHDRAW_MIN_EFHC, WITHDRAW_MAX_EFHC ‚Äî –ª–∏–º–∏—Ç—ã (–º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤ .env).
#   ‚Ä¢ TON_PAYOUT_MODE ‚Äî 'manual' (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) | 'webhook'
#   ‚Ä¢ TON_PAYOUT_WEBHOOK_URL ‚Äî –µ—Å–ª–∏ 'webhook', URL –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –≤—ã–ø–ª–∞—Ç.
#   ‚Ä¢ TON_PAYOUT_API_KEY ‚Äî API-–∫–ª—é—á –¥–ª—è –≤–µ–±—Ö—É–∫–∞ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è).
#
# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:
#   ‚Ä¢ –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–æ—É—Ç–µ—Ä –≤ main.py:
#         from .withdraw_routes import router as withdraw_router
#         app.include_router(withdraw_router, prefix="/api")
# -----------------------------------------------------------------------------

from __future__ import annotations

from datetime import datetime
from decimal import Decimal, ROUND_DOWN
from typing import Optional, List, Dict, Any

import re
import httpx
from fastapi import APIRouter, Depends, Header, HTTPException, Query, Path
from pydantic import BaseModel, Field, condecimal
from sqlalchemy import text, select, update
from sqlalchemy.ext.asyncio import AsyncSession

from .database import get_session
from .config import get_settings
from .models import Balance, User
from .efhc_transactions import (
    BANK_TELEGRAM_ID,
    credit_user_from_bank,
    debit_user_to_bank,
)

# -----------------------------------------------------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# -----------------------------------------------------------------------------
router = APIRouter()
settings = get_settings()

# -----------------------------------------------------------------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã/—É—Ç–∏–ª–∏—Ç—ã –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
# -----------------------------------------------------------------------------
DEC3 = Decimal("0.001")

def d3(x: Decimal) -> Decimal:
    """
    –û–∫—Ä—É–≥–ª—è–µ—Ç Decimal –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –≤–Ω–∏–∑.
    –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–ª—è EFHC –∑–Ω–∞—á–µ–Ω–∏–π.
    """
    return x.quantize(DEC3, rounding=ROUND_DOWN)

# -----------------------------------------------------------------------------
# DDL: withdrawals (idempotent)
# -----------------------------------------------------------------------------
WITHDRAWALS_CREATE_SQL = """
CREATE TABLE IF NOT EXISTS {schema}.withdrawals (
    id BIGSERIAL PRIMARY KEY,
    telegram_id BIGINT NOT NULL,
    ton_address TEXT NOT NULL,
    amount_efhc NUMERIC(30,3) NOT NULL,
    asset TEXT NOT NULL DEFAULT 'TON',
    status TEXT NOT NULL CHECK (status IN ('pending','approved','rejected','sent','failed','canceled')),
    idempotency_key TEXT UNIQUE,
    tx_hash TEXT,
    admin_id BIGINT,
    comment TEXT,
    created_at TIMESTAMPTZ DEFAULT now(),
    approved_at TIMESTAMPTZ,
    sent_at TIMESTAMPTZ,
    updated_at TIMESTAMPTZ DEFAULT now()
);
"""

async def ensure_withdrawals_table(db: AsyncSession) -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É withdrawals –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (efhc_core.withdrawals).
    """
    await db.execute(text(WITHDRAWALS_CREATE_SQL.format(schema=settings.DB_SCHEMA_CORE)))
    await db.commit()

# -----------------------------------------------------------------------------
# –í–∞–ª–∏–¥–∞—Ü–∏—è TON-–∞–¥—Ä–µ—Å–∞ (–ø—Ä–æ—Å—Ç–∞—è)
# -----------------------------------------------------------------------------
TON_ADDR_RE = re.compile(r"^[EU][QqA-Za-z0-9_-]{46,66}$")

def validate_ton_address(addr: str) -> bool:
    """
    –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ TON-–∞–¥—Ä–µ—Å–∞.
    –†–∞–∑—Ä–µ—à–∞—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã base64url (EQ..., UQ...) –∏ –¥–ª–∏–Ω–∞ 48-66 —Å–∏–º–≤–æ–ª–æ–≤.
    """
    if not addr:
        return False
    addr = addr.strip()
    return bool(TON_ADDR_RE.match(addr))

# -----------------------------------------------------------------------------
# Pydantic-—Å—Ö–µ–º—ã
# -----------------------------------------------------------------------------
class CreateWithdrawRequest(BaseModel):
    """
    –ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:
      ‚Ä¢ ton_address ‚Äî –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è,
      ‚Ä¢ amount ‚Äî —Å—É–º–º–∞ EFHC –¥–ª—è –≤—ã–≤–æ–¥–∞ (–Ω–µ bonus_EFHC),
      ‚Ä¢ (–æ–ø—Ü.) asset ‚Äî 'TON' (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –∏–ª–∏ 'USDT' (Jetton), –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.
      ‚Ä¢ (–æ–ø—Ü.) idempotency_key ‚Äî –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.
      ‚Ä¢ (–æ–ø—Ü.) telegram_id ‚Äî –≤ —Ñ–æ—Ä–º–µ —Ñ—Ä–æ–Ω—Ç–∞ –µ—Å—Ç—å –ø–æ–ª–µ; —Å–≤–µ—Ä—è–µ–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º.
    """
    ton_address: str = Field(..., description="TON-–∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
    amount: condecimal(gt=0, max_digits=30, decimal_places=3) = Field(..., description="–°—É–º–º–∞ EFHC –¥–ª—è –≤—ã–≤–æ–¥–∞")
    asset: Optional[str] = Field("TON", description="–ê–∫—Ç–∏–≤ –≤—ã–ø–ª–∞—Ç—ã: 'TON' –∏–ª–∏ 'USDT'")
    idempotency_key: Optional[str] = Field(None, description="–ö–ª—é—á –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏")
    telegram_id: Optional[int] = Field(None, description="Telegram ID (–∏–∑ —Ñ–æ—Ä–º—ã)")

class WithdrawItem(BaseModel):
    """
    –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –≤—ã–≤–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–∞–¥–º–∏–Ω–∞.
    """
    id: int
    telegram_id: int
    ton_address: str
    amount_efhc: str
    asset: str
    status: str
    tx_hash: Optional[str]
    comment: Optional[str]
    admin_id: Optional[int]
    created_at: str
    approved_at: Optional[str]
    sent_at: Optional[str]

class AdminWithdrawAction(BaseModel):
    """
    –î–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞:
      ‚Ä¢ approve ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–Ω–∏—á–µ–≥–æ –Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ–º ‚Äî —É–∂–µ —Å–ø–∏—Å–∞–Ω–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏),
      ‚Ä¢ reject ‚Äî –æ—Ç–∫–∞–∑ (–≤–æ–∑–≤—Ä–∞—Ç EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é),
      ‚Ä¢ send ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–ø–ª–∞—Ç—ã (manual/auto).
    """
    comment: Optional[str] = Field(None, description="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

class AdminSendRequest(AdminWithdrawAction):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–ø–ª–∞—Ç—ã:
      ‚Ä¢ manual mode: –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å tx_hash,
      ‚Ä¢ webhook mode: –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å tx_hash ‚Äî –æ–Ω –≤–µ—Ä–Ω—ë—Ç—Å—è –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.
    """
    tx_hash: Optional[str] = Field(None, description="–•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–ª—è manual —Ä–µ–∂–∏–º–∞)")

# -----------------------------------------------------------------------------
# –°–µ—Ä–≤–∏—Å –≤—ã–ø–ª–∞—Ç (manual/webhook)
# -----------------------------------------------------------------------------
class TonPayoutService:
    """
    –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≤—ã–ø–ª–∞—Ç:
      ‚Ä¢ manual ‚Äî –∞–¥–º–∏–Ω —Å–∞–º –≤—Ä—É—á–Ω—É—é –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç –∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç tx_hash.
      ‚Ä¢ webhook ‚Äî –≤—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å (settings.TON_PAYOUT_WEBHOOK_URL),
                  –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç tx_hash.
    """
    def __init__(self, mode: str, webhook_url: Optional[str], api_key: Optional[str]):
        self.mode = (mode or "manual").lower().strip()
        self.webhook_url = webhook_url
        self.api_key = api_key

    async def send(self, asset: str, to_address: str, amount: Decimal) -> str:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É (–∏–ª–∏ –∏–º–∏—Ç–∏—Ä—É–µ—Ç) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç tx_hash.
        –ï—Å–ª–∏ mode=manual ‚Äî –≤—ã–∑—ã–≤–∞—Ç—å –Ω–µ–ª—å–∑—è (–≤–µ—Ä–Ω—ë–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ).
        """
        if self.mode == "manual":
            raise RuntimeError("Payout mode is MANUAL ‚Äî tx_hash must be provided by admin")

        # Webhook-—Ä–µ–∂–∏–º
        if not self.webhook_url:
            raise RuntimeError("TON_PAYOUT_WEBHOOK_URL is not configured")

        payload = {
            "asset": asset,
            "to_address": to_address,
            "amount": str(d3(amount)),
        }
        headers = {"Content-Type": "application/json"}
        if self.api_key:
            headers["X-Api-Key"] = self.api_key

        async with httpx.AsyncClient(timeout=30.0) as client:
            r = await client.post(self.webhook_url, json=payload, headers=headers)
            r.raise_for_status()
            data = r.json()

        # –û–∂–∏–¥–∞–µ–º { ok: true, tx_hash: "..." }
        if not data or not data.get("ok"):
            raise RuntimeError(f"Payout webhook error: {data}")

        txh = data.get("tx_hash")
        if not txh:
            raise RuntimeError("Payout webhook did not return tx_hash")
        return txh

payout_service = TonPayoutService(
    mode=(settings.TON_PAYOUT_MODE or "manual"),
    webhook_url=settings.TON_PAYOUT_WEBHOOK_URL,
    api_key=settings.TON_PAYOUT_API_KEY,
)

# -----------------------------------------------------------------------------
# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∞
# -----------------------------------------------------------------------------
async def require_user(x_telegram_id: Optional[str]) -> int:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Telegram-Id, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if not x_telegram_id or not x_telegram_id.isdigit():
        raise HTTPException(status_code=400, detail="X-Telegram-Id header required")
    return int(x_telegram_id)

async def require_admin(
    db: AsyncSession,
    x_telegram_id: Optional[str],
) -> int:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ X-Telegram-Id ‚Äî –∞–¥–º–∏–Ω (—Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –∏–ª–∏ –ë–∞–Ω–∫).
    NFT-–∞–¥–º–∏–Ω –≤ withdraw (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç–∞–º–∏) –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è,
    –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å.
    """
    if not x_telegram_id or not x_telegram_id.isdigit():
        raise HTTPException(status_code=400, detail="X-Telegram-Id header required")

    tg = int(x_telegram_id)
    if settings.ADMIN_TELEGRAM_ID and tg == int(settings.ADMIN_TELEGRAM_ID):
        return tg
    if tg == BANK_TELEGRAM_ID:
        return tg

    raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")

# -----------------------------------------------------------------------------
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
# -----------------------------------------------------------------------------
@router.post("/withdraw", summary="–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ EFHC")
async def create_withdraw(
    payload: CreateWithdrawRequest,
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
):
    """
    –°–æ–∑–¥–∞—ë—Ç –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ EFHC:
      ‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
      ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤.
      ‚Ä¢ –°–ø–∏—Å–∞–Ω–∏–µ EFHC —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–∞–Ω–∫ (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤) ‚Äî debit_user_to_bank(user ‚Üí –ë–∞–Ω–∫).
      ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ efhc_core.withdrawals —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending'.
      ‚Ä¢ Idempotency: –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω idempotency_key –∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –≤–µ—Ä–Ω—ë–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç.
    """
    await ensure_withdrawals_table(db)

    user_id = await require_user(x_telegram_id)

    # –ï—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç –ø–µ—Ä–µ–¥–∞–ª telegram_id –≤ —Ñ–æ—Ä–º–µ ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç (–∑–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫)
    if payload.telegram_id is not None and int(payload.telegram_id) != user_id:
        raise HTTPException(status_code=400, detail="Telegram ID mismatch")

    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è TON –∞–¥—Ä–µ—Å–∞
    if not validate_ton_address(payload.ton_address):
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π TON-–∞–¥—Ä–µ—Å")

    # –õ–∏–º–∏—Ç—ã
    min_w = d3(Decimal(getattr(settings, "WITHDRAW_MIN_EFHC", "1.000")))
    max_w = d3(Decimal(getattr(settings, "WITHDRAW_MAX_EFHC", "1000000.000")))
    amount = d3(Decimal(payload.amount))
    if amount < min_w:
        raise HTTPException(status_code=400, detail=f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {min_w}")
    if amount > max_w:
        raise HTTPException(status_code=400, detail=f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {max_w}")

    asset = (payload.asset or "TON").upper().strip()
    if asset not in ("TON", "USDT"):
        raise HTTPException(status_code=400, detail="Asset must be 'TON' or 'USDT'")

    # –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º –∫–ª—é—á–æ–º (–∏ –Ω–µ –æ—Ç–º–µ–Ω—ë–Ω–Ω–∞—è),
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë (–Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ä–∞–∑).
    if payload.idempotency_key:
        q = await db.execute(
            text(f"""
                SELECT id, telegram_id, ton_address, amount_efhc, asset, status, tx_hash, comment, admin_id,
                       created_at, approved_at, sent_at
                FROM {settings.DB_SCHEMA_CORE}.withdrawals
                WHERE idempotency_key = :ikey
            """),
            {"ikey": payload.idempotency_key},
        )
        row = q.first()
        if row:
            return {
                "ok": True,
                "withdraw": {
                    "id": row[0],
                    "telegram_id": row[1],
                    "ton_address": row[2],
                    "amount_efhc": str(d3(Decimal(row[3]))),
                    "asset": row[4],
                    "status": row[5],
                    "tx_hash": row[6],
                    "comment": row[7],
                    "admin_id": row[8],
                    "created_at": row[9].isoformat() if row[9] else None,
                    "approved_at": row[10].isoformat() if row[10] else None,
                    "sent_at": row[11].isoformat() if row[11] else None,
                }
            }

    # –ü—Ä–æ–≤–µ—Ä–∏–º –±–∞–ª–∞–Ω—Å EFHC (–∏–º–µ–Ω–Ω–æ EFHC, –Ω–µ bonus_EFHC)
    q = await db.execute(select(Balance).where(Balance.telegram_id == user_id))
    bal = q.scalar_one_or_none()
    if not bal:
        raise HTTPException(status_code=400, detail="–ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤—ã–≤–æ–¥")

    cur_efhc = d3(Decimal(bal.efhc or 0))
    if cur_efhc < amount:
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ EFHC –¥–ª—è –≤—ã–≤–æ–¥–∞")

    # –°–ø–∏—Å—ã–≤–∞–µ–º EFHC user ‚Üí –ë–∞–Ω–∫ (–±–ª–æ–∫–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞)
    try:
        await debit_user_to_bank(db, user_id=user_id, amount=amount)
    except HTTPException as he:
        # –ü—Ä–æ–±—Ä–æ—Å–∏–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        raise he
    except Exception as e:
        await db.rollback()
        raise HTTPException(status_code=400, detail=f"Failed to lock EFHC for withdraw: {e}")

    # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ withdrawals: status=pending
    try:
        q = await db.execute(
            text(f"""
                INSERT INTO {settings.DB_SCHEMA_CORE}.withdrawals
                (telegram_id, ton_address, amount_efhc, asset, status, idempotency_key, created_at)
                VALUES (:tg, :addr, :amt, :asset, 'pending', :ikey, NOW())
                RETURNING id
            """),
            {
                "tg": user_id,
                "addr": payload.ton_address.strip(),
                "amt": str(amount),
                "asset": asset,
                "ikey": payload.idempotency_key,
            },
        )
        wid = q.scalar_one()
        await db.commit()
    except Exception as e:
        await db.rollback()
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å ‚Äî –≤–µ—Ä–Ω—ë–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–æ—Ç–∫–∞—Ç–∞ –Ω–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–æ–º).
        try:
            await credit_user_from_bank(db, user_id=user_id, amount=amount)
        except Exception as e2:
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è: —Å—Ä–µ–¥—Å—Ç–≤–∞ "–∑–∞—Å—Ç—Ä—è–ª–∏" –≤ –ë–∞–Ω–∫–µ, –Ω–æ –∑–∞—è–≤–∫–∏ –Ω–µ—Ç.
            # –ù–µ —Å–∫—Ä—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –ø—É—Å—Ç—å –∞–¥–º–∏–Ω —Ä–∞–∑–±–µ—Ä—ë—Ç—Å—è; –Ω–æ –º—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–∏.
            raise HTTPException(status_code=500, detail=f"Withdraw create failed; refund failed too: {e} / {e2}")

        raise HTTPException(status_code=400, detail=f"Withdraw create failed: {e}")

    return {"ok": True, "withdraw_id": wid, "status": "pending"}

# -----------------------------------------------------------------------------
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –≤—ã–≤–æ–¥–æ–≤
# -----------------------------------------------------------------------------
@router.get("/withdraws", summary="–°–ø–∏—Å–æ–∫ –≤—ã–≤–æ–¥–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def list_user_withdraws(
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
    limit: int = Query(50, ge=1, le=500),
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∫–ª—é—á–∞—è pending, sent –∏ —Ç.–ø.).
    """
    user_id = await require_user(x_telegram_id)
    await ensure_withdrawals_table(db)

    q = await db.execute(
        text(f"""
            SELECT id, telegram_id, ton_address, amount_efhc, asset, status, tx_hash, comment,
                   admin_id, created_at, approved_at, sent_at
            FROM {settings.DB_SCHEMA_CORE}.withdrawals
            WHERE telegram_id = :tg
            ORDER BY created_at DESC
            LIMIT :lim
        """),
        {"tg": user_id, "lim": limit},
    )
    rows = q.fetchall()
    out: List[WithdrawItem] = []
    for r in rows:
        out.append(WithdrawItem(
            id=r[0],
            telegram_id=r[1],
            ton_address=r[2],
            amount_efhc=str(d3(Decimal(r[3]))),
            asset=r[4],
            status=r[5],
            tx_hash=r[6],
            comment=r[7],
            admin_id=r[8],
            created_at=r[9].isoformat() if r[9] else None,
            approved_at=r[10].isoformat() if r[10] else None,
            sent_at=r[11].isoformat() if r[11] else None,
        ))
    return {"ok": True, "items": [i.dict() for i in out]}

# -----------------------------------------------------------------------------
# –ê–¥–º–∏–Ω: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤—ã–≤–æ–¥–æ–≤
# -----------------------------------------------------------------------------
@router.get("/admin/withdraws", summary="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ (–∞–¥–º–∏–Ω)")
async def admin_list_withdraws(
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
    status: Optional[str] = Query(None, regex="^(pending|approved|rejected|sent|failed|canceled)$"),
    user_id: Optional[int] = Query(None),
    limit: int = Query(100, ge=1, le=1000),
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: —Å—Ç–∞—Ç—É—Å –∏/–∏–ª–∏ user_id.
    –î–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    """
    admin_id = await require_admin(db, x_telegram_id)
    await ensure_withdrawals_table(db)

    where_sql = "WHERE 1=1"
    params: Dict[str, Any] = {"lim": limit}

    if status:
        where_sql += " AND status = :st"
        params["st"] = status
    if user_id:
        where_sql += " AND telegram_id = :tg"
        params["tg"] = int(user_id)

    q = await db.execute(
        text(f"""
            SELECT id, telegram_id, ton_address, amount_efhc, asset, status, tx_hash, comment,
                   admin_id, created_at, approved_at, sent_at
            FROM {settings.DB_SCHEMA_CORE}.withdrawals
            {where_sql}
            ORDER BY created_at DESC
            LIMIT :lim
        """),
        params,
    )
    rows = q.fetchall()
    out: List[WithdrawItem] = []
    for r in rows:
        out.append(WithdrawItem(
            id=r[0],
            telegram_id=r[1],
            ton_address=r[2],
            amount_efhc=str(d3(Decimal(r[3]))),
            asset=r[4],
            status=r[5],
            tx_hash=r[6],
            comment=r[7],
            admin_id=r[8],
            created_at=r[9].isoformat() if r[9] else None,
            approved_at=r[10].isoformat() if r[10] else None,
            sent_at=r[11].isoformat() if r[11] else None,
        ))
    return {"ok": True, "items": [i.dict() for i in out]}

# -----------------------------------------------------------------------------
# –ê–¥–º–∏–Ω: –¥–µ—Ç–∞–ª—å–Ω–∞—è –∑–∞—è–≤–∫–∞
# -----------------------------------------------------------------------------
@router.get("/admin/withdraws/{withdraw_id}", summary="–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ (–∞–¥–º–∏–Ω)")
async def admin_get_withdraw(
    withdraw_id: int = Path(..., ge=1),
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏.
    """
    admin_id = await require_admin(db, x_telegram_id)
    await ensure_withdrawals_table(db)
    q = await db.execute(
        text(f"""
            SELECT id, telegram_id, ton_address, amount_efhc, asset, status, tx_hash, comment,
                   admin_id, created_at, approved_at, sent_at
            FROM {settings.DB_SCHEMA_CORE}.withdrawals
            WHERE id = :wid
        """),
        {"wid": withdraw_id},
    )
    r = q.first()
    if not r:
        raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    item = WithdrawItem(
        id=r[0],
        telegram_id=r[1],
        ton_address=r[2],
        amount_efhc=str(d3(Decimal(r[3]))),
        asset=r[4],
        status=r[5],
        tx_hash=r[6],
        comment=r[7],
        admin_id=r[8],
        created_at=r[9].isoformat() if r[9] else None,
        approved_at=r[10].isoformat() if r[10] else None,
        sent_at=r[11].isoformat() if r[11] else None,
    )
    return {"ok": True, "item": item.dict()}

# -----------------------------------------------------------------------------
# –ê–¥–º–∏–Ω: approve –∑–∞—è–≤–∫–∏
# -----------------------------------------------------------------------------
@router.post("/admin/withdraws/{withdraw_id}/approve", summary="–û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É (–∞–¥–º–∏–Ω)")
async def admin_approve_withdraw(
    withdraw_id: int = Path(..., ge=1),
    payload: AdminWithdrawAction = AdminWithdrawAction(),
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
):
    """
    –û–¥–æ–±—Ä—è–µ—Ç –∑–∞—è–≤–∫—É:
      ‚Ä¢ –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å != pending, –≤–µ—Ä–Ω—ë–º –æ—à–∏–±–∫—É.
      ‚Ä¢ EFHC —É–∂–µ –Ω–∞ –ë–∞–Ω–∫–µ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞).
      ‚Ä¢ –§–∏–∫—Å–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å=approved; approved_at=NOW(); admin_id.
    """
    admin_id = await require_admin(db, x_telegram_id)
    await ensure_withdrawals_table(db)

    q = await db.execute(
        text(f"""
            SELECT status FROM {settings.DB_SCHEMA_CORE}.withdrawals WHERE id = :wid
        """),
        {"wid": withdraw_id},
    )
    row = q.first()
    if not row:
        raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    st = row[0]
    if st != "pending":
        raise HTTPException(status_code=400, detail=f"–ù–µ–ª—å–∑—è –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É –≤ —Å—Ç–∞—Ç—É—Å–µ {st}")

    await db.execute(
        text(f"""
            UPDATE {settings.DB_SCHEMA_CORE}.withdrawals
            SET status='approved', approved_at=NOW(), admin_id=:aid, comment=:cmt, updated_at=NOW()
            WHERE id=:wid
        """),
        {"aid": admin_id, "cmt": payload.comment, "wid": withdraw_id},
    )
    await db.commit()
    return {"ok": True, "status": "approved"}

# -----------------------------------------------------------------------------
# –ê–¥–º–∏–Ω: reject –∑–∞—è–≤–∫–∏
# -----------------------------------------------------------------------------
@router.post("/admin/withdraws/{withdraw_id}/reject", summary="–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É (–∞–¥–º–∏–Ω)")
async def admin_reject_withdraw(
    withdraw_id: int = Path(..., ge=1),
    payload: AdminWithdrawAction = AdminWithdrawAction(),
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
):
    """
    –û—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É:
      ‚Ä¢ –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã: 'pending' –∏–ª–∏ 'approved' (–µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞).
      ‚Ä¢ –í–æ–∑–≤—Ä–∞—â–∞–µ–º EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: –ë–∞–Ω–∫ ‚Üí user (–Ω–∞ —Ç—É –∂–µ —Å—É–º–º—É).
      ‚Ä¢ –°—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å='rejected', –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º admin_id, comment.
    """
    admin_id = await require_admin(db, x_telegram_id)
    await ensure_withdrawals_table(db)

    q = await db.execute(
        text(f"""
            SELECT telegram_id, amount_efhc, status
            FROM {settings.DB_SCHEMA_CORE}.withdrawals WHERE id = :wid
        """),
        {"wid": withdraw_id},
    )
    row = q.first()
    if not row:
        raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    user_id, amt, st = int(row[0]), d3(Decimal(row[1])), row[2]

    if st not in ("pending", "approved"):
        raise HTTPException(status_code=400, detail=f"–ù–µ–ª—å–∑—è –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –≤ —Å—Ç–∞—Ç—É—Å–µ {st}")

    # –í–æ–∑–≤—Ä–∞—Ç EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∏–∑ –ë–∞–Ω–∫–∞)
    try:
        await credit_user_from_bank(db, user_id=user_id, amount=amt)
    except Exception as e:
        await db.rollback()
        raise HTTPException(status_code=400, detail=f"–í–æ–∑–≤—Ä–∞—Ç EFHC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ —É–¥–∞–ª—Å—è: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await db.execute(
        text(f"""
            UPDATE {settings.DB_SCHEMA_CORE}.withdrawals
            SET status='rejected', admin_id=:aid, comment=:cmt, updated_at=NOW()
            WHERE id=:wid
        """),
        {"aid": admin_id, "cmt": payload.comment, "wid": withdraw_id},
    )
    await db.commit()
    return {"ok": True, "status": "rejected"}

# -----------------------------------------------------------------------------
# –ê–¥–º–∏–Ω: –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–ø–ª–∞—Ç—ã (manual/webhook)
# -----------------------------------------------------------------------------
@router.post("/admin/withdraws/{withdraw_id}/send", summary="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É (–∞–¥–º–∏–Ω)")
async def admin_send_withdraw(
    withdraw_id: int = Path(..., ge=1),
    payload: AdminSendRequest = AdminSendRequest(),
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–ø–ª–∞—Ç—ã:
      ‚Ä¢ –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã: 'approved' (–æ–¥–æ–±—Ä–µ–Ω–∞, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞).
      ‚Ä¢ manual: admin –æ–±—è–∑–∞–Ω —É–∫–∞–∑–∞—Ç—å tx_hash –≤ payload.tx_hash.
      ‚Ä¢ webhook: –≤—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω—ë—Ç tx_hash.
      ‚Ä¢ –ù–∞ EFHC —ç—Ç–æ –Ω–µ –≤–ª–∏—è–µ—Ç (–æ–Ω–∏ —É–∂–µ —É –ë–∞–Ω–∫–∞).
      ‚Ä¢ –°—Ç–∞—Ç—É—Å –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ 'sent' –ø—Ä–∏ —É—Å–ø–µ—Ö–µ.
    """
    admin_id = await require_admin(db, x_telegram_id)
    await ensure_withdrawals_table(db)

    q = await db.execute(
        text(f"""
            SELECT telegram_id, ton_address, amount_efhc, asset, status
            FROM {settings.DB_SCHEMA_CORE}.withdrawals
            WHERE id = :wid
        """),
        {"wid": withdraw_id},
    )
    row = q.first()
    if not row:
        raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    user_id, to_addr, amt, asset, st = int(row[0]), row[1], d3(Decimal(row[2])), row[3], row[4]

    if st != "approved":
        raise HTTPException(status_code=400, detail=f"–ó–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å—Ç–∞—Ç—É—Å–µ 'approved', —Å–µ–π—á–∞—Å: {st}")

    tx_hash: Optional[str] = None
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –≤—ã–ø–ª–∞—Ç:
    if payout_service.mode == "manual":
        # tx_hash –¥–æ–ª–∂–µ–Ω –¥–∞—Ç—å –∞–¥–º–∏–Ω
        if not payload.tx_hash:
            raise HTTPException(status_code=400, detail="tx_hash –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –≤ manual-—Ä–µ–∂–∏–º–µ")
        tx_hash = payload.tx_hash.strip()
    else:
        # webhook-—Ä–µ–∂–∏–º: –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        try:
            tx_hash = await payout_service.send(asset=asset, to_address=to_addr, amount=amt)
        except Exception as e:
            await db.execute(
                text(f"""
                    UPDATE {settings.DB_SCHEMA_CORE}.withdrawals
                    SET status='failed', admin_id=:aid, comment=:cmt, updated_at=NOW()
                    WHERE id=:wid
                """),
                {"aid": admin_id, "cmt": f"send failed: {e}", "wid": withdraw_id},
            )
            await db.commit()
            raise HTTPException(status_code=400, detail=f"Payout failed: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É ‚Üí sent
    await db.execute(
        text(f"""
            UPDATE {settings.DB_SCHEMA_CORE}.withdrawals
            SET status='sent', tx_hash=:txh, admin_id=:aid, comment=:cmt, sent_at=NOW(), updated_at=NOW()
            WHERE id=:wid
        """),
        {"aid": admin_id, "cmt": payload.comment, "txh": tx_hash, "wid": withdraw_id},
    )
    await db.commit()
    return {"ok": True, "status": "sent", "tx_hash": tx_hash}

# -----------------------------------------------------------------------------
# –ê–¥–º–∏–Ω: –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ failed (–≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫)
# -----------------------------------------------------------------------------
@router.post("/admin/withdraws/{withdraw_id}/fail", summary="–ü–æ–º–µ—Ç–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É –∫–∞–∫ failed (–∞–¥–º–∏–Ω)")
async def admin_fail_withdraw(
    withdraw_id: int = Path(..., ge=1),
    payload: AdminWithdrawAction = AdminWithdrawAction(),
    db: AsyncSession = Depends(get_session),
    x_telegram_id: Optional[str] = Header(None, alias="X-Telegram-Id"),
):
    """
    –ü–æ–º–µ—á–∞–µ—Ç –∑–∞—è–≤–∫—É –∫–∞–∫ failed (–µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ).
    –û–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ webhook-—Ä–µ–∂–∏–º–µ.
    """
    admin_id = await require_admin(db, x_telegram_id)
    await ensure_withdrawals_table(db)

    q = await db.execute(
        text(f"SELECT status FROM {settings.DB_SCHEMA_CORE}.withdrawals WHERE id=:wid"),
        {"wid": withdraw_id},
    )
    row = q.first()
    if not row:
        raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    st = row[0]
    if st not in ("approved", "pending"):
        # –†–∞–∑—É–º–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å ‚Äî –Ω–µ –º–µ–Ω—è–µ–º sent/rejected
        raise HTTPException(status_code=400, detail=f"–ù–µ–ª—å–∑—è –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ failed –≤ —Å—Ç–∞—Ç—É—Å–µ {st}")

    await db.execute(
        text(f"""
            UPDATE {settings.DB_SCHEMA_CORE}.withdrawals
            SET status='failed', admin_id=:aid, comment=:cmt, updated_at=NOW()
            WHERE id=:wid
        """),
        {"aid": admin_id, "cmt": payload.comment, "wid": withdraw_id},
    )
    await db.commit()
    return {"ok": True, "status": "failed"}

# -----------------------------------------------------------------------------
# –í–∞–∂–Ω–æ:
#   ‚Ä¢ –í–µ–∑–¥–µ —Å–æ–±–ª—é–¥—ë–Ω –ø—Ä–∏–Ω—Ü–∏–ø ¬´–≤—Å—ë EFHC —á–µ—Ä–µ–∑ –ë–∞–Ω–∫¬ª.
#   ‚Ä¢ bonus_EFHC –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≤—ã–≤–æ–¥–µ –≤–æ–æ–±—â–µ.
#   ‚Ä¢ –û–±–º–µ–Ω–Ω–∏–∫/Shop/–ü–∞–Ω–µ–ª–∏/–õ–æ—Ç–µ—Ä–µ–∏/–†–µ—Ñ–µ—Ä–∞–ª—ã –¥–æ–ª–∂–Ω—ã –≤—ã–∑—ã–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ efhc_transactions.
# -----------------------------------------------------------------------------
