// üìÑ frontend/src/pages/Withdraw.jsx
// -----------------------------------------------------------------------------
// –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü–∞:
//   ‚Ä¢ –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ EFHC –Ω–∞ —Å–≤–æ–π TON-–∞–¥—Ä–µ—Å.
//   ‚Ä¢ –ü–æ–ª—è —Ñ–æ—Ä–º—ã: Telegram ID (readonly), TON-–∞–¥—Ä–µ—Å, —Å—É–º–º–∞ EFHC.
//   ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å POST /api/withdraw (—Å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º initData).
//   ‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: pending/sent/failed.
//   ‚Ä¢ –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å EFHC –≤ —Ç–æ–ø-–±–∞—Ä–µ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ç–µ–∫—Å—Ç).
//
// –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è/–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
//   ‚Ä¢ TailwindCSS –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏.
//   ‚Ä¢ Telegram WebApp SDK (window.Telegram.WebApp.initData / initDataUnsafe) ‚Äî –¥–ª—è –ø–æ–¥–ø–∏—Å–∏.
//   ‚Ä¢ BACKEND_API_URL –≤ env-–∫–æ–Ω—Ñ–∏–≥–µ.
//   ‚Ä¢ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç TopBar.jsx —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ (–∑–¥–µ—Å—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è).
// -----------------------------------------------------------------------------

import React, { useEffect, useMemo, useState } from "react";
import { toast } from "react-hot-toast";

// –£—Ç–∏–ª–∏—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ URL –±–µ–∫–µ–Ω–¥–∞.
// –ú–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —É—Ç–∏–ª–∏—Ç—ã api.js, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.
const BACKEND_API_URL = import.meta.env.VITE_BACKEND_API_URL || "http://localhost:8000/api";

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç initData –∏–∑ Telegram WebApp (—Å—Ç—Ä–æ–∫–∞).
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞ (–≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –±–µ–∫–µ–Ω–¥–µ).
 */
function getInitData() {
  if (window?.Telegram?.WebApp?.initData) {
    return window.Telegram.WebApp.initData;
  }
  return "";
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initDataUnsafe.
 * –û—Ç—Ç—É–¥–∞ –±–µ—Ä—ë–º telegram_id, username, –∏ —Ç.–ø.
 */
function getUserFromInitDataUnsafe() {
  const user = window?.Telegram?.WebApp?.initDataUnsafe?.user;
  if (!user) return null;
  return {
    id: user.id,
    username: user.username ? `@${user.username}` : `id${user.id}`,
  };
}

const Withdraw = () => {
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ initDataUnsafe
  const tgUser = useMemo(() => getUserFromInitDataUnsafe(), []);
  const [telegramId, setTelegramId] = useState<number | null>(tgUser?.id || null);
  const [wallet, setWallet] = useState<string>(""); // TON-–∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [amount, setAmount] = useState<string>(""); // EFHC —Å—É–º–º–∞
  const [submitting, setSubmitting] = useState<boolean>(false);

  const [withdraws, setWithdraws] = useState<any[]>([]); // —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è ‚Äî –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
  const [loadingList, setLoadingList] = useState<boolean>(false);

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebApp –≤–∏–∑—É–∞–ª—å–Ω–æ
    try {
      if (window?.Telegram?.WebApp) {
        window.Telegram.WebApp.enableClosingConfirmation();
        window.Telegram.WebApp.expand();
      }
    } catch (e) {
      console.error("Telegram WebApp init error:", e);
    }
  }, []);

  useEffect(() => {
    // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async function fetchWithdraws() {
      if (!telegramId) return;
      setLoadingList(true);
      try {
        const resp = await fetch(`${BACKEND_API_URL}/withdraw?user_id=${telegramId}`, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            "X-Telegram-Init-Data": getInitData(), // –ø–µ—Ä–µ–¥–∞–µ–º initData –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ –±–µ–∫–µ–Ω–¥–µ
          },
        });
        const data = await resp.json();
        if (!resp.ok) {
          throw new Error(data?.detail || "Failed to fetch withdraws");
        }
        setWithdraws(Array.isArray(data.items) ? data.items : []);
      } catch (err: any) {
        console.error(err);
        toast.error(err?.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫");
      } finally {
        setLoadingList(false);
      }
    }
    fetchWithdraws();
  }, [telegramId]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!telegramId) {
      toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å Telegram ID");
      return;
    }
    if (!wallet || !/^UQ|EQ|0\:|kQ|-\w/.test(wallet)) {
      // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ TON –∞–¥—Ä–µ—Å–∞. –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å.
      toast.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π TON-–∞–¥—Ä–µ—Å");
      return;
    }
    const amt = parseFloat(amount);
    if (!amt || amt <= 0) {
      toast.error("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É EFHC (> 0)");
      return;
    }

    setSubmitting(true);
    try {
      const resp = await fetch(`${BACKEND_API_URL}/withdraw`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-Telegram-Init-Data": getInitData(),
        },
        body: JSON.stringify({
          user_id: telegramId,
          ton_address: wallet,
          amount_efhc: amt,
        }),
      });
      const data = await resp.json();
      if (!resp.ok) {
        throw new Error(data?.detail || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É");
      }
      toast.success("–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º");
      setAmount("");
      // –î–æ–±–∞–≤–∏–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
      if (data?.withdrawal) {
        setWithdraws((prev) => [data.withdrawal, ...prev]);
      }
    } catch (err: any) {
      console.error(err);
      toast.error(err?.message || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏");
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="w-full h-full bg-gray-900 text-gray-100 p-4">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞ */}
      <h1 className="text-xl font-bold mb-4">üí∏ –í—ã–≤–æ–¥ EFHC</h1>

      {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ */}
      <form
        onSubmit={handleSubmit}
        className="bg-gray-800 rounded-lg p-4 flex flex-col gap-4"
      >
        <div>
          <label className="block text-sm text-gray-400 mb-1">Telegram ID</label>
          <input
            type="text"
            value={telegramId || ""}
            readOnly
            className="w-full bg-gray-700 text-gray-200 p-2 rounded border border-gray-600"
          />
        </div>

        <div>
          <label className="block text-sm text-gray-400 mb-1">TON-–∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è</label>
          <input
            type="text"
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: EQD... –∏–ª–∏ UQ..."
            value={wallet}
            onChange={(e) => setWallet(e.target.value)}
            className="w-full bg-gray-700 text-gray-200 p-2 rounded border border-gray-600"
          />
        </div>

        <div>
          <label className="block text-sm text-gray-400 mb-1">–°—É–º–º–∞ EFHC –¥–ª—è –≤—ã–≤–æ–¥–∞</label>
          <input
            type="number"
            step="0.001"
            min="0.001"
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 25.500"
            value={amount}
            onChange={(e) => setAmount(e.target.value)}
            className="w-full bg-gray-700 text-gray-200 p-2 rounded border border-gray-600"
          />
        </div>

        <p className="text-xs text-gray-400">
          ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –í—ã–≤–æ–¥ EFHC –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π TON-–∫–æ—à–µ–ª—ë–∫. –í—ã–ø–ª–∞—Ç–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Å–µ—Ç–∏ TON (Jetton EFHC). –°—Ç–∞—Ç—É—Å ¬´pending¬ª –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∑–∞—è–≤–∫–∞ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
        </p>

        <button
          type="submit"
          disabled={submitting}
          className="bg-green-600 hover:bg-green-500 transition text-white font-semibold py-2 px-4 rounded disabled:opacity-50"
        >
          {submitting ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"}
        </button>
      </form>

      {/* –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      <div className="mt-6">
        <h2 className="text-lg font-semibold mb-2">üßæ –ú–æ–∏ –∑–∞—è–≤–∫–∏</h2>
        {loadingList ? (
          <div className="text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        ) : (
          <div className="bg-gray-800 rounded-lg p-2">
            {withdraws.length === 0 ? (
              <div className="text-gray-400 px-2 py-4">–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.</div>
            ) : (
              <table className="min-w-full text-sm">
                <thead>
                  <tr className="text-gray-400">
                    <th className="text-left py-2 px-2">ID</th>
                    <th className="text-left py-2 px-2">–î–∞—Ç–∞</th>
                    <th className="text-left py-2 px-2">TON-–∞–¥—Ä–µ—Å</th>
                    <th className="text-left py-2 px-2">–°—É–º–º–∞ EFHC</th>
                    <th className="text-left py-2 px-2">–°—Ç–∞—Ç—É—Å</th>
                    <th className="text-left py-2 px-2">Tx Hash</th>
                  </tr>
                </thead>
                <tbody>
                  {withdraws.map((w) => (
                    <tr key={w.id} className="border-t border-gray-700">
                      <td className="py-2 px-2">{w.id}</td>
                      <td className="py-2 px-2">{new Date(w.created_at).toLocaleString()}</td>
                      <td className="py-2 px-2 truncate">{w.ton_address}</td>
                      <td className="py-2 px-2">{Number(w.amount).toFixed(3)}</td>
                      <td className="py-2 px-2">
                        {w.status === "pending" && <span className="text-yellow-400">–û–∂–∏–¥–∞–Ω–∏–µ</span>}
                        {w.status === "sent" && <span className="text-green-400">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</span>}
                        {w.status === "failed" && <span className="text-red-400">–û—à–∏–±–∫–∞</span>}
                      </td>
                      <td className="py-2 px-2">{w.tx_hash || "-"}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default Withdraw;
